
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001032c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c4c  080104dc  080104dc  000204dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013128  08013128  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08013128  08013128  00023128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013130  08013130  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013130  08013130  00023130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013134  08013134  00023134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013138  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          0000aa40  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  2000aad0  2000aad0  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020274  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ae  00000000  00000000  00050334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  000556e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001600  00000000  00000000  00056d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030261  00000000  00000000  00058388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026128  00000000  00000000  000885e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecc7b  00000000  00000000  000ae711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019b38c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000670c  00000000  00000000  0019b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080104c4 	.word	0x080104c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080104c4 	.word	0x080104c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fd5e 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f812 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8d2 	bl	8000748 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 f878 	bl	8000698 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a8:	f000 f8a0 	bl	80006ec <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005ac:	f003 fe24 	bl	80041f8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init ();
 80005b0:	f000 fb62 	bl	8000c78 <udpServer_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <main+0x2c>)
 80005b6:	f004 f88f 	bl	80046d8 <ethernetif_input>
	  sys_check_timeouts();
 80005ba:	f00b fc0f 	bl	800bddc <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005be:	e7f9      	b.n	80005b4 <main+0x20>
 80005c0:	20000604 	.word	0x20000604

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00e fd6a 	bl	800f0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	; 0xa8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fb79 	bl	8002d40 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f926 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fdda 	bl	8003230 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f90f 	bl	80008a4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART3_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006d0:	f002 ffce 	bl	8003670 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f8e3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	40004800 	.word	0x40004800

080006ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	2202      	movs	r2, #2
 8000702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2202      	movs	r2, #2
 800070e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2201      	movs	r2, #1
 8000714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2201      	movs	r2, #1
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	f002 f9e9 	bl	8002b06 <HAL_PCD_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8b3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000f0 	.word	0x200000f0

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a4b      	ldr	r2, [pc, #300]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b49      	ldr	r3, [pc, #292]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a44      	ldr	r2, [pc, #272]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a36      	ldr	r2, [pc, #216]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0181 	movw	r1, #16513	; 0x4081
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <MX_GPIO_Init+0x150>)
 800080e:	f002 f961 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <MX_GPIO_Init+0x154>)
 8000818:	f002 f95c 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0x158>)
 8000834:	f001 ffa2 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	; 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_GPIO_Init+0x150>)
 8000852:	f001 ff93 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x154>)
 800086e:	f001 ff85 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0x154>)
 8000886:	f001 ff79 	bl	800277c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400
 800089c:	40021800 	.word	0x40021800
 80008a0:	40020800 	.word	0x40020800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12c      	bne.n	800097c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x88>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800095a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800096c:	2307      	movs	r3, #7
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000978:	f001 ff00 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004800 	.word	0x40004800
 8000988:	40023800 	.word	0x40023800
 800098c:	40020c00 	.word	0x40020c00

08000990 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009b0:	d13f      	bne.n	8000a32 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <HAL_PCD_MspInit+0xb0>)
 80009ec:	f001 fec6 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <HAL_PCD_MspInit+0xb0>)
 8000a06:	f001 feb9 	bl	800277c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6353      	str	r3, [r2, #52]	; 0x34
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_PCD_MspInit+0xac>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 fb34 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <ETH_IRQHandler+0x10>)
 8000a9e:	f000 ff85 	bl	80019ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000511c 	.word	0x2000511c

08000aac <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <ETH_WKUP_IRQHandler+0x10>)
 8000ab2:	f000 ff7b 	bl	80019ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000511c 	.word	0x2000511c

08000ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_kill>:

int _kill(int pid, int sig)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <_kill+0x20>)
 8000adc:	2216      	movs	r2, #22
 8000ade:	601a      	str	r2, [r3, #0]
  return -1;
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	2000aac0 	.word	0x2000aac0

08000af4 <_exit>:

void _exit (int status)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ffe5 	bl	8000ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b06:	e7fe      	b.n	8000b06 <_exit+0x12>

08000b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e00a      	b.n	8000b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b1a:	f3af 8000 	nop.w
 8000b1e:	4601      	mov	r1, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf0      	blt.n	8000b1a <_read+0x12>
  }

  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e009      	b.n	8000b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf1      	blt.n	8000b54 <_write+0x12>
  }
  return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_close>:

int _close(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d205      	bcs.n	8000c20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <_sbrk+0x6c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	371c      	adds	r7, #28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20030000 	.word	0x20030000
 8000c44:	00004000 	.word	0x00004000
 8000c48:	200005fc 	.word	0x200005fc
 8000c4c:	2000aad0 	.word	0x2000aad0
 8000c50:	2000aac0 	.word	0x2000aac0

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000c7e:	f00b fe1b 	bl	800c8b8 <udp_new>
 8000c82:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 10);
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <udpServer_init+0x44>)
 8000c86:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2207      	movs	r2, #7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f00b fc92 	bl	800c5b8 <udp_bind>
 8000c94:	4603      	mov	r3, r0
 8000c96:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000c98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <udpServer_init+0x48>)
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f00b fda5 	bl	800c7f4 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000caa:	e002      	b.n	8000cb2 <udpServer_init+0x3a>
	   udp_remove(upcb);
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f00b fdc1 	bl	800c834 <udp_remove>
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0a00a8c0 	.word	0x0a00a8c0
 8000cc0:	08000cc5 	.word	0x08000cc5

08000cc4 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0a0      	sub	sp, #128	; 0x80
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f00d f9ea 	bl	800e0ac <ip4addr_ntoa>
 8000cd8:	67f8      	str	r0, [r7, #124]	; 0x7c

	char buf[100];


	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4917      	ldr	r1, [pc, #92]	; (8000d40 <udp_receive_callback+0x7c>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00e fa3f 	bl	800f168 <siprintf>
 8000cea:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2036      	movs	r0, #54	; 0x36
 8000cf8:	f004 fff8 	bl	8005cec <pbuf_alloc>
 8000cfc:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 8000cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d0a:	f005 fd3f 	bl	800678c <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000d0e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000d12:	461a      	mov	r2, r3
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f00b fcd6 	bl	800c6c8 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000d1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f00b fa60 	bl	800c1e4 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000d24:	68b8      	ldr	r0, [r7, #8]
 8000d26:	f00b fd3d 	bl	800c7a4 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000d2a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d2c:	f005 fac2 	bl	80062b4 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f005 fabf 	bl	80062b4 <pbuf_free>
}
 8000d36:	bf00      	nop
 8000d38:	3780      	adds	r7, #128	; 0x80
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	080104dc 	.word	0x080104dc

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ff71 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f00e f93f 	bl	800eff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc0d 	bl	8000594 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d88:	08013138 	.word	0x08013138
  ldr r2, =_sbss
 8000d8c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d90:	2000aad0 	.word	0x2000aad0

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>

08000d96 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <LAN8742_RegisterBusIO+0x28>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <LAN8742_RegisterBusIO+0x28>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <LAN8742_RegisterBusIO+0x28>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e014      	b.n	8000dee <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d17c      	bne.n	8000f14 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e01c      	b.n	8000e6e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f107 0208 	add.w	r2, r7, #8
 8000e3c:	2112      	movs	r1, #18
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	4798      	blx	r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da03      	bge.n	8000e50 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000e48:	f06f 0304 	mvn.w	r3, #4
 8000e4c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000e4e:	e00b      	b.n	8000e68 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d105      	bne.n	8000e68 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
         break;
 8000e66:	e005      	b.n	8000e74 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2b1f      	cmp	r3, #31
 8000e72:	d9df      	bls.n	8000e34 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b1f      	cmp	r3, #31
 8000e7a:	d902      	bls.n	8000e82 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e7c:	f06f 0302 	mvn.w	r3, #2
 8000e80:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d145      	bne.n	8000f14 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e94:	2100      	movs	r1, #0
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db37      	blt.n	8000f0e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6810      	ldr	r0, [r2, #0]
 8000ea6:	f107 0208 	add.w	r2, r7, #8
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4798      	blx	r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db28      	blt.n	8000f06 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4798      	blx	r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ebe:	e01c      	b.n	8000efa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4798      	blx	r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ed2:	d80e      	bhi.n	8000ef2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4798      	blx	r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da07      	bge.n	8000efa <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000eea:	f06f 0304 	mvn.w	r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
                 break;
 8000ef0:	e010      	b.n	8000f14 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000ef2:	f06f 0301 	mvn.w	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
               break;
 8000ef8:	e00c      	b.n	8000f14 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1dd      	bne.n	8000ec0 <LAN8742_Init+0xc6>
 8000f04:	e006      	b.n	8000f14 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f06:	f06f 0304 	mvn.w	r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	e002      	b.n	8000f14 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f0e:	f06f 0303 	mvn.w	r3, #3
 8000f12:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d112      	bne.n	8000f40 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4798      	blx	r3
 8000f20:	4603      	mov	r3, r0
 8000f22:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f24:	bf00      	nop
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4798      	blx	r3
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f38:	d9f5      	bls.n	8000f26 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000f40:	693b      	ldr	r3, [r7, #16]
 }
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6810      	ldr	r0, [r2, #0]
 8000f5e:	f107 020c 	add.w	r2, r7, #12
 8000f62:	2101      	movs	r1, #1
 8000f64:	4798      	blx	r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da02      	bge.n	8000f72 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f6c:	f06f 0304 	mvn.w	r3, #4
 8000f70:	e06e      	b.n	8001050 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6810      	ldr	r0, [r2, #0]
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4798      	blx	r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da02      	bge.n	8000f8e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f88:	f06f 0304 	mvn.w	r3, #4
 8000f8c:	e060      	b.n	8001050 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e059      	b.n	8001050 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	f107 020c 	add.w	r2, r7, #12
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da02      	bge.n	8000fb8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fb2:	f06f 0304 	mvn.w	r3, #4
 8000fb6:	e04b      	b.n	8001050 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11b      	bne.n	8000ffa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <LAN8742_GetLinkState+0x90>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e03a      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e033      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e02c      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e02a      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6810      	ldr	r0, [r2, #0]
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	211f      	movs	r1, #31
 8001008:	4798      	blx	r3
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	da02      	bge.n	8001016 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001010:	f06f 0304 	mvn.w	r3, #4
 8001014:	e01c      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001020:	2306      	movs	r3, #6
 8001022:	e015      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 031c 	and.w	r3, r3, #28
 800102a:	2b18      	cmp	r3, #24
 800102c:	d101      	bne.n	8001032 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800102e:	2302      	movs	r3, #2
 8001030:	e00e      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 031c 	and.w	r3, r3, #28
 8001038:	2b08      	cmp	r3, #8
 800103a:	d101      	bne.n	8001040 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800103c:	2303      	movs	r3, #3
 800103e:	e007      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 031c 	and.w	r3, r3, #28
 8001046:	2b14      	cmp	r3, #20
 8001048:	d101      	bne.n	800104e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800104a:	2304      	movs	r3, #4
 800104c:	e000      	b.n	8001050 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800104e:	2305      	movs	r3, #5
    }				
  }
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f94f 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fc10 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f967 	bl	800138e <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f92f 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000600 	.word	0x20000600

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000600 	.word	0x20000600

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06c      	b.n	8001494 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2223      	movs	r2, #35	; 0x23
 80013c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f003 f9f3 	bl	80047b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_ETH_Init+0xf4>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a30      	ldr	r2, [pc, #192]	; (800149c <HAL_ETH_Init+0xf4>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_ETH_Init+0xf4>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_ETH_Init+0xf8>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_ETH_Init+0xf8>)
 80013f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_ETH_Init+0xf8>)
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <HAL_ETH_Init+0xf8>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_ETH_Init+0xf8>)
 800140a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001424:	f7ff fe7e 	bl	8001124 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800142a:	e011      	b.n	8001450 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800142c:	f7ff fe7a 	bl	8001124 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800143a:	d909      	bls.n	8001450 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	22e0      	movs	r2, #224	; 0xe0
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e021      	b.n	8001494 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e4      	bne.n	800142c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fee4 	bl	8002230 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 ff8b 	bl	8002384 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 ffe1 	bl	8002436 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	461a      	mov	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 ff49 	bl	8002314 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2210      	movs	r2, #16
 800148e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800

080014a4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d150      	bne.n	8001558 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2223      	movs	r2, #35	; 0x23
 80014ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2204      	movs	r2, #4
 80014c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f9fd 	bl	80018c4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0208 	orr.w	r2, r2, #8
 80014d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fe2a 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0204 	orr.w	r2, r2, #4
 80014fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fe17 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fd2a 	bl	8001f70 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800152e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001532:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2223      	movs	r2, #35	; 0x23
 8001550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e000      	b.n	800155a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001570:	2b23      	cmp	r3, #35	; 0x23
 8001572:	d14a      	bne.n	800160a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2223      	movs	r2, #35	; 0x23
 8001578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800158e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001592:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f023 0302 	bic.w	r3, r3, #2
 80015a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015aa:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fdb9 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fccc 	bl	8001f70 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0208 	bic.w	r2, r2, #8
 80015e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fda3 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2210      	movs	r2, #16
 8001602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07c      	b.n	8001734 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001640:	2b23      	cmp	r3, #35	; 0x23
 8001642:	d176      	bne.n	8001732 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001644:	2200      	movs	r2, #0
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 ff61 	bl	8002510 <ETH_Prepare_Tx_Descriptors>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	f043 0202 	orr.w	r2, r3, #2
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e065      	b.n	8001734 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001668:	f3bf 8f4f 	dsb	sy
}
 800166c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3206      	adds	r2, #6
 8001676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	2b03      	cmp	r3, #3
 800168c:	d904      	bls.n	8001698 <HAL_ETH_Transmit+0x84>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	1f1a      	subs	r2, r3, #4
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3106      	adds	r1, #6
 80016a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ac:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80016ae:	f7ff fd39 	bl	8001124 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016b4:	e037      	b.n	8001726 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d011      	beq.n	80016ec <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	f043 0208 	orr.w	r2, r3, #8
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e023      	b.n	8001734 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d018      	beq.n	8001726 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016f4:	f7ff fd16 	bl	8001124 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	d302      	bcc.n	800170a <HAL_ETH_Transmit+0xf6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001710:	f043 0204 	orr.w	r2, r3, #4
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001720:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e006      	b.n	8001734 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dbc3      	blt.n	80016b6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
  }
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d109      	bne.n	8001768 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0a8      	b.n	80018ba <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176e:	2b23      	cmp	r3, #35	; 0x23
 8001770:	d001      	beq.n	8001776 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0a1      	b.n	80018ba <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	3212      	adds	r2, #18
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178c:	f1c3 0304 	rsb	r3, r3, #4
 8001790:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001792:	e06a      	b.n	800186a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <HAL_ETH_ReadData+0x88>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d040      	beq.n	8001846 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017f8:	3b04      	subs	r3, #4
 80017fa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b29b      	uxth	r3, r3
 8001826:	f003 f9a7 	bl	8004b78 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	441a      	add	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d902      	bls.n	8001858 <HAL_ETH_ReadData+0x11c>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b04      	subs	r3, #4
 8001856:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	3212      	adds	r2, #18
 800185e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db06      	blt.n	8001880 <HAL_ETH_ReadData+0x144>
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	429a      	cmp	r2, r3
 8001878:	d202      	bcs.n	8001880 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d089      	beq.n	8001794 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	441a      	add	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f815 	bl	80018c4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	3212      	adds	r2, #18
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018ec:	e040      	b.n	8001970 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d112      	bne.n	800191c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f90c 	bl	8004b18 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	74fb      	strb	r3, [r7, #19]
 800190a:	e007      	b.n	800191c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	461a      	mov	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d026      	beq.n	8001970 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <ETH_UpdateDescriptor+0xe4>)
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	e003      	b.n	800193a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001938:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800193a:	f3bf 8f5f 	dmb	sy
}
 800193e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d902      	bls.n	800195e <ETH_UpdateDescriptor+0x9a>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3b04      	subs	r3, #4
 800195c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	3212      	adds	r2, #18
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	617b      	str	r3, [r7, #20]
      desccount--;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	3b01      	subs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <ETH_UpdateDescriptor+0xb8>
 8001976:	7cfb      	ldrb	r3, [r7, #19]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1b8      	bne.n	80018ee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	429a      	cmp	r2, r3
 8001984:	d00c      	beq.n	80019a0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198e:	461a      	mov	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	80004600 	.word	0x80004600

080019ac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	2b40      	cmp	r3, #64	; 0x40
 80019c4:	d112      	bne.n	80019ec <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	2b40      	cmp	r3, #64	; 0x40
 80019d6:	d109      	bne.n	80019ec <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_ETH_IRQHandler+0x178>)
 80019e4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f8ac 	bl	8001b44 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d113      	bne.n	8001a26 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10a      	bne.n	8001a26 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001a1e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f885 	bl	8001b30 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a38:	d14c      	bne.n	8001ad4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a4c:	d142      	bne.n	8001ad4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a54:	f043 0208 	orr.w	r2, r3, #8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a70:	d11a      	bne.n	8001aa8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_ETH_IRQHandler+0x17c>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a9c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	22e0      	movs	r2, #224	; 0xe0
 8001aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001aa6:	e012      	b.n	8001ace <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f248 6380 	movw	r3, #34432	; 0x8680
 8001acc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f842 	bl	8001b58 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d10e      	bne.n	8001b00 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f83a 	bl	8001b6c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_ETH_IRQHandler+0x180>)
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_ETH_IRQHandler+0x180>)
 8001b0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b12:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f833 	bl	8001b80 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	00010040 	.word	0x00010040
 8001b28:	007e2000 	.word	0x007e2000
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 031c 	and.w	r3, r3, #28
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	02db      	lsls	r3, r3, #11
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f023 0302 	bic.w	r3, r3, #2
 8001bd2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001be4:	f7ff fa9e 	bl	8001124 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bea:	e00d      	b.n	8001c08 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001bec:	f7ff fa9a 	bl	8001124 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d301      	bcc.n	8001c00 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e010      	b.n	8001c22 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ec      	bne.n	8001bec <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 031c 	and.w	r3, r3, #28
 8001c46:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	02db      	lsls	r3, r3, #11
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	019b      	lsls	r3, r3, #6
 8001c58:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c84:	f7ff fa4e 	bl	8001124 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c8a:	e00d      	b.n	8001ca8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c8c:	f7ff fa4a 	bl	8001124 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d301      	bcc.n	8001ca0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ec      	bne.n	8001c8c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0d9      	b.n	8001e84 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00b      	b.n	8001ebc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d105      	bne.n	8001eba <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f883 	bl	8001fbc <ETH_SetMACConfig>

    return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
  }
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 031c 	bic.w	r3, r3, #28
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001edc:	f001 fb94 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8001ee0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d908      	bls.n	8001efc <HAL_ETH_SetMDIOClockRange+0x38>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d804      	bhi.n	8001efc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e027      	b.n	8001f4c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d908      	bls.n	8001f16 <HAL_ETH_SetMDIOClockRange+0x52>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d204      	bcs.n	8001f16 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f043 030c 	orr.w	r3, r3, #12
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e01a      	b.n	8001f4c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d303      	bcc.n	8001f26 <HAL_ETH_SetMDIOClockRange+0x62>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d911      	bls.n	8001f4a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d908      	bls.n	8001f40 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d804      	bhi.n	8001f40 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e005      	b.n	8001f4c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e000      	b.n	8001f4c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f4a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	611a      	str	r2, [r3, #16]
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	01312cff 	.word	0x01312cff
 8001f60:	02160ebf 	.word	0x02160ebf
 8001f64:	03938700 	.word	0x03938700
 8001f68:	05f5e0ff 	.word	0x05f5e0ff
 8001f6c:	08f0d17f 	.word	0x08f0d17f

08001f70 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f92:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff f8cb 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb0:	6193      	str	r3, [r2, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4b51      	ldr	r3, [pc, #324]	; (8002118 <ETH_SetMACConfig+0x15c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	7c1b      	ldrb	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <ETH_SetMACConfig+0x28>
 8001fde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fe2:	e000      	b.n	8001fe6 <ETH_SetMACConfig+0x2a>
 8001fe4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	7c5b      	ldrb	r3, [r3, #17]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <ETH_SetMACConfig+0x38>
 8001fee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ff2:	e000      	b.n	8001ff6 <ETH_SetMACConfig+0x3a>
 8001ff4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ff6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ffc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	7fdb      	ldrb	r3, [r3, #31]
 8002002:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002004:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800200a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	7f92      	ldrb	r2, [r2, #30]
 8002010:	2a00      	cmp	r2, #0
 8002012:	d102      	bne.n	800201a <ETH_SetMACConfig+0x5e>
 8002014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0x60>
 800201a:	2200      	movs	r2, #0
                        macconf->Speed |
 800201c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002024:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800202a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	f892 2020 	ldrb.w	r2, [r2, #32]
 800203a:	2a00      	cmp	r2, #0
 800203c:	d102      	bne.n	8002044 <ETH_SetMACConfig+0x88>
 800203e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002042:	e000      	b.n	8002046 <ETH_SetMACConfig+0x8a>
 8002044:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002046:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	7bdb      	ldrb	r3, [r3, #15]
 800204c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800204e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002054:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800205c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800205e:	4313      	orrs	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff f860 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002092:	4013      	ands	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d101      	bne.n	80020aa <ETH_SetMACConfig+0xee>
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	e000      	b.n	80020ac <ETH_SetMACConfig+0xf0>
 80020aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020ba:	2a01      	cmp	r2, #1
 80020bc:	d101      	bne.n	80020c2 <ETH_SetMACConfig+0x106>
 80020be:	2208      	movs	r2, #8
 80020c0:	e000      	b.n	80020c4 <ETH_SetMACConfig+0x108>
 80020c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020cc:	2a01      	cmp	r2, #1
 80020ce:	d101      	bne.n	80020d4 <ETH_SetMACConfig+0x118>
 80020d0:	2204      	movs	r2, #4
 80020d2:	e000      	b.n	80020d6 <ETH_SetMACConfig+0x11a>
 80020d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020de:	2a01      	cmp	r2, #1
 80020e0:	d101      	bne.n	80020e6 <ETH_SetMACConfig+0x12a>
 80020e2:	2202      	movs	r2, #2
 80020e4:	e000      	b.n	80020e8 <ETH_SetMACConfig+0x12c>
 80020e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020e8:	4313      	orrs	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002100:	2001      	movs	r0, #1
 8002102:	f7ff f81b 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	ff20810f 	.word	0xff20810f

0800211c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4b3d      	ldr	r3, [pc, #244]	; (800222c <ETH_SetDMAConfig+0x110>)
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	7b1b      	ldrb	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <ETH_SetDMAConfig+0x2c>
 8002142:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002146:	e000      	b.n	800214a <ETH_SetDMAConfig+0x2e>
 8002148:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	7b5b      	ldrb	r3, [r3, #13]
 800214e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002150:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	7f52      	ldrb	r2, [r2, #29]
 8002156:	2a00      	cmp	r2, #0
 8002158:	d102      	bne.n	8002160 <ETH_SetDMAConfig+0x44>
 800215a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800215e:	e000      	b.n	8002162 <ETH_SetDMAConfig+0x46>
 8002160:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002162:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	7b9b      	ldrb	r3, [r3, #14]
 8002168:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800216a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002170:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	7f1b      	ldrb	r3, [r3, #28]
 8002176:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002178:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7f9b      	ldrb	r3, [r3, #30]
 800217e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002180:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002186:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002190:	4313      	orrs	r3, r2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	461a      	mov	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe ffc2 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	461a      	mov	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	791b      	ldrb	r3, [r3, #4]
 80021ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002202:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe ff93 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	f8de3f23 	.word	0xf8de3f23

08002230 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0a6      	sub	sp, #152	; 0x98
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002244:	2300      	movs	r3, #0
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800226c:	2300      	movs	r3, #0
 800226e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002276:	2300      	movs	r3, #0
 8002278:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fe86 	bl	8001fbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022b4:	2301      	movs	r3, #1
 80022b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022dc:	2301      	movs	r3, #1
 80022de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff08 	bl	800211c <ETH_SetDMAConfig>
}
 800230c:	bf00      	nop
 800230e:	3798      	adds	r7, #152	; 0x98
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3305      	adds	r3, #5
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	3204      	adds	r2, #4
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <ETH_MACAddressConfig+0x68>)
 8002336:	4413      	add	r3, r2
 8002338:	461a      	mov	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3303      	adds	r3, #3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	061a      	lsls	r2, r3, #24
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3302      	adds	r3, #2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3301      	adds	r3, #1
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	4313      	orrs	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <ETH_MACAddressConfig+0x6c>)
 8002366:	4413      	add	r3, r2
 8002368:	461a      	mov	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6013      	str	r3, [r2, #0]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40028040 	.word	0x40028040
 8002380:	40028044 	.word	0x40028044

08002384 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e03e      	b.n	8002410 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	3206      	adds	r2, #6
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d80c      	bhi.n	80023f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	e004      	b.n	80023fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d9bd      	bls.n	8002392 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002428:	611a      	str	r2, [r3, #16]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e046      	b.n	80024d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6919      	ldr	r1, [r3, #16]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002480:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002488:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	3212      	adds	r2, #18
 800249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d80c      	bhi.n	80024c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	e004      	b.n	80024cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d9b5      	bls.n	8002444 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002502:	60da      	str	r2, [r3, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002510:	b480      	push	{r7}
 8002512:	b08d      	sub	sp, #52	; 0x34
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3318      	adds	r3, #24
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800254e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002552:	d007      	beq.n	8002564 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	3304      	adds	r3, #4
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	e103      	b.n	8002770 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002580:	f023 031f 	bic.w	r3, r3, #31
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	6852      	ldr	r2, [r2, #4]
 8002588:	431a      	orrs	r2, r3
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80025ee:	f3bf 8f5f 	dmb	sy
}
 80025f2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002600:	e084      	b.n	800270c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e005      	b.n	800262e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	3301      	adds	r3, #1
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b03      	cmp	r3, #3
 8002638:	d902      	bls.n	8002640 <ETH_Prepare_Tx_Descriptors+0x130>
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	3b04      	subs	r3, #4
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800265e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002662:	d007      	beq.n	8002674 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	3304      	adds	r3, #4
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d029      	beq.n	80026c8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
 8002686:	e019      	b.n	80026bc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002688:	f3bf 8f5f 	dmb	sy
}
 800268c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	3301      	adds	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d902      	bls.n	80026ac <ETH_Prepare_Tx_Descriptors+0x19c>
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	3b04      	subs	r3, #4
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	3301      	adds	r3, #1
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80026bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3e1      	bcc.n	8002688 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	e053      	b.n	8002770 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	3301      	adds	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026e6:	f023 031f 	bic.w	r3, r3, #31
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	6852      	ldr	r2, [r2, #4]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3301      	adds	r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80026fa:	f3bf 8f5f 	dmb	sy
}
 80026fe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f af76 	bne.w	8002602 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e005      	b.n	8002736 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	3304      	adds	r3, #4
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002756:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800276a:	b662      	cpsie	i
}
 800276c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3734      	adds	r7, #52	; 0x34
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e177      	b.n	8002a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8166 	bne.w	8002a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80c0 	beq.w	8002a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d037      	beq.n	80029ba <HAL_GPIO_Init+0x23e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_GPIO_Init+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_GPIO_Init+0x23a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x236>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_GPIO_Init+0x338>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x232>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_GPIO_Init+0x33c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a53      	ldr	r2, [pc, #332]	; (8002abc <HAL_GPIO_Init+0x340>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x22a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_GPIO_Init+0x344>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_GPIO_Init+0x348>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_GPIO_Init+0x34c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_GPIO_Init+0x350>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x21a>
 8002992:	2309      	movs	r3, #9
 8002994:	e012      	b.n	80029bc <HAL_GPIO_Init+0x240>
 8002996:	230a      	movs	r3, #10
 8002998:	e010      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299a:	2308      	movs	r3, #8
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae84 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022400 	.word	0x40022400
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af0:	e003      	b.n	8002afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b08:	b08f      	sub	sp, #60	; 0x3c
 8002b0a:	af0a      	add	r7, sp, #40	; 0x28
 8002b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e10f      	b.n	8002d38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd ff2c 	bl	8000990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f8ad 	bl	8003cb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	687e      	ldr	r6, [r7, #4]
 8002b64:	466d      	mov	r5, sp
 8002b66:	f106 0410 	add.w	r4, r6, #16
 8002b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b7a:	1d33      	adds	r3, r6, #4
 8002b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f001 f838 	bl	8003bf4 <USB_CoreInit>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0d0      	b.n	8002d38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f89b 	bl	8003cd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e04a      	b.n	8002c3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	333d      	adds	r3, #61	; 0x3d
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	333c      	adds	r3, #60	; 0x3c
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3344      	adds	r3, #68	; 0x44
 8002be4:	4602      	mov	r2, r0
 8002be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3340      	adds	r3, #64	; 0x40
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3348      	adds	r3, #72	; 0x48
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334c      	adds	r3, #76	; 0x4c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3354      	adds	r3, #84	; 0x54
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3af      	bcc.n	8002ba8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e044      	b.n	8002cd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3b5      	bcc.n	8002c4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	687e      	ldr	r6, [r7, #4]
 8002cea:	466d      	mov	r5, sp
 8002cec:	f106 0410 	add.w	r4, r6, #16
 8002cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d00:	1d33      	adds	r3, r6, #4
 8002d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f001 f833 	bl	8003d70 <USB_DevInit>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e00d      	b.n	8002d38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f9fe 	bl	8004132 <USB_DevDisconnect>

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e267      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d075      	beq.n	8002e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5e:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d00c      	beq.n	8002d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6a:	4b85      	ldr	r3, [pc, #532]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d112      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d76:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d82:	d10b      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	4b7e      	ldr	r3, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05b      	beq.n	8002e48 <HAL_RCC_OscConfig+0x108>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d157      	bne.n	8002e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e242      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d106      	bne.n	8002db4 <HAL_RCC_OscConfig+0x74>
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a75      	ldr	r2, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0xb0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x98>
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6f      	ldr	r2, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b6d      	ldr	r3, [pc, #436]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6c      	ldr	r2, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0xb0>
 8002dd8:	4b69      	ldr	r3, [pc, #420]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a65      	ldr	r2, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe f994 	bl	8001124 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fe f990 	bl	8001124 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e207      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0xc0>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe f980 	bl	8001124 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe f97c 	bl	8001124 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1f3      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0xe8>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6e:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x152>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1c7      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4937      	ldr	r1, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	e03a      	b.n	8002f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_OscConfig+0x244>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe f935 	bl	8001124 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe f931 	bl	8001124 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1a8      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4925      	ldr	r1, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_OscConfig+0x244>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f914 	bl	8001124 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe f910 	bl	8001124 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e187      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d036      	beq.n	8002f98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCC_OscConfig+0x248>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe f8f4 	bl	8001124 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe f8f0 	bl	8001124 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e167      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x240>)
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x200>
 8002f5e:	e01b      	b.n	8002f98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_OscConfig+0x248>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe f8dd 	bl	8001124 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	e00e      	b.n	8002f8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fe f8d9 	bl	8001124 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d907      	bls.n	8002f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e150      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470000 	.word	0x42470000
 8002f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ea      	bne.n	8002f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8097 	beq.w	80030d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b81      	ldr	r3, [pc, #516]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	4b7d      	ldr	r3, [pc, #500]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a7c      	ldr	r2, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b77      	ldr	r3, [pc, #476]	; (80031b4 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe2:	4b74      	ldr	r3, [pc, #464]	; (80031b4 <HAL_RCC_OscConfig+0x474>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a73      	ldr	r2, [pc, #460]	; (80031b4 <HAL_RCC_OscConfig+0x474>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe f899 	bl	8001124 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe f895 	bl	8001124 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e10c      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x474>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x2ea>
 800301c:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	e01c      	b.n	8003064 <HAL_RCC_OscConfig+0x324>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x30c>
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
 800303e:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a5b      	ldr	r2, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x324>
 800304c:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a54      	ldr	r2, [pc, #336]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 800305e:	f023 0304 	bic.w	r3, r3, #4
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe f85a 	bl	8001124 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe f856 	bl	8001124 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0cb      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ee      	beq.n	8003074 <HAL_RCC_OscConfig+0x334>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003098:	f7fe f844 	bl	8001124 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe f840 	bl	8001124 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0b5      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ee      	bne.n	80030a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a1 	beq.w	8003220 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d05c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d141      	bne.n	8003176 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe f814 	bl	8001124 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe f810 	bl	8001124 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e087      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	019b      	lsls	r3, r3, #6
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	3b01      	subs	r3, #1
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	491b      	ldr	r1, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x478>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd ffe9 	bl	8001124 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003156:	f7fd ffe5 	bl	8001124 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e05c      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x416>
 8003174:	e054      	b.n	8003220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_RCC_OscConfig+0x478>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fd ffd2 	bl	8001124 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003184:	f7fd ffce 	bl	8001124 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e045      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x470>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x444>
 80031a2:	e03d      	b.n	8003220 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e038      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x4ec>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d028      	beq.n	800321c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d121      	bne.n	800321c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d11a      	bne.n	800321c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d111      	bne.n	800321c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cc      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d90c      	bls.n	800326c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0b8      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a58      	ldr	r2, [pc, #352]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800328e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a52      	ldr	r2, [pc, #328]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	494d      	ldr	r1, [pc, #308]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d044      	beq.n	8003350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d119      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e067      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 0203 	bic.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4934      	ldr	r1, [pc, #208]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003320:	f7fd ff00 	bl	8001124 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	e00a      	b.n	800333e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fd fefc 	bl	8001124 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 020c 	and.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	429a      	cmp	r2, r3
 800334e:	d1eb      	bne.n	8003328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d20c      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e032      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4916      	ldr	r1, [pc, #88]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f821 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490a      	ldr	r1, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fe60 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	08012ed8 	.word	0x08012ed8
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003400:	b094      	sub	sp, #80	; 0x50
 8003402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	647b      	str	r3, [r7, #68]	; 0x44
 8003408:	2300      	movs	r3, #0
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800340c:	2300      	movs	r3, #0
 800340e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003414:	4b79      	ldr	r3, [pc, #484]	; (80035fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d00d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x40>
 8003420:	2b08      	cmp	r3, #8
 8003422:	f200 80e1 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x34>
 800342a:	2b04      	cmp	r3, #4
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x3a>
 800342e:	e0db      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_GetSysClockFreq+0x204>)
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003434:	e0db      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_GetSysClockFreq+0x208>)
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800343a:	e0d8      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003446:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d063      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003452:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	2200      	movs	r2, #0
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
 800345c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
 8003466:	2300      	movs	r3, #0
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
 800346a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800346e:	4622      	mov	r2, r4
 8003470:	462b      	mov	r3, r5
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	0159      	lsls	r1, r3, #5
 800347c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003480:	0150      	lsls	r0, r2, #5
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4621      	mov	r1, r4
 8003488:	1a51      	subs	r1, r2, r1
 800348a:	6139      	str	r1, [r7, #16]
 800348c:	4629      	mov	r1, r5
 800348e:	eb63 0301 	sbc.w	r3, r3, r1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a0:	4659      	mov	r1, fp
 80034a2:	018b      	lsls	r3, r1, #6
 80034a4:	4651      	mov	r1, sl
 80034a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034aa:	4651      	mov	r1, sl
 80034ac:	018a      	lsls	r2, r1, #6
 80034ae:	4651      	mov	r1, sl
 80034b0:	ebb2 0801 	subs.w	r8, r2, r1
 80034b4:	4659      	mov	r1, fp
 80034b6:	eb63 0901 	sbc.w	r9, r3, r1
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ce:	4690      	mov	r8, r2
 80034d0:	4699      	mov	r9, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	eb18 0303 	adds.w	r3, r8, r3
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	462b      	mov	r3, r5
 80034dc:	eb49 0303 	adc.w	r3, r9, r3
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034ee:	4629      	mov	r1, r5
 80034f0:	024b      	lsls	r3, r1, #9
 80034f2:	4621      	mov	r1, r4
 80034f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034f8:	4621      	mov	r1, r4
 80034fa:	024a      	lsls	r2, r1, #9
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003502:	2200      	movs	r2, #0
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
 8003506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800350c:	f7fc fec0 	bl	8000290 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003518:	e058      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351a:	4b38      	ldr	r3, [pc, #224]	; (80035fc <HAL_RCC_GetSysClockFreq+0x200>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	2200      	movs	r2, #0
 8003522:	4618      	mov	r0, r3
 8003524:	4611      	mov	r1, r2
 8003526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003534:	4642      	mov	r2, r8
 8003536:	464b      	mov	r3, r9
 8003538:	f04f 0000 	mov.w	r0, #0
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	0159      	lsls	r1, r3, #5
 8003542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003546:	0150      	lsls	r0, r2, #5
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4641      	mov	r1, r8
 800354e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003552:	4649      	mov	r1, r9
 8003554:	eb63 0b01 	sbc.w	fp, r3, r1
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800356c:	ebb2 040a 	subs.w	r4, r2, sl
 8003570:	eb63 050b 	sbc.w	r5, r3, fp
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	00eb      	lsls	r3, r5, #3
 800357e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003582:	00e2      	lsls	r2, r4, #3
 8003584:	4614      	mov	r4, r2
 8003586:	461d      	mov	r5, r3
 8003588:	4643      	mov	r3, r8
 800358a:	18e3      	adds	r3, r4, r3
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	464b      	mov	r3, r9
 8003590:	eb45 0303 	adc.w	r3, r5, r3
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a2:	4629      	mov	r1, r5
 80035a4:	028b      	lsls	r3, r1, #10
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035ac:	4621      	mov	r1, r4
 80035ae:	028a      	lsls	r2, r1, #10
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	61fa      	str	r2, [r7, #28]
 80035bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c0:	f7fc fe66 	bl	8000290 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_GetSysClockFreq+0x200>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	3301      	adds	r3, #1
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3750      	adds	r7, #80	; 0x50
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400
 8003604:	007a1200 	.word	0x007a1200

08003608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_RCC_GetHCLKFreq+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000000 	.word	0x20000000

08003620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003624:	f7ff fff0 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	08012ee8 	.word	0x08012ee8

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff ffdc 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0b5b      	lsrs	r3, r3, #13
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	08012ee8 	.word	0x08012ee8

08003670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e03f      	b.n	8003702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd f932 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f829 	bl	800370c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b0c0      	sub	sp, #256	; 0x100
 8003712:	af00      	add	r7, sp, #0
 8003714:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	68d9      	ldr	r1, [r3, #12]
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	ea40 0301 	orr.w	r3, r0, r1
 8003734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	431a      	orrs	r2, r3
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003764:	f021 010c 	bic.w	r1, r1, #12
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003772:	430b      	orrs	r3, r1
 8003774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003786:	6999      	ldr	r1, [r3, #24]
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	ea40 0301 	orr.w	r3, r0, r1
 8003792:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b8f      	ldr	r3, [pc, #572]	; (80039d8 <UART_SetConfig+0x2cc>)
 800379c:	429a      	cmp	r2, r3
 800379e:	d005      	beq.n	80037ac <UART_SetConfig+0xa0>
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b8d      	ldr	r3, [pc, #564]	; (80039dc <UART_SetConfig+0x2d0>)
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d104      	bne.n	80037b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff ff4c 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 80037b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037b4:	e003      	b.n	80037be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037b6:	f7ff ff33 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 80037ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	f040 810c 	bne.w	80039e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037e6:	415b      	adcs	r3, r3
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ee:	4621      	mov	r1, r4
 80037f0:	eb12 0801 	adds.w	r8, r2, r1
 80037f4:	4629      	mov	r1, r5
 80037f6:	eb43 0901 	adc.w	r9, r3, r1
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	4623      	mov	r3, r4
 8003814:	eb18 0303 	adds.w	r3, r8, r3
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800381c:	462b      	mov	r3, r5
 800381e:	eb49 0303 	adc.w	r3, r9, r3
 8003822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003832:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800383a:	460b      	mov	r3, r1
 800383c:	18db      	adds	r3, r3, r3
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
 8003840:	4613      	mov	r3, r2
 8003842:	eb42 0303 	adc.w	r3, r2, r3
 8003846:	657b      	str	r3, [r7, #84]	; 0x54
 8003848:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800384c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003850:	f7fc fd1e 	bl	8000290 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <UART_SetConfig+0x2d4>)
 800385a:	fba3 2302 	umull	r2, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	011c      	lsls	r4, r3, #4
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800386c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003870:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	1891      	adds	r1, r2, r2
 800387a:	64b9      	str	r1, [r7, #72]	; 0x48
 800387c:	415b      	adcs	r3, r3
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003884:	4641      	mov	r1, r8
 8003886:	eb12 0a01 	adds.w	sl, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb43 0b01 	adc.w	fp, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800389c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a4:	4692      	mov	sl, r2
 80038a6:	469b      	mov	fp, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	eb1a 0303 	adds.w	r3, sl, r3
 80038ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b2:	464b      	mov	r3, r9
 80038b4:	eb4b 0303 	adc.w	r3, fp, r3
 80038b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
 80038de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038e6:	f7fc fcd3 	bl	8000290 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2301 	umull	r2, r3, r3, r1
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2264      	movs	r2, #100	; 0x64
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	1acb      	subs	r3, r1, r3
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <UART_SetConfig+0x2d4>)
 8003908:	fba3 2302 	umull	r2, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003914:	441c      	add	r4, r3
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003920:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003924:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	1891      	adds	r1, r2, r2
 800392e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003930:	415b      	adcs	r3, r3
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003938:	4641      	mov	r1, r8
 800393a:	1851      	adds	r1, r2, r1
 800393c:	6339      	str	r1, [r7, #48]	; 0x30
 800393e:	4649      	mov	r1, r9
 8003940:	414b      	adcs	r3, r1
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003950:	4659      	mov	r1, fp
 8003952:	00cb      	lsls	r3, r1, #3
 8003954:	4651      	mov	r1, sl
 8003956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395a:	4651      	mov	r1, sl
 800395c:	00ca      	lsls	r2, r1, #3
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	4603      	mov	r3, r0
 8003964:	4642      	mov	r2, r8
 8003966:	189b      	adds	r3, r3, r2
 8003968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800396c:	464b      	mov	r3, r9
 800396e:	460a      	mov	r2, r1
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003984:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800398c:	460b      	mov	r3, r1
 800398e:	18db      	adds	r3, r3, r3
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 8003992:	4613      	mov	r3, r2
 8003994:	eb42 0303 	adc.w	r3, r2, r3
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800399e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039a2:	f7fc fc75 	bl	8000290 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <UART_SetConfig+0x2d4>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <UART_SetConfig+0x2d4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 0207 	and.w	r2, r3, #7
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4422      	add	r2, r4
 80039d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039d4:	e105      	b.n	8003be2 <UART_SetConfig+0x4d6>
 80039d6:	bf00      	nop
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40011400 	.word	0x40011400
 80039e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039f6:	4642      	mov	r2, r8
 80039f8:	464b      	mov	r3, r9
 80039fa:	1891      	adds	r1, r2, r2
 80039fc:	6239      	str	r1, [r7, #32]
 80039fe:	415b      	adcs	r3, r3
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a06:	4641      	mov	r1, r8
 8003a08:	1854      	adds	r4, r2, r1
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	eb43 0501 	adc.w	r5, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	00eb      	lsls	r3, r5, #3
 8003a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1e:	00e2      	lsls	r2, r4, #3
 8003a20:	4614      	mov	r4, r2
 8003a22:	461d      	mov	r5, r3
 8003a24:	4643      	mov	r3, r8
 8003a26:	18e3      	adds	r3, r4, r3
 8003a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	eb45 0303 	adc.w	r3, r5, r3
 8003a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a52:	4629      	mov	r1, r5
 8003a54:	008b      	lsls	r3, r1, #2
 8003a56:	4621      	mov	r1, r4
 8003a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	008a      	lsls	r2, r1, #2
 8003a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a64:	f7fc fc14 	bl	8000290 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	011c      	lsls	r4, r3, #4
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	61b9      	str	r1, [r7, #24]
 8003a90:	415b      	adcs	r3, r3
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a98:	4641      	mov	r1, r8
 8003a9a:	1851      	adds	r1, r2, r1
 8003a9c:	6139      	str	r1, [r7, #16]
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	414b      	adcs	r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	00cb      	lsls	r3, r1, #3
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aba:	4651      	mov	r1, sl
 8003abc:	00ca      	lsls	r2, r1, #3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003acc:	464b      	mov	r3, r9
 8003ace:	460a      	mov	r2, r1
 8003ad0:	eb42 0303 	adc.w	r3, r2, r3
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ae2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003af0:	4649      	mov	r1, r9
 8003af2:	008b      	lsls	r3, r1, #2
 8003af4:	4641      	mov	r1, r8
 8003af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afa:	4641      	mov	r1, r8
 8003afc:	008a      	lsls	r2, r1, #2
 8003afe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b02:	f7fc fbc5 	bl	8000290 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a34      	ldr	r2, [pc, #208]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2a:	441c      	add	r4, r3
 8003b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b30:	2200      	movs	r2, #0
 8003b32:	673b      	str	r3, [r7, #112]	; 0x70
 8003b34:	677a      	str	r2, [r7, #116]	; 0x74
 8003b36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	415b      	adcs	r3, r3
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	1851      	adds	r1, r2, r1
 8003b4e:	6039      	str	r1, [r7, #0]
 8003b50:	4649      	mov	r1, r9
 8003b52:	414b      	adcs	r3, r1
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b62:	4659      	mov	r1, fp
 8003b64:	00cb      	lsls	r3, r1, #3
 8003b66:	4651      	mov	r1, sl
 8003b68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	00ca      	lsls	r2, r1, #3
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	4603      	mov	r3, r0
 8003b76:	4642      	mov	r2, r8
 8003b78:	189b      	adds	r3, r3, r2
 8003b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	460a      	mov	r2, r1
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b90:	667a      	str	r2, [r7, #100]	; 0x64
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	008b      	lsls	r3, r1, #2
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba8:	4641      	mov	r1, r8
 8003baa:	008a      	lsls	r2, r1, #2
 8003bac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bb0:	f7fc fb6e 	bl	8000290 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003bba:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2164      	movs	r1, #100	; 0x64
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	3332      	adds	r3, #50	; 0x32
 8003bcc:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4422      	add	r2, r4
 8003be0:	609a      	str	r2, [r3, #8]
}
 8003be2:	bf00      	nop
 8003be4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003be8:	46bd      	mov	sp, r7
 8003bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bee:	bf00      	nop
 8003bf0:	51eb851f 	.word	0x51eb851f

08003bf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	f107 001c 	add.w	r0, r7, #28
 8003c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d122      	bne.n	8003c52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 faa2 	bl	8004190 <USB_CoreReset>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e01a      	b.n	8003c88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa96 	bl	8004190 <USB_CoreReset>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
 8003c7a:	e005      	b.n	8003c88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10b      	bne.n	8003ca6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f043 0206 	orr.w	r2, r3, #6
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb2:	b004      	add	sp, #16
 8003cb4:	4770      	bx	lr

08003cb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f023 0201 	bic.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d115      	bne.n	8003d26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7fd fa18 	bl	800113c <HAL_Delay>
      ms++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa2e 	bl	8004174 <USB_GetMode>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d01e      	beq.n	8003d5c <USB_SetCurrentMode+0x84>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b31      	cmp	r3, #49	; 0x31
 8003d22:	d9f0      	bls.n	8003d06 <USB_SetCurrentMode+0x2e>
 8003d24:	e01a      	b.n	8003d5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7fd f9ff 	bl	800113c <HAL_Delay>
      ms++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fa15 	bl	8004174 <USB_GetMode>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <USB_SetCurrentMode+0x84>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b31      	cmp	r3, #49	; 0x31
 8003d54:	d9f0      	bls.n	8003d38 <USB_SetCurrentMode+0x60>
 8003d56:	e001      	b.n	8003d5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e005      	b.n	8003d68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b32      	cmp	r3, #50	; 0x32
 8003d60:	d101      	bne.n	8003d66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d70:	b084      	sub	sp, #16
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e009      	b.n	8003da4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3340      	adds	r3, #64	; 0x40
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	3301      	adds	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b0e      	cmp	r3, #14
 8003da8:	d9f2      	bls.n	8003d90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11c      	bne.n	8003dea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
 8003de8:	e00b      	b.n	8003e02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e14:	4619      	mov	r1, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	680b      	ldr	r3, [r1, #0]
 8003e20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d10c      	bne.n	8003e42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f965 	bl	8004100 <USB_SetDevSpeed>
 8003e36:	e008      	b.n	8003e4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e38:	2101      	movs	r1, #1
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f960 	bl	8004100 <USB_SetDevSpeed>
 8003e40:	e003      	b.n	8003e4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e42:	2103      	movs	r1, #3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f95b 	bl	8004100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e4a:	2110      	movs	r1, #16
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8f3 	bl	8004038 <USB_FlushTxFifo>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f91f 	bl	80040a0 <USB_FlushRxFifo>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e72:	461a      	mov	r2, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2300      	movs	r3, #0
 8003e82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e043      	b.n	8003f1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eac:	d118      	bne.n	8003ee0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e013      	b.n	8003ef2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e008      	b.n	8003ef2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eec:	461a      	mov	r2, r3
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	461a      	mov	r2, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3b7      	bcc.n	8003e96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	e043      	b.n	8003fb4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f42:	d118      	bne.n	8003f76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	461a      	mov	r2, r3
 8003f58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e013      	b.n	8003f88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	e008      	b.n	8003f88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d3b7      	bcc.n	8003f2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f043 0210 	orr.w	r2, r3, #16
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <USB_DevInit+0x2c4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f043 0208 	orr.w	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800400e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d107      	bne.n	8004024 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004030:	b004      	add	sp, #16
 8004032:	4770      	bx	lr
 8004034:	803c3800 	.word	0x803c3800

08004038 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <USB_FlushTxFifo+0x64>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e01b      	b.n	8004090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	daf2      	bge.n	8004046 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	019b      	lsls	r3, r3, #6
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <USB_FlushTxFifo+0x64>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e006      	b.n	8004090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b20      	cmp	r3, #32
 800408c:	d0f0      	beq.n	8004070 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	00030d40 	.word	0x00030d40

080040a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a11      	ldr	r2, [pc, #68]	; (80040fc <USB_FlushRxFifo+0x5c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e018      	b.n	80040f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	daf2      	bge.n	80040ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2210      	movs	r2, #16
 80040ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3301      	adds	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <USB_FlushRxFifo+0x5c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e006      	b.n	80040f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d0f0      	beq.n	80040d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	00030d40 	.word	0x00030d40

08004100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800414c:	f023 0303 	bic.w	r3, r3, #3
 8004150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0301 	and.w	r3, r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <USB_CoreReset+0x64>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e01b      	b.n	80041e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	daf2      	bge.n	800419c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <USB_CoreReset+0x64>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e006      	b.n	80041e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d0f0      	beq.n	80041c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	00030d40 	.word	0x00030d40

080041f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80041fe:	4b8d      	ldr	r3, [pc, #564]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004200:	22c0      	movs	r2, #192	; 0xc0
 8004202:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004204:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004206:	22a8      	movs	r2, #168	; 0xa8
 8004208:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800420a:	4b8a      	ldr	r3, [pc, #552]	; (8004434 <MX_LWIP_Init+0x23c>)
 800420c:	2200      	movs	r2, #0
 800420e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004210:	4b88      	ldr	r3, [pc, #544]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004212:	220a      	movs	r2, #10
 8004214:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004216:	4b88      	ldr	r3, [pc, #544]	; (8004438 <MX_LWIP_Init+0x240>)
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800421c:	4b86      	ldr	r3, [pc, #536]	; (8004438 <MX_LWIP_Init+0x240>)
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004222:	4b85      	ldr	r3, [pc, #532]	; (8004438 <MX_LWIP_Init+0x240>)
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004228:	4b83      	ldr	r3, [pc, #524]	; (8004438 <MX_LWIP_Init+0x240>)
 800422a:	2200      	movs	r2, #0
 800422c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800422e:	4b83      	ldr	r3, [pc, #524]	; (800443c <MX_LWIP_Init+0x244>)
 8004230:	22c0      	movs	r2, #192	; 0xc0
 8004232:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004234:	4b81      	ldr	r3, [pc, #516]	; (800443c <MX_LWIP_Init+0x244>)
 8004236:	22a8      	movs	r2, #168	; 0xa8
 8004238:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800423a:	4b80      	ldr	r3, [pc, #512]	; (800443c <MX_LWIP_Init+0x244>)
 800423c:	2200      	movs	r2, #0
 800423e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004240:	4b7e      	ldr	r3, [pc, #504]	; (800443c <MX_LWIP_Init+0x244>)
 8004242:	2201      	movs	r2, #1
 8004244:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004246:	f000 fd05 	bl	8004c54 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800424a:	4b7a      	ldr	r3, [pc, #488]	; (8004434 <MX_LWIP_Init+0x23c>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	061a      	lsls	r2, r3, #24
 8004250:	4b78      	ldr	r3, [pc, #480]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	4b76      	ldr	r3, [pc, #472]	; (8004434 <MX_LWIP_Init+0x23c>)
 800425a:	789b      	ldrb	r3, [r3, #2]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	4313      	orrs	r3, r2
 8004260:	4a74      	ldr	r2, [pc, #464]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004262:	78d2      	ldrb	r2, [r2, #3]
 8004264:	4313      	orrs	r3, r2
 8004266:	061a      	lsls	r2, r3, #24
 8004268:	4b72      	ldr	r3, [pc, #456]	; (8004434 <MX_LWIP_Init+0x23c>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	0619      	lsls	r1, r3, #24
 800426e:	4b71      	ldr	r3, [pc, #452]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	4319      	orrs	r1, r3
 8004276:	4b6f      	ldr	r3, [pc, #444]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004278:	789b      	ldrb	r3, [r3, #2]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	430b      	orrs	r3, r1
 800427e:	496d      	ldr	r1, [pc, #436]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004280:	78c9      	ldrb	r1, [r1, #3]
 8004282:	430b      	orrs	r3, r1
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800428a:	431a      	orrs	r2, r3
 800428c:	4b69      	ldr	r3, [pc, #420]	; (8004434 <MX_LWIP_Init+0x23c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	0619      	lsls	r1, r3, #24
 8004292:	4b68      	ldr	r3, [pc, #416]	; (8004434 <MX_LWIP_Init+0x23c>)
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	4319      	orrs	r1, r3
 800429a:	4b66      	ldr	r3, [pc, #408]	; (8004434 <MX_LWIP_Init+0x23c>)
 800429c:	789b      	ldrb	r3, [r3, #2]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	430b      	orrs	r3, r1
 80042a2:	4964      	ldr	r1, [pc, #400]	; (8004434 <MX_LWIP_Init+0x23c>)
 80042a4:	78c9      	ldrb	r1, [r1, #3]
 80042a6:	430b      	orrs	r3, r1
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042ae:	431a      	orrs	r2, r3
 80042b0:	4b60      	ldr	r3, [pc, #384]	; (8004434 <MX_LWIP_Init+0x23c>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	0619      	lsls	r1, r3, #24
 80042b6:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <MX_LWIP_Init+0x23c>)
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	4319      	orrs	r1, r3
 80042be:	4b5d      	ldr	r3, [pc, #372]	; (8004434 <MX_LWIP_Init+0x23c>)
 80042c0:	789b      	ldrb	r3, [r3, #2]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	430b      	orrs	r3, r1
 80042c6:	495b      	ldr	r1, [pc, #364]	; (8004434 <MX_LWIP_Init+0x23c>)
 80042c8:	78c9      	ldrb	r1, [r1, #3]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	0e1b      	lsrs	r3, r3, #24
 80042ce:	4313      	orrs	r3, r2
 80042d0:	4a5b      	ldr	r2, [pc, #364]	; (8004440 <MX_LWIP_Init+0x248>)
 80042d2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80042d4:	4b58      	ldr	r3, [pc, #352]	; (8004438 <MX_LWIP_Init+0x240>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	061a      	lsls	r2, r3, #24
 80042da:	4b57      	ldr	r3, [pc, #348]	; (8004438 <MX_LWIP_Init+0x240>)
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <MX_LWIP_Init+0x240>)
 80042e4:	789b      	ldrb	r3, [r3, #2]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	4313      	orrs	r3, r2
 80042ea:	4a53      	ldr	r2, [pc, #332]	; (8004438 <MX_LWIP_Init+0x240>)
 80042ec:	78d2      	ldrb	r2, [r2, #3]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	061a      	lsls	r2, r3, #24
 80042f2:	4b51      	ldr	r3, [pc, #324]	; (8004438 <MX_LWIP_Init+0x240>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	0619      	lsls	r1, r3, #24
 80042f8:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <MX_LWIP_Init+0x240>)
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	4319      	orrs	r1, r3
 8004300:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <MX_LWIP_Init+0x240>)
 8004302:	789b      	ldrb	r3, [r3, #2]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	430b      	orrs	r3, r1
 8004308:	494b      	ldr	r1, [pc, #300]	; (8004438 <MX_LWIP_Init+0x240>)
 800430a:	78c9      	ldrb	r1, [r1, #3]
 800430c:	430b      	orrs	r3, r1
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004314:	431a      	orrs	r2, r3
 8004316:	4b48      	ldr	r3, [pc, #288]	; (8004438 <MX_LWIP_Init+0x240>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	0619      	lsls	r1, r3, #24
 800431c:	4b46      	ldr	r3, [pc, #280]	; (8004438 <MX_LWIP_Init+0x240>)
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	4319      	orrs	r1, r3
 8004324:	4b44      	ldr	r3, [pc, #272]	; (8004438 <MX_LWIP_Init+0x240>)
 8004326:	789b      	ldrb	r3, [r3, #2]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	430b      	orrs	r3, r1
 800432c:	4942      	ldr	r1, [pc, #264]	; (8004438 <MX_LWIP_Init+0x240>)
 800432e:	78c9      	ldrb	r1, [r1, #3]
 8004330:	430b      	orrs	r3, r1
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004338:	431a      	orrs	r2, r3
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <MX_LWIP_Init+0x240>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	0619      	lsls	r1, r3, #24
 8004340:	4b3d      	ldr	r3, [pc, #244]	; (8004438 <MX_LWIP_Init+0x240>)
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	4319      	orrs	r1, r3
 8004348:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <MX_LWIP_Init+0x240>)
 800434a:	789b      	ldrb	r3, [r3, #2]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	430b      	orrs	r3, r1
 8004350:	4939      	ldr	r1, [pc, #228]	; (8004438 <MX_LWIP_Init+0x240>)
 8004352:	78c9      	ldrb	r1, [r1, #3]
 8004354:	430b      	orrs	r3, r1
 8004356:	0e1b      	lsrs	r3, r3, #24
 8004358:	4313      	orrs	r3, r2
 800435a:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <MX_LWIP_Init+0x24c>)
 800435c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800435e:	4b37      	ldr	r3, [pc, #220]	; (800443c <MX_LWIP_Init+0x244>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	061a      	lsls	r2, r3, #24
 8004364:	4b35      	ldr	r3, [pc, #212]	; (800443c <MX_LWIP_Init+0x244>)
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <MX_LWIP_Init+0x244>)
 800436e:	789b      	ldrb	r3, [r3, #2]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	4313      	orrs	r3, r2
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <MX_LWIP_Init+0x244>)
 8004376:	78d2      	ldrb	r2, [r2, #3]
 8004378:	4313      	orrs	r3, r2
 800437a:	061a      	lsls	r2, r3, #24
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <MX_LWIP_Init+0x244>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	0619      	lsls	r1, r3, #24
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <MX_LWIP_Init+0x244>)
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	4319      	orrs	r1, r3
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <MX_LWIP_Init+0x244>)
 800438c:	789b      	ldrb	r3, [r3, #2]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	430b      	orrs	r3, r1
 8004392:	492a      	ldr	r1, [pc, #168]	; (800443c <MX_LWIP_Init+0x244>)
 8004394:	78c9      	ldrb	r1, [r1, #3]
 8004396:	430b      	orrs	r3, r1
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800439e:	431a      	orrs	r2, r3
 80043a0:	4b26      	ldr	r3, [pc, #152]	; (800443c <MX_LWIP_Init+0x244>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	0619      	lsls	r1, r3, #24
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <MX_LWIP_Init+0x244>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	041b      	lsls	r3, r3, #16
 80043ac:	4319      	orrs	r1, r3
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <MX_LWIP_Init+0x244>)
 80043b0:	789b      	ldrb	r3, [r3, #2]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	430b      	orrs	r3, r1
 80043b6:	4921      	ldr	r1, [pc, #132]	; (800443c <MX_LWIP_Init+0x244>)
 80043b8:	78c9      	ldrb	r1, [r1, #3]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043c2:	431a      	orrs	r2, r3
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <MX_LWIP_Init+0x244>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	0619      	lsls	r1, r3, #24
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <MX_LWIP_Init+0x244>)
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	4319      	orrs	r1, r3
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <MX_LWIP_Init+0x244>)
 80043d4:	789b      	ldrb	r3, [r3, #2]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	430b      	orrs	r3, r1
 80043da:	4918      	ldr	r1, [pc, #96]	; (800443c <MX_LWIP_Init+0x244>)
 80043dc:	78c9      	ldrb	r1, [r1, #3]
 80043de:	430b      	orrs	r3, r1
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	4313      	orrs	r3, r2
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <MX_LWIP_Init+0x250>)
 80043e6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <MX_LWIP_Init+0x254>)
 80043ea:	9302      	str	r3, [sp, #8]
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <MX_LWIP_Init+0x258>)
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4b14      	ldr	r3, [pc, #80]	; (8004448 <MX_LWIP_Init+0x250>)
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <MX_LWIP_Init+0x24c>)
 80043f8:	4911      	ldr	r1, [pc, #68]	; (8004440 <MX_LWIP_Init+0x248>)
 80043fa:	4816      	ldr	r0, [pc, #88]	; (8004454 <MX_LWIP_Init+0x25c>)
 80043fc:	f001 f916 	bl	800562c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004400:	4814      	ldr	r0, [pc, #80]	; (8004454 <MX_LWIP_Init+0x25c>)
 8004402:	f001 fac5 	bl	8005990 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <MX_LWIP_Init+0x25c>)
 8004408:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004418:	480e      	ldr	r0, [pc, #56]	; (8004454 <MX_LWIP_Init+0x25c>)
 800441a:	f001 fac9 	bl	80059b0 <netif_set_up>
 800441e:	e002      	b.n	8004426 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004420:	480c      	ldr	r0, [pc, #48]	; (8004454 <MX_LWIP_Init+0x25c>)
 8004422:	f001 fb31 	bl	8005a88 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004426:	490c      	ldr	r1, [pc, #48]	; (8004458 <MX_LWIP_Init+0x260>)
 8004428:	480a      	ldr	r0, [pc, #40]	; (8004454 <MX_LWIP_Init+0x25c>)
 800442a:	f001 fbc3 	bl	8005bb4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000644 	.word	0x20000644
 8004438:	20000648 	.word	0x20000648
 800443c:	2000064c 	.word	0x2000064c
 8004440:	20000638 	.word	0x20000638
 8004444:	2000063c 	.word	0x2000063c
 8004448:	20000640 	.word	0x20000640
 800444c:	0800ee49 	.word	0x0800ee49
 8004450:	08004719 	.word	0x08004719
 8004454:	20000604 	.word	0x20000604
 8004458:	0800445d 	.word	0x0800445d

0800445c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800447c:	4b40      	ldr	r3, [pc, #256]	; (8004580 <low_level_init+0x110>)
 800447e:	4a41      	ldr	r2, [pc, #260]	; (8004584 <low_level_init+0x114>)
 8004480:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004482:	2300      	movs	r3, #0
 8004484:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800448a:	23e1      	movs	r3, #225	; 0xe1
 800448c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x01;
 800448e:	2301      	movs	r3, #1
 8004490:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x02;
 8004492:	2302      	movs	r3, #2
 8004494:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x04;
 8004496:	2304      	movs	r3, #4
 8004498:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800449a:	4a39      	ldr	r2, [pc, #228]	; (8004580 <low_level_init+0x110>)
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80044a2:	4b37      	ldr	r3, [pc, #220]	; (8004580 <low_level_init+0x110>)
 80044a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044a8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <low_level_init+0x110>)
 80044ac:	4a36      	ldr	r2, [pc, #216]	; (8004588 <low_level_init+0x118>)
 80044ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80044b0:	4b33      	ldr	r3, [pc, #204]	; (8004580 <low_level_init+0x110>)
 80044b2:	4a36      	ldr	r2, [pc, #216]	; (800458c <low_level_init+0x11c>)
 80044b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <low_level_init+0x110>)
 80044b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80044bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80044be:	4830      	ldr	r0, [pc, #192]	; (8004580 <low_level_init+0x110>)
 80044c0:	f7fc ff72 	bl	80013a8 <HAL_ETH_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80044c8:	2238      	movs	r2, #56	; 0x38
 80044ca:	2100      	movs	r1, #0
 80044cc:	4830      	ldr	r0, [pc, #192]	; (8004590 <low_level_init+0x120>)
 80044ce:	f00a fded 	bl	800f0ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80044d2:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <low_level_init+0x120>)
 80044d4:	2221      	movs	r2, #33	; 0x21
 80044d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80044d8:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <low_level_init+0x120>)
 80044da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80044de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80044e0:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <low_level_init+0x120>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80044e6:	482b      	ldr	r0, [pc, #172]	; (8004594 <low_level_init+0x124>)
 80044e8:	f000 ff68 	bl	80053bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2206      	movs	r2, #6
 80044f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80044f4:	4b22      	ldr	r3, [pc, #136]	; (8004580 <low_level_init+0x110>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <low_level_init+0x110>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	785a      	ldrb	r2, [r3, #1]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <low_level_init+0x110>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	789a      	ldrb	r2, [r3, #2]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <low_level_init+0x110>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	78da      	ldrb	r2, [r3, #3]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004524:	4b16      	ldr	r3, [pc, #88]	; (8004580 <low_level_init+0x110>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	791a      	ldrb	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004530:	4b13      	ldr	r3, [pc, #76]	; (8004580 <low_level_init+0x110>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	795a      	ldrb	r2, [r3, #5]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004542:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800454a:	f043 030a 	orr.w	r3, r3, #10
 800454e:	b2da      	uxtb	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004556:	4910      	ldr	r1, [pc, #64]	; (8004598 <low_level_init+0x128>)
 8004558:	4810      	ldr	r0, [pc, #64]	; (800459c <low_level_init+0x12c>)
 800455a:	f7fc fc1c 	bl	8000d96 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800455e:	480f      	ldr	r0, [pc, #60]	; (800459c <low_level_init+0x12c>)
 8004560:	f7fc fc4b 	bl	8000dfa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa48 	bl	8004a00 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004570:	e001      	b.n	8004576 <low_level_init+0x106>
    Error_Handler();
 8004572:	f7fc f997 	bl	80008a4 <Error_Handler>
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	2000511c 	.word	0x2000511c
 8004584:	40028000 	.word	0x40028000
 8004588:	2000507c 	.word	0x2000507c
 800458c:	20004fdc 	.word	0x20004fdc
 8004590:	200051cc 	.word	0x200051cc
 8004594:	08012ef0 	.word	0x08012ef0
 8004598:	2000000c 	.word	0x2000000c
 800459c:	20005204 	.word	0x20005204

080045a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b092      	sub	sp, #72	; 0x48
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	2230      	movs	r2, #48	; 0x30
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f00a fd73 	bl	800f0ac <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80045c6:	f107 030c 	add.w	r3, r7, #12
 80045ca:	2230      	movs	r2, #48	; 0x30
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f00a fd6c 	bl	800f0ac <memset>

  for(q = p; q != NULL; q = q->next)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40
 80045d8:	e045      	b.n	8004666 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80045da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d902      	bls.n	80045e6 <low_level_output+0x46>
      return ERR_IF;
 80045e0:	f06f 030b 	mvn.w	r3, #11
 80045e4:	e055      	b.n	8004692 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80045e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	3348      	adds	r3, #72	; 0x48
 80045f6:	443b      	add	r3, r7
 80045f8:	3b3c      	subs	r3, #60	; 0x3c
 80045fa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80045fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fe:	895b      	ldrh	r3, [r3, #10]
 8004600:	4619      	mov	r1, r3
 8004602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004604:	4613      	mov	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	3348      	adds	r3, #72	; 0x48
 800460e:	443b      	add	r3, r7
 8004610:	3b38      	subs	r3, #56	; 0x38
 8004612:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	f107 000c 	add.w	r0, r7, #12
 8004622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004624:	460b      	mov	r3, r1
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	440b      	add	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	18c1      	adds	r1, r0, r3
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	3348      	adds	r3, #72	; 0x48
 8004638:	443b      	add	r3, r7
 800463a:	3b34      	subs	r3, #52	; 0x34
 800463c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	3348      	adds	r3, #72	; 0x48
 8004652:	443b      	add	r3, r7
 8004654:	3b34      	subs	r3, #52	; 0x34
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
    }

    i++;
 800465a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465c:	3301      	adds	r3, #1
 800465e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	643b      	str	r3, [r7, #64]	; 0x40
 8004666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1b6      	bne.n	80045da <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	891b      	ldrh	r3, [r3, #8]
 8004670:	461a      	mov	r2, r3
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <low_level_output+0xfc>)
 8004674:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <low_level_output+0xfc>)
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800467e:	4a07      	ldr	r2, [pc, #28]	; (800469c <low_level_output+0xfc>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004684:	2214      	movs	r2, #20
 8004686:	4905      	ldr	r1, [pc, #20]	; (800469c <low_level_output+0xfc>)
 8004688:	4805      	ldr	r0, [pc, #20]	; (80046a0 <low_level_output+0x100>)
 800468a:	f7fc ffc3 	bl	8001614 <HAL_ETH_Transmit>

  return errval;
 800468e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004692:	4618      	mov	r0, r3
 8004694:	3748      	adds	r7, #72	; 0x48
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	200051cc 	.word	0x200051cc
 80046a0:	2000511c 	.word	0x2000511c

080046a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <low_level_input+0x2c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	4619      	mov	r1, r3
 80046be:	4805      	ldr	r0, [pc, #20]	; (80046d4 <low_level_input+0x30>)
 80046c0:	f7fd f83c 	bl	800173c <HAL_ETH_ReadData>
  }

  return p;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20004fd8 	.word	0x20004fd8
 80046d4:	2000511c 	.word	0x2000511c

080046d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ffdd 	bl	80046a4 <low_level_input>
 80046ea:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	4798      	blx	r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f001 fdd6 	bl	80062b4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1ea      	bne.n	80046e4 <ethernetif_input+0xc>
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <ethernetif_init+0x1c>
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <ethernetif_init+0x48>)
 8004728:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800472c:	490d      	ldr	r1, [pc, #52]	; (8004764 <ethernetif_init+0x4c>)
 800472e:	480e      	ldr	r0, [pc, #56]	; (8004768 <ethernetif_init+0x50>)
 8004730:	f00a fcc4 	bl	800f0bc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2273      	movs	r2, #115	; 0x73
 8004738:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2274      	movs	r2, #116	; 0x74
 8004740:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <ethernetif_init+0x54>)
 8004748:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <ethernetif_init+0x58>)
 800474e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fe8d 	bl	8004470 <low_level_init>

  return ERR_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	080104f8 	.word	0x080104f8
 8004764:	08010514 	.word	0x08010514
 8004768:	08010524 	.word	0x08010524
 800476c:	0800d1e1 	.word	0x0800d1e1
 8004770:	080045a1 	.word	0x080045a1

08004774 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	4807      	ldr	r0, [pc, #28]	; (80047a0 <pbuf_free_custom+0x2c>)
 8004784:	f000 fefc 	bl	8005580 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <pbuf_free_custom+0x30>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <pbuf_free_custom+0x30>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
  }
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	08012ef0 	.word	0x08012ef0
 80047a4:	20004fd8 	.word	0x20004fd8

080047a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047ac:	f7fc fcba 	bl	8001124 <HAL_GetTick>
 80047b0:	4603      	mov	r3, r0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08e      	sub	sp, #56	; 0x38
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5d      	ldr	r2, [pc, #372]	; (800494c <HAL_ETH_MspInit+0x194>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	f040 80b4 	bne.w	8004944 <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <HAL_ETH_MspInit+0x198>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	4a5a      	ldr	r2, [pc, #360]	; (8004950 <HAL_ETH_MspInit+0x198>)
 80047e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ea:	6313      	str	r3, [r2, #48]	; 0x30
 80047ec:	4b58      	ldr	r3, [pc, #352]	; (8004950 <HAL_ETH_MspInit+0x198>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	4b54      	ldr	r3, [pc, #336]	; (8004950 <HAL_ETH_MspInit+0x198>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	4a53      	ldr	r2, [pc, #332]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004802:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004806:	6313      	str	r3, [r2, #48]	; 0x30
 8004808:	4b51      	ldr	r3, [pc, #324]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	4a4c      	ldr	r2, [pc, #304]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800481e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004822:	6313      	str	r3, [r2, #48]	; 0x30
 8004824:	4b4a      	ldr	r3, [pc, #296]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	4b46      	ldr	r3, [pc, #280]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	4a45      	ldr	r2, [pc, #276]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800483a:	f043 0304 	orr.w	r3, r3, #4
 800483e:	6313      	str	r3, [r2, #48]	; 0x30
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	4a3e      	ldr	r2, [pc, #248]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6313      	str	r3, [r2, #48]	; 0x30
 800485c:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	4b38      	ldr	r3, [pc, #224]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4a37      	ldr	r2, [pc, #220]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004872:	f043 0302 	orr.w	r3, r3, #2
 8004876:	6313      	str	r3, [r2, #48]	; 0x30
 8004878:	4b35      	ldr	r3, [pc, #212]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004884:	2300      	movs	r3, #0
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	4a30      	ldr	r2, [pc, #192]	; (8004950 <HAL_ETH_MspInit+0x198>)
 800488e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004892:	6313      	str	r3, [r2, #48]	; 0x30
 8004894:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <HAL_ETH_MspInit+0x198>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80048a0:	2332      	movs	r3, #50	; 0x32
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a4:	2302      	movs	r3, #2
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ac:	2303      	movs	r3, #3
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048b0:	230b      	movs	r3, #11
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048b8:	4619      	mov	r1, r3
 80048ba:	4826      	ldr	r0, [pc, #152]	; (8004954 <HAL_ETH_MspInit+0x19c>)
 80048bc:	f7fd ff5e 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80048c0:	2386      	movs	r3, #134	; 0x86
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c4:	2302      	movs	r3, #2
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048cc:	2303      	movs	r3, #3
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048d0:	230b      	movs	r3, #11
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d8:	4619      	mov	r1, r3
 80048da:	481f      	ldr	r0, [pc, #124]	; (8004958 <HAL_ETH_MspInit+0x1a0>)
 80048dc:	f7fd ff4e 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80048e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e6:	2302      	movs	r3, #2
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ee:	2303      	movs	r3, #3
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048f2:	230b      	movs	r3, #11
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80048f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048fa:	4619      	mov	r1, r3
 80048fc:	4817      	ldr	r0, [pc, #92]	; (800495c <HAL_ETH_MspInit+0x1a4>)
 80048fe:	f7fd ff3d 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004902:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004914:	230b      	movs	r3, #11
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800491c:	4619      	mov	r1, r3
 800491e:	4810      	ldr	r0, [pc, #64]	; (8004960 <HAL_ETH_MspInit+0x1a8>)
 8004920:	f7fd ff2c 	bl	800277c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004924:	2200      	movs	r2, #0
 8004926:	2100      	movs	r1, #0
 8004928:	203d      	movs	r0, #61	; 0x3d
 800492a:	f7fc fd06 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800492e:	203d      	movs	r0, #61	; 0x3d
 8004930:	f7fc fd1f 	bl	8001372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8004934:	2200      	movs	r2, #0
 8004936:	2100      	movs	r1, #0
 8004938:	203e      	movs	r0, #62	; 0x3e
 800493a:	f7fc fcfe 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800493e:	203e      	movs	r0, #62	; 0x3e
 8004940:	f7fc fd17 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004944:	bf00      	nop
 8004946:	3738      	adds	r7, #56	; 0x38
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40028000 	.word	0x40028000
 8004950:	40023800 	.word	0x40023800
 8004954:	40020800 	.word	0x40020800
 8004958:	40020000 	.word	0x40020000
 800495c:	40020400 	.word	0x40020400
 8004960:	40021800 	.word	0x40021800

08004964 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004968:	4802      	ldr	r0, [pc, #8]	; (8004974 <ETH_PHY_IO_Init+0x10>)
 800496a:	f7fd faab 	bl	8001ec4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	2000511c 	.word	0x2000511c

08004978 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return 0;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	4807      	ldr	r0, [pc, #28]	; (80049b8 <ETH_PHY_IO_ReadReg+0x30>)
 800499c:	f7fd f8fa 	bl	8001b94 <HAL_ETH_ReadPHYRegister>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e000      	b.n	80049ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	2000511c 	.word	0x2000511c

080049bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	4807      	ldr	r0, [pc, #28]	; (80049ec <ETH_PHY_IO_WriteReg+0x30>)
 80049d0:	f7fd f92b 	bl	8001c2a <HAL_ETH_WritePHYRegister>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80049da:	f04f 33ff 	mov.w	r3, #4294967295
 80049de:	e000      	b.n	80049e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	2000511c 	.word	0x2000511c

080049f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049f4:	f7fc fb96 	bl	8001124 <HAL_GetTick>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b0a0      	sub	sp, #128	; 0x80
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	2264      	movs	r2, #100	; 0x64
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f00a fb4b 	bl	800f0ac <memset>
  int32_t PHYLinkState = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a1e:	2300      	movs	r3, #0
 8004a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a22:	2300      	movs	r3, #0
 8004a24:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a26:	483a      	ldr	r0, [pc, #232]	; (8004b10 <ethernet_link_check_state+0x110>)
 8004a28:	f7fc fa8f 	bl	8000f4a <LAN8742_GetLinkState>
 8004a2c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <ethernet_link_check_state+0x5a>
 8004a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	dc09      	bgt.n	8004a5a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004a46:	4833      	ldr	r0, [pc, #204]	; (8004b14 <ethernet_link_check_state+0x114>)
 8004a48:	f7fc fd8b 	bl	8001562 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 f81b 	bl	8005a88 <netif_set_down>
    netif_set_link_down(netif);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 f87e 	bl	8005b54 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004a58:	e055      	b.n	8004b06 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d14e      	bne.n	8004b06 <ethernet_link_check_state+0x106>
 8004a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	dd4b      	ble.n	8004b06 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a70:	3b02      	subs	r3, #2
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d82a      	bhi.n	8004acc <ethernet_link_check_state+0xcc>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <ethernet_link_check_state+0x7c>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a8d 	.word	0x08004a8d
 8004a80:	08004a9f 	.word	0x08004a9f
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
      duplex = ETH_FULLDUPLEX_MODE;
 8004a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a90:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a96:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a9c:	e017      	b.n	8004ace <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aa6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004aac:	e00f      	b.n	8004ace <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004abc:	e007      	b.n	8004ace <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004aca:	e000      	b.n	8004ace <ethernet_link_check_state+0xce>
      break;
 8004acc:	bf00      	nop
    if(linkchanged)
 8004ace:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d018      	beq.n	8004b06 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4619      	mov	r1, r3
 8004ada:	480e      	ldr	r0, [pc, #56]	; (8004b14 <ethernet_link_check_state+0x114>)
 8004adc:	f7fd f8ee 	bl	8001cbc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004ae8:	f107 030c 	add.w	r3, r7, #12
 8004aec:	4619      	mov	r1, r3
 8004aee:	4809      	ldr	r0, [pc, #36]	; (8004b14 <ethernet_link_check_state+0x114>)
 8004af0:	f7fd f9ce 	bl	8001e90 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004af4:	4807      	ldr	r0, [pc, #28]	; (8004b14 <ethernet_link_check_state+0x114>)
 8004af6:	f7fc fcd5 	bl	80014a4 <HAL_ETH_Start>
      netif_set_up(netif);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 ff58 	bl	80059b0 <netif_set_up>
      netif_set_link_up(netif);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fff3 	bl	8005aec <netif_set_link_up>
}
 8004b06:	bf00      	nop
 8004b08:	3780      	adds	r7, #128	; 0x80
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20005204 	.word	0x20005204
 8004b14:	2000511c 	.word	0x2000511c

08004b18 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004b20:	4812      	ldr	r0, [pc, #72]	; (8004b6c <HAL_ETH_RxAllocateCallback+0x54>)
 8004b22:	f000 fcbf 	bl	80054a4 <memp_malloc_pool>
 8004b26:	60f8      	str	r0, [r7, #12]
  if (p)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d014      	beq.n	8004b58 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f103 0220 	add.w	r2, r3, #32
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <HAL_ETH_RxAllocateCallback+0x58>)
 8004b3c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004b46:	9201      	str	r2, [sp, #4]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2241      	movs	r2, #65	; 0x41
 8004b4e:	2100      	movs	r1, #0
 8004b50:	2000      	movs	r0, #0
 8004b52:	f001 f9f5 	bl	8005f40 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004b56:	e005      	b.n	8004b64 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08012ef0 	.word	0x08012ef0
 8004b70:	08004775 	.word	0x08004775
 8004b74:	20004fd8 	.word	0x20004fd8

08004b78 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3b20      	subs	r3, #32
 8004b96:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e003      	b.n	8004bc2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e009      	b.n	8004be4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	891a      	ldrh	r2, [r3, #8]
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f2      	bne.n	8004bd0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	3724      	adds	r7, #36	; 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	b21a      	sxth	r2, r3
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	b21b      	sxth	r3, r3
 8004c10:	4313      	orrs	r3, r2
 8004c12:	b21b      	sxth	r3, r3
 8004c14:	b29b      	uxth	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	061a      	lsls	r2, r3, #24
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0e1b      	lsrs	r3, r3, #24
 8004c46:	4313      	orrs	r3, r2
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004c5e:	f000 f8d5 	bl	8004e0c <mem_init>
  memp_init();
 8004c62:	f000 fbdb 	bl	800541c <memp_init>
  pbuf_init();
  netif_init();
 8004c66:	f000 fcd9 	bl	800561c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004c6a:	f007 f8f9 	bl	800be60 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004c6e:	f001 fe51 	bl	8006914 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004c72:	f007 f86b 	bl	800bd4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <ptr_to_mem+0x20>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	4413      	add	r3, r2
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20007a50 	.word	0x20007a50

08004ca4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <mem_to_ptr+0x20>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	b29b      	uxth	r3, r3
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20007a50 	.word	0x20007a50

08004cc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <plug_holes+0x120>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d206      	bcs.n	8004ce8 <plug_holes+0x20>
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <plug_holes+0x124>)
 8004cdc:	f240 12df 	movw	r2, #479	; 0x1df
 8004ce0:	4943      	ldr	r1, [pc, #268]	; (8004df0 <plug_holes+0x128>)
 8004ce2:	4844      	ldr	r0, [pc, #272]	; (8004df4 <plug_holes+0x12c>)
 8004ce4:	f00a f9ea 	bl	800f0bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <plug_holes+0x130>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d306      	bcc.n	8004d00 <plug_holes+0x38>
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <plug_holes+0x124>)
 8004cf4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004cf8:	4940      	ldr	r1, [pc, #256]	; (8004dfc <plug_holes+0x134>)
 8004cfa:	483e      	ldr	r0, [pc, #248]	; (8004df4 <plug_holes+0x12c>)
 8004cfc:	f00a f9de 	bl	800f0bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	791b      	ldrb	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <plug_holes+0x4e>
 8004d08:	4b38      	ldr	r3, [pc, #224]	; (8004dec <plug_holes+0x124>)
 8004d0a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004d0e:	493c      	ldr	r1, [pc, #240]	; (8004e00 <plug_holes+0x138>)
 8004d10:	4838      	ldr	r0, [pc, #224]	; (8004df4 <plug_holes+0x12c>)
 8004d12:	f00a f9d3 	bl	800f0bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d1e:	d906      	bls.n	8004d2e <plug_holes+0x66>
 8004d20:	4b32      	ldr	r3, [pc, #200]	; (8004dec <plug_holes+0x124>)
 8004d22:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004d26:	4937      	ldr	r1, [pc, #220]	; (8004e04 <plug_holes+0x13c>)
 8004d28:	4832      	ldr	r0, [pc, #200]	; (8004df4 <plug_holes+0x12c>)
 8004d2a:	f00a f9c7 	bl	800f0bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff ffa4 	bl	8004c80 <ptr_to_mem>
 8004d38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d024      	beq.n	8004d8c <plug_holes+0xc4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	791b      	ldrb	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d120      	bne.n	8004d8c <plug_holes+0xc4>
 8004d4a:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <plug_holes+0x130>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d01b      	beq.n	8004d8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004d54:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <plug_holes+0x140>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d102      	bne.n	8004d64 <plug_holes+0x9c>
      lfree = mem;
 8004d5e:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <plug_holes+0x140>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	881a      	ldrh	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d74:	d00a      	beq.n	8004d8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff80 	bl	8004c80 <ptr_to_mem>
 8004d80:	4604      	mov	r4, r0
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff8e 	bl	8004ca4 <mem_to_ptr>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	885b      	ldrh	r3, [r3, #2]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff75 	bl	8004c80 <ptr_to_mem>
 8004d96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d01f      	beq.n	8004de0 <plug_holes+0x118>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	791b      	ldrb	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11b      	bne.n	8004de0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004da8:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <plug_holes+0x140>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d102      	bne.n	8004db8 <plug_holes+0xf0>
      lfree = pmem;
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <plug_holes+0x140>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004dc8:	d00a      	beq.n	8004de0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff ff56 	bl	8004c80 <ptr_to_mem>
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	68b8      	ldr	r0, [r7, #8]
 8004dd8:	f7ff ff64 	bl	8004ca4 <mem_to_ptr>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	20007a50 	.word	0x20007a50
 8004dec:	0801054c 	.word	0x0801054c
 8004df0:	0801057c 	.word	0x0801057c
 8004df4:	08010594 	.word	0x08010594
 8004df8:	20007a54 	.word	0x20007a54
 8004dfc:	080105bc 	.word	0x080105bc
 8004e00:	080105d8 	.word	0x080105d8
 8004e04:	080105f4 	.word	0x080105f4
 8004e08:	20007a58 	.word	0x20007a58

08004e0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004e12:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <mem_init+0x68>)
 8004e14:	3303      	adds	r3, #3
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <mem_init+0x6c>)
 8004e1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <mem_init+0x6c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004e2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004e3a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004e3e:	f7ff ff1f 	bl	8004c80 <ptr_to_mem>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <mem_init+0x70>)
 8004e46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <mem_init+0x70>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <mem_init+0x70>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004e58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004e5a:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <mem_init+0x70>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004e62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <mem_init+0x6c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <mem_init+0x74>)
 8004e6a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	2000523c 	.word	0x2000523c
 8004e78:	20007a50 	.word	0x20007a50
 8004e7c:	20007a54 	.word	0x20007a54
 8004e80:	20007a58 	.word	0x20007a58

08004e84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff09 	bl	8004ca4 <mem_to_ptr>
 8004e92:	4603      	mov	r3, r0
 8004e94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fef0 	bl	8004c80 <ptr_to_mem>
 8004ea0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	885b      	ldrh	r3, [r3, #2]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff feea 	bl	8004c80 <ptr_to_mem>
 8004eac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004eb6:	d818      	bhi.n	8004eea <mem_link_valid+0x66>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	885b      	ldrh	r3, [r3, #2]
 8004ebc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004ec0:	d813      	bhi.n	8004eea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004ec6:	8afa      	ldrh	r2, [r7, #22]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d004      	beq.n	8004ed6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	8afa      	ldrh	r2, [r7, #22]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d109      	bne.n	8004eea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <mem_link_valid+0x74>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d006      	beq.n	8004eee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	885b      	ldrh	r3, [r3, #2]
 8004ee4:	8afa      	ldrh	r2, [r7, #22]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d001      	beq.n	8004eee <mem_link_valid+0x6a>
    return 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <mem_link_valid+0x6c>
  }
  return 1;
 8004eee:	2301      	movs	r3, #1
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20007a54 	.word	0x20007a54

08004efc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d04c      	beq.n	8004fa4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <mem_free+0xb0>)
 8004f16:	f240 2273 	movw	r2, #627	; 0x273
 8004f1a:	4925      	ldr	r1, [pc, #148]	; (8004fb0 <mem_free+0xb4>)
 8004f1c:	4825      	ldr	r0, [pc, #148]	; (8004fb4 <mem_free+0xb8>)
 8004f1e:	f00a f8cd 	bl	800f0bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f22:	e040      	b.n	8004fa6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b08      	subs	r3, #8
 8004f28:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <mem_free+0xbc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d306      	bcc.n	8004f42 <mem_free+0x46>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 020c 	add.w	r2, r3, #12
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <mem_free+0xc0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d907      	bls.n	8004f52 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <mem_free+0xb0>)
 8004f44:	f240 227f 	movw	r2, #639	; 0x27f
 8004f48:	491d      	ldr	r1, [pc, #116]	; (8004fc0 <mem_free+0xc4>)
 8004f4a:	481a      	ldr	r0, [pc, #104]	; (8004fb4 <mem_free+0xb8>)
 8004f4c:	f00a f8b6 	bl	800f0bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f50:	e029      	b.n	8004fa6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004f5a:	4b14      	ldr	r3, [pc, #80]	; (8004fac <mem_free+0xb0>)
 8004f5c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004f60:	4918      	ldr	r1, [pc, #96]	; (8004fc4 <mem_free+0xc8>)
 8004f62:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <mem_free+0xb8>)
 8004f64:	f00a f8aa 	bl	800f0bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f68:	e01d      	b.n	8004fa6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff ff8a 	bl	8004e84 <mem_link_valid>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d107      	bne.n	8004f86 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <mem_free+0xb0>)
 8004f78:	f240 2295 	movw	r2, #661	; 0x295
 8004f7c:	4912      	ldr	r1, [pc, #72]	; (8004fc8 <mem_free+0xcc>)
 8004f7e:	480d      	ldr	r0, [pc, #52]	; (8004fb4 <mem_free+0xb8>)
 8004f80:	f00a f89c 	bl	800f0bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f84:	e00f      	b.n	8004fa6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <mem_free+0xd0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d202      	bcs.n	8004f9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004f96:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <mem_free+0xd0>)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff fe93 	bl	8004cc8 <plug_holes>
 8004fa2:	e000      	b.n	8004fa6 <mem_free+0xaa>
    return;
 8004fa4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	0801054c 	.word	0x0801054c
 8004fb0:	08010620 	.word	0x08010620
 8004fb4:	08010594 	.word	0x08010594
 8004fb8:	20007a50 	.word	0x20007a50
 8004fbc:	20007a54 	.word	0x20007a54
 8004fc0:	08010644 	.word	0x08010644
 8004fc4:	08010660 	.word	0x08010660
 8004fc8:	08010688 	.word	0x08010688
 8004fcc:	20007a58 	.word	0x20007a58

08004fd0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	3303      	adds	r3, #3
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004fe8:	8bfb      	ldrh	r3, [r7, #30]
 8004fea:	2b0b      	cmp	r3, #11
 8004fec:	d801      	bhi.n	8004ff2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004fee:	230c      	movs	r3, #12
 8004ff0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004ff2:	8bfb      	ldrh	r3, [r7, #30]
 8004ff4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004ff8:	d803      	bhi.n	8005002 <mem_trim+0x32>
 8004ffa:	8bfa      	ldrh	r2, [r7, #30]
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d201      	bcs.n	8005006 <mem_trim+0x36>
    return NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	e0cc      	b.n	80051a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005006:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <mem_trim+0x1d8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d304      	bcc.n	800501a <mem_trim+0x4a>
 8005010:	4b66      	ldr	r3, [pc, #408]	; (80051ac <mem_trim+0x1dc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d306      	bcc.n	8005028 <mem_trim+0x58>
 800501a:	4b65      	ldr	r3, [pc, #404]	; (80051b0 <mem_trim+0x1e0>)
 800501c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005020:	4964      	ldr	r1, [pc, #400]	; (80051b4 <mem_trim+0x1e4>)
 8005022:	4865      	ldr	r0, [pc, #404]	; (80051b8 <mem_trim+0x1e8>)
 8005024:	f00a f84a 	bl	800f0bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005028:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <mem_trim+0x1d8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d304      	bcc.n	800503c <mem_trim+0x6c>
 8005032:	4b5e      	ldr	r3, [pc, #376]	; (80051ac <mem_trim+0x1dc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d301      	bcc.n	8005040 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	e0af      	b.n	80051a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b08      	subs	r3, #8
 8005044:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005046:	69b8      	ldr	r0, [r7, #24]
 8005048:	f7ff fe2c 	bl	8004ca4 <mem_to_ptr>
 800504c:	4603      	mov	r3, r0
 800504e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	8afb      	ldrh	r3, [r7, #22]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b08      	subs	r3, #8
 800505c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800505e:	8bfa      	ldrh	r2, [r7, #30]
 8005060:	8abb      	ldrh	r3, [r7, #20]
 8005062:	429a      	cmp	r2, r3
 8005064:	d906      	bls.n	8005074 <mem_trim+0xa4>
 8005066:	4b52      	ldr	r3, [pc, #328]	; (80051b0 <mem_trim+0x1e0>)
 8005068:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800506c:	4953      	ldr	r1, [pc, #332]	; (80051bc <mem_trim+0x1ec>)
 800506e:	4852      	ldr	r0, [pc, #328]	; (80051b8 <mem_trim+0x1e8>)
 8005070:	f00a f824 	bl	800f0bc <iprintf>
  if (newsize > size) {
 8005074:	8bfa      	ldrh	r2, [r7, #30]
 8005076:	8abb      	ldrh	r3, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	d901      	bls.n	8005080 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	e08f      	b.n	80051a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005080:	8bfa      	ldrh	r2, [r7, #30]
 8005082:	8abb      	ldrh	r3, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d101      	bne.n	800508c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	e089      	b.n	80051a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fdf5 	bl	8004c80 <ptr_to_mem>
 8005096:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	791b      	ldrb	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d13f      	bne.n	8005120 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050a8:	d106      	bne.n	80050b8 <mem_trim+0xe8>
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <mem_trim+0x1e0>)
 80050ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 80050b0:	4943      	ldr	r1, [pc, #268]	; (80051c0 <mem_trim+0x1f0>)
 80050b2:	4841      	ldr	r0, [pc, #260]	; (80051b8 <mem_trim+0x1e8>)
 80050b4:	f00a f802 	bl	800f0bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80050be:	8afa      	ldrh	r2, [r7, #22]
 80050c0:	8bfb      	ldrh	r3, [r7, #30]
 80050c2:	4413      	add	r3, r2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3308      	adds	r3, #8
 80050c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <mem_trim+0x1f4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d106      	bne.n	80050e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80050d4:	89fb      	ldrh	r3, [r7, #14]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fdd2 	bl	8004c80 <ptr_to_mem>
 80050dc:	4603      	mov	r3, r0
 80050de:	4a39      	ldr	r2, [pc, #228]	; (80051c4 <mem_trim+0x1f4>)
 80050e0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80050e2:	89fb      	ldrh	r3, [r7, #14]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fdcb 	bl	8004c80 <ptr_to_mem>
 80050ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2200      	movs	r2, #0
 80050f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	89ba      	ldrh	r2, [r7, #12]
 80050f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	8afa      	ldrh	r2, [r7, #22]
 80050fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	89fa      	ldrh	r2, [r7, #14]
 8005102:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800510c:	d047      	beq.n	800519e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fdb4 	bl	8004c80 <ptr_to_mem>
 8005118:	4602      	mov	r2, r0
 800511a:	89fb      	ldrh	r3, [r7, #14]
 800511c:	8053      	strh	r3, [r2, #2]
 800511e:	e03e      	b.n	800519e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005120:	8bfb      	ldrh	r3, [r7, #30]
 8005122:	f103 0214 	add.w	r2, r3, #20
 8005126:	8abb      	ldrh	r3, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d838      	bhi.n	800519e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800512c:	8afa      	ldrh	r2, [r7, #22]
 800512e:	8bfb      	ldrh	r3, [r7, #30]
 8005130:	4413      	add	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	3308      	adds	r3, #8
 8005136:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005140:	d106      	bne.n	8005150 <mem_trim+0x180>
 8005142:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <mem_trim+0x1e0>)
 8005144:	f240 3216 	movw	r2, #790	; 0x316
 8005148:	491d      	ldr	r1, [pc, #116]	; (80051c0 <mem_trim+0x1f0>)
 800514a:	481b      	ldr	r0, [pc, #108]	; (80051b8 <mem_trim+0x1e8>)
 800514c:	f009 ffb6 	bl	800f0bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fd94 	bl	8004c80 <ptr_to_mem>
 8005158:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800515a:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <mem_trim+0x1f4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d202      	bcs.n	800516a <mem_trim+0x19a>
      lfree = mem2;
 8005164:	4a17      	ldr	r2, [pc, #92]	; (80051c4 <mem_trim+0x1f4>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2200      	movs	r2, #0
 800516e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	881a      	ldrh	r2, [r3, #0]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	8afa      	ldrh	r2, [r7, #22]
 800517c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	89fa      	ldrh	r2, [r7, #14]
 8005182:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800518c:	d007      	beq.n	800519e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fd74 	bl	8004c80 <ptr_to_mem>
 8005198:	4602      	mov	r2, r0
 800519a:	89fb      	ldrh	r3, [r7, #14]
 800519c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800519e:	687b      	ldr	r3, [r7, #4]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20007a50 	.word	0x20007a50
 80051ac:	20007a54 	.word	0x20007a54
 80051b0:	0801054c 	.word	0x0801054c
 80051b4:	080106bc 	.word	0x080106bc
 80051b8:	08010594 	.word	0x08010594
 80051bc:	080106d4 	.word	0x080106d4
 80051c0:	080106f4 	.word	0x080106f4
 80051c4:	20007a58 	.word	0x20007a58

080051c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <mem_malloc+0x14>
    return NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	e0d9      	b.n	8005390 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	3303      	adds	r3, #3
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80051e8:	8bbb      	ldrh	r3, [r7, #28]
 80051ea:	2b0b      	cmp	r3, #11
 80051ec:	d801      	bhi.n	80051f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80051ee:	230c      	movs	r3, #12
 80051f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80051f2:	8bbb      	ldrh	r3, [r7, #28]
 80051f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80051f8:	d803      	bhi.n	8005202 <mem_malloc+0x3a>
 80051fa:	8bba      	ldrh	r2, [r7, #28]
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d201      	bcs.n	8005206 <mem_malloc+0x3e>
    return NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	e0c4      	b.n	8005390 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005206:	4b64      	ldr	r3, [pc, #400]	; (8005398 <mem_malloc+0x1d0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fd4a 	bl	8004ca4 <mem_to_ptr>
 8005210:	4603      	mov	r3, r0
 8005212:	83fb      	strh	r3, [r7, #30]
 8005214:	e0b4      	b.n	8005380 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fd31 	bl	8004c80 <ptr_to_mem>
 800521e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	791b      	ldrb	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f040 80a4 	bne.w	8005372 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	8bfb      	ldrh	r3, [r7, #30]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f1a3 0208 	sub.w	r2, r3, #8
 8005238:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800523a:	429a      	cmp	r2, r3
 800523c:	f0c0 8099 	bcc.w	8005372 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	8bfb      	ldrh	r3, [r7, #30]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f1a3 0208 	sub.w	r2, r3, #8
 800524e:	8bbb      	ldrh	r3, [r7, #28]
 8005250:	3314      	adds	r3, #20
 8005252:	429a      	cmp	r2, r3
 8005254:	d333      	bcc.n	80052be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005256:	8bfa      	ldrh	r2, [r7, #30]
 8005258:	8bbb      	ldrh	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	b29b      	uxth	r3, r3
 800525e:	3308      	adds	r3, #8
 8005260:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005262:	8a7b      	ldrh	r3, [r7, #18]
 8005264:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005268:	d106      	bne.n	8005278 <mem_malloc+0xb0>
 800526a:	4b4c      	ldr	r3, [pc, #304]	; (800539c <mem_malloc+0x1d4>)
 800526c:	f240 3287 	movw	r2, #903	; 0x387
 8005270:	494b      	ldr	r1, [pc, #300]	; (80053a0 <mem_malloc+0x1d8>)
 8005272:	484c      	ldr	r0, [pc, #304]	; (80053a4 <mem_malloc+0x1dc>)
 8005274:	f009 ff22 	bl	800f0bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fd00 	bl	8004c80 <ptr_to_mem>
 8005280:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8bfa      	ldrh	r2, [r7, #30]
 8005294:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	8a7a      	ldrh	r2, [r7, #18]
 800529a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2201      	movs	r2, #1
 80052a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80052aa:	d00b      	beq.n	80052c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fce5 	bl	8004c80 <ptr_to_mem>
 80052b6:	4602      	mov	r2, r0
 80052b8:	8a7b      	ldrh	r3, [r7, #18]
 80052ba:	8053      	strh	r3, [r2, #2]
 80052bc:	e002      	b.n	80052c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2201      	movs	r2, #1
 80052c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <mem_malloc+0x1d0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d127      	bne.n	800531e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80052ce:	4b32      	ldr	r3, [pc, #200]	; (8005398 <mem_malloc+0x1d0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80052d4:	e005      	b.n	80052e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fcd0 	bl	8004c80 <ptr_to_mem>
 80052e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	791b      	ldrb	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <mem_malloc+0x12c>
 80052ea:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <mem_malloc+0x1e0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d1f0      	bne.n	80052d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <mem_malloc+0x1d0>)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80052fa:	4b27      	ldr	r3, [pc, #156]	; (8005398 <mem_malloc+0x1d0>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b2a      	ldr	r3, [pc, #168]	; (80053a8 <mem_malloc+0x1e0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d00b      	beq.n	800531e <mem_malloc+0x156>
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <mem_malloc+0x1d0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <mem_malloc+0x156>
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <mem_malloc+0x1d4>)
 8005312:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005316:	4925      	ldr	r1, [pc, #148]	; (80053ac <mem_malloc+0x1e4>)
 8005318:	4822      	ldr	r0, [pc, #136]	; (80053a4 <mem_malloc+0x1dc>)
 800531a:	f009 fecf 	bl	800f0bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800531e:	8bba      	ldrh	r2, [r7, #28]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	3308      	adds	r3, #8
 8005326:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <mem_malloc+0x1e0>)
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	4293      	cmp	r3, r2
 800532c:	d906      	bls.n	800533c <mem_malloc+0x174>
 800532e:	4b1b      	ldr	r3, [pc, #108]	; (800539c <mem_malloc+0x1d4>)
 8005330:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005334:	491e      	ldr	r1, [pc, #120]	; (80053b0 <mem_malloc+0x1e8>)
 8005336:	481b      	ldr	r0, [pc, #108]	; (80053a4 <mem_malloc+0x1dc>)
 8005338:	f009 fec0 	bl	800f0bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <mem_malloc+0x18c>
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <mem_malloc+0x1d4>)
 8005348:	f240 32bb 	movw	r2, #955	; 0x3bb
 800534c:	4919      	ldr	r1, [pc, #100]	; (80053b4 <mem_malloc+0x1ec>)
 800534e:	4815      	ldr	r0, [pc, #84]	; (80053a4 <mem_malloc+0x1dc>)
 8005350:	f009 feb4 	bl	800f0bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <mem_malloc+0x1a4>
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <mem_malloc+0x1d4>)
 8005360:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005364:	4914      	ldr	r1, [pc, #80]	; (80053b8 <mem_malloc+0x1f0>)
 8005366:	480f      	ldr	r0, [pc, #60]	; (80053a4 <mem_malloc+0x1dc>)
 8005368:	f009 fea8 	bl	800f0bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3308      	adds	r3, #8
 8005370:	e00e      	b.n	8005390 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005372:	8bfb      	ldrh	r3, [r7, #30]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fc83 	bl	8004c80 <ptr_to_mem>
 800537a:	4603      	mov	r3, r0
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005380:	8bfa      	ldrh	r2, [r7, #30]
 8005382:	8bbb      	ldrh	r3, [r7, #28]
 8005384:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005388:	429a      	cmp	r2, r3
 800538a:	f4ff af44 	bcc.w	8005216 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20007a58 	.word	0x20007a58
 800539c:	0801054c 	.word	0x0801054c
 80053a0:	080106f4 	.word	0x080106f4
 80053a4:	08010594 	.word	0x08010594
 80053a8:	20007a54 	.word	0x20007a54
 80053ac:	08010708 	.word	0x08010708
 80053b0:	08010724 	.word	0x08010724
 80053b4:	08010754 	.word	0x08010754
 80053b8:	08010784 	.word	0x08010784

080053bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	3303      	adds	r3, #3
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e011      	b.n	8005402 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4413      	add	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3301      	adds	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	885b      	ldrh	r3, [r3, #2]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4293      	cmp	r3, r2
 800540c:	dbe7      	blt.n	80053de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005422:	2300      	movs	r3, #0
 8005424:	80fb      	strh	r3, [r7, #6]
 8005426:	e009      	b.n	800543c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <memp_init+0x30>)
 800542c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ffc3 	bl	80053bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	3301      	adds	r3, #1
 800543a:	80fb      	strh	r3, [r7, #6]
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d9f2      	bls.n	8005428 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	08012f68 	.word	0x08012f68

08005450 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d012      	beq.n	800548c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <do_memp_malloc_pool+0x38>
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <do_memp_malloc_pool+0x48>)
 800547c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005480:	4906      	ldr	r1, [pc, #24]	; (800549c <do_memp_malloc_pool+0x4c>)
 8005482:	4807      	ldr	r0, [pc, #28]	; (80054a0 <do_memp_malloc_pool+0x50>)
 8005484:	f009 fe1a 	bl	800f0bc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	e000      	b.n	800548e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	080107a8 	.word	0x080107a8
 800549c:	080107d8 	.word	0x080107d8
 80054a0:	080107fc 	.word	0x080107fc

080054a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <memp_malloc_pool+0x1c>
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <memp_malloc_pool+0x38>)
 80054b4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80054b8:	4909      	ldr	r1, [pc, #36]	; (80054e0 <memp_malloc_pool+0x3c>)
 80054ba:	480a      	ldr	r0, [pc, #40]	; (80054e4 <memp_malloc_pool+0x40>)
 80054bc:	f009 fdfe 	bl	800f0bc <iprintf>
  if (desc == NULL) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <memp_malloc_pool+0x26>
    return NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e003      	b.n	80054d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffc0 	bl	8005450 <do_memp_malloc_pool>
 80054d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	080107a8 	.word	0x080107a8
 80054e0:	08010824 	.word	0x08010824
 80054e4:	080107fc 	.word	0x080107fc

080054e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d908      	bls.n	800550a <memp_malloc+0x22>
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <memp_malloc+0x3c>)
 80054fa:	f240 1257 	movw	r2, #343	; 0x157
 80054fe:	490a      	ldr	r1, [pc, #40]	; (8005528 <memp_malloc+0x40>)
 8005500:	480a      	ldr	r0, [pc, #40]	; (800552c <memp_malloc+0x44>)
 8005502:	f009 fddb 	bl	800f0bc <iprintf>
 8005506:	2300      	movs	r3, #0
 8005508:	e008      	b.n	800551c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <memp_malloc+0x48>)
 800550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ff9c 	bl	8005450 <do_memp_malloc_pool>
 8005518:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	080107a8 	.word	0x080107a8
 8005528:	08010838 	.word	0x08010838
 800552c:	080107fc 	.word	0x080107fc
 8005530:	08012f68 	.word	0x08012f68

08005534 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <do_memp_free_pool+0x22>
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <do_memp_free_pool+0x40>)
 800554a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800554e:	490a      	ldr	r1, [pc, #40]	; (8005578 <do_memp_free_pool+0x44>)
 8005550:	480a      	ldr	r0, [pc, #40]	; (800557c <do_memp_free_pool+0x48>)
 8005552:	f009 fdb3 	bl	800f0bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	080107a8 	.word	0x080107a8
 8005578:	08010858 	.word	0x08010858
 800557c:	080107fc 	.word	0x080107fc

08005580 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <memp_free_pool+0x1e>
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <memp_free_pool+0x3c>)
 8005592:	f240 1295 	movw	r2, #405	; 0x195
 8005596:	490a      	ldr	r1, [pc, #40]	; (80055c0 <memp_free_pool+0x40>)
 8005598:	480a      	ldr	r0, [pc, #40]	; (80055c4 <memp_free_pool+0x44>)
 800559a:	f009 fd8f 	bl	800f0bc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <memp_free_pool+0x34>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ffc1 	bl	8005534 <do_memp_free_pool>
 80055b2:	e000      	b.n	80055b6 <memp_free_pool+0x36>
    return;
 80055b4:	bf00      	nop
}
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	080107a8 	.word	0x080107a8
 80055c0:	08010824 	.word	0x08010824
 80055c4:	080107fc 	.word	0x080107fc

080055c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d907      	bls.n	80055ea <memp_free+0x22>
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <memp_free+0x44>)
 80055dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80055e0:	490b      	ldr	r1, [pc, #44]	; (8005610 <memp_free+0x48>)
 80055e2:	480c      	ldr	r0, [pc, #48]	; (8005614 <memp_free+0x4c>)
 80055e4:	f009 fd6a 	bl	800f0bc <iprintf>
 80055e8:	e00c      	b.n	8005604 <memp_free+0x3c>

  if (mem == NULL) {
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <memp_free+0x50>)
 80055f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ff9a 	bl	8005534 <do_memp_free_pool>
 8005600:	e000      	b.n	8005604 <memp_free+0x3c>
    return;
 8005602:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	080107a8 	.word	0x080107a8
 8005610:	08010878 	.word	0x08010878
 8005614:	080107fc 	.word	0x080107fc
 8005618:	08012f68 	.word	0x08012f68

0800561c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d108      	bne.n	8005652 <netif_add+0x26>
 8005640:	4b57      	ldr	r3, [pc, #348]	; (80057a0 <netif_add+0x174>)
 8005642:	f240 1227 	movw	r2, #295	; 0x127
 8005646:	4957      	ldr	r1, [pc, #348]	; (80057a4 <netif_add+0x178>)
 8005648:	4857      	ldr	r0, [pc, #348]	; (80057a8 <netif_add+0x17c>)
 800564a:	f009 fd37 	bl	800f0bc <iprintf>
 800564e:	2300      	movs	r3, #0
 8005650:	e0a2      	b.n	8005798 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <netif_add+0x3e>
 8005658:	4b51      	ldr	r3, [pc, #324]	; (80057a0 <netif_add+0x174>)
 800565a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800565e:	4953      	ldr	r1, [pc, #332]	; (80057ac <netif_add+0x180>)
 8005660:	4851      	ldr	r0, [pc, #324]	; (80057a8 <netif_add+0x17c>)
 8005662:	f009 fd2b 	bl	800f0bc <iprintf>
 8005666:	2300      	movs	r3, #0
 8005668:	e096      	b.n	8005798 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005670:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <netif_add+0x184>)
 8005672:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800567a:	4b4d      	ldr	r3, [pc, #308]	; (80057b0 <netif_add+0x184>)
 800567c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005684:	4b4a      	ldr	r3, [pc, #296]	; (80057b0 <netif_add+0x184>)
 8005686:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a45      	ldr	r2, [pc, #276]	; (80057b4 <netif_add+0x188>)
 800569e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80056ba:	4b3f      	ldr	r3, [pc, #252]	; (80057b8 <netif_add+0x18c>)
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f913 	bl	80058fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	4798      	blx	r3
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <netif_add+0xba>
    return NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e058      	b.n	8005798 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ec:	2bff      	cmp	r3, #255	; 0xff
 80056ee:	d103      	bne.n	80056f8 <netif_add+0xcc>
        netif->num = 0;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <netif_add+0x190>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e02b      	b.n	800575c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	429a      	cmp	r2, r3
 800570a:	d106      	bne.n	800571a <netif_add+0xee>
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <netif_add+0x174>)
 800570e:	f240 128b 	movw	r2, #395	; 0x18b
 8005712:	492b      	ldr	r1, [pc, #172]	; (80057c0 <netif_add+0x194>)
 8005714:	4824      	ldr	r0, [pc, #144]	; (80057a8 <netif_add+0x17c>)
 8005716:	f009 fcd1 	bl	800f0bc <iprintf>
        num_netifs++;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3301      	adds	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2bff      	cmp	r3, #255	; 0xff
 8005724:	dd06      	ble.n	8005734 <netif_add+0x108>
 8005726:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <netif_add+0x174>)
 8005728:	f240 128d 	movw	r2, #397	; 0x18d
 800572c:	4925      	ldr	r1, [pc, #148]	; (80057c4 <netif_add+0x198>)
 800572e:	481e      	ldr	r0, [pc, #120]	; (80057a8 <netif_add+0x17c>)
 8005730:	f009 fcc4 	bl	800f0bc <iprintf>
        if (netif2->num == netif->num) {
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005740:	429a      	cmp	r2, r3
 8005742:	d108      	bne.n	8005756 <netif_add+0x12a>
          netif->num++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800574a:	3301      	adds	r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005754:	e005      	b.n	8005762 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1d0      	bne.n	8005704 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1be      	bne.n	80056e6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800576e:	2bfe      	cmp	r3, #254	; 0xfe
 8005770:	d103      	bne.n	800577a <netif_add+0x14e>
    netif_num = 0;
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <netif_add+0x18c>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e006      	b.n	8005788 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005780:	3301      	adds	r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <netif_add+0x18c>)
 8005786:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <netif_add+0x190>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <netif_add+0x190>)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	08010894 	.word	0x08010894
 80057a4:	08010928 	.word	0x08010928
 80057a8:	080108e4 	.word	0x080108e4
 80057ac:	08010944 	.word	0x08010944
 80057b0:	08012fcc 	.word	0x08012fcc
 80057b4:	08005bd7 	.word	0x08005bd7
 80057b8:	2000a950 	.word	0x2000a950
 80057bc:	2000a948 	.word	0x2000a948
 80057c0:	08010968 	.word	0x08010968
 80057c4:	0801097c 	.word	0x0801097c

080057c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f002 fbe5 	bl	8007fa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f007 f883 	bl	800c8e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <netif_do_set_ipaddr+0x20>
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <netif_do_set_ipaddr+0x88>)
 8005800:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005804:	491c      	ldr	r1, [pc, #112]	; (8005878 <netif_do_set_ipaddr+0x8c>)
 8005806:	481d      	ldr	r0, [pc, #116]	; (800587c <netif_do_set_ipaddr+0x90>)
 8005808:	f009 fc58 	bl	800f0bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <netif_do_set_ipaddr+0x34>
 8005812:	4b18      	ldr	r3, [pc, #96]	; (8005874 <netif_do_set_ipaddr+0x88>)
 8005814:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005818:	4917      	ldr	r1, [pc, #92]	; (8005878 <netif_do_set_ipaddr+0x8c>)
 800581a:	4818      	ldr	r0, [pc, #96]	; (800587c <netif_do_set_ipaddr+0x90>)
 800581c:	f009 fc4e 	bl	800f0bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3304      	adds	r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d01c      	beq.n	8005868 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3304      	adds	r3, #4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff ffbf 	bl	80057c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <netif_do_set_ipaddr+0x6a>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	e000      	b.n	8005858 <netif_do_set_ipaddr+0x6c>
 8005856:	2300      	movs	r3, #0
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800585c:	2101      	movs	r1, #1
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f8d2 	bl	8005a08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	08010894 	.word	0x08010894
 8005878:	080109ac 	.word	0x080109ac
 800587c:	080108e4 	.word	0x080108e4

08005880 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3308      	adds	r3, #8
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d00a      	beq.n	80058b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <netif_do_set_netmask+0x26>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	e000      	b.n	80058a8 <netif_do_set_netmask+0x28>
 80058a6:	2300      	movs	r3, #0
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	330c      	adds	r3, #12
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d00a      	beq.n	80058ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <netif_do_set_gw+0x26>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	e000      	b.n	80058e6 <netif_do_set_gw+0x28>
 80058e4:	2300      	movs	r3, #0
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <netif_set_addr+0x90>)
 800591a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005922:	4b1a      	ldr	r3, [pc, #104]	; (800598c <netif_set_addr+0x90>)
 8005924:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800592c:	4b17      	ldr	r3, [pc, #92]	; (800598c <netif_set_addr+0x90>)
 800592e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <netif_set_addr+0x42>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <netif_set_addr+0x46>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <netif_set_addr+0x48>
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800594c:	f107 0310 	add.w	r3, r7, #16
 8005950:	461a      	mov	r2, r3
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ff49 	bl	80057ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff ff8e 	bl	8005880 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff ffa8 	bl	80058be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005974:	f107 0310 	add.w	r3, r7, #16
 8005978:	461a      	mov	r2, r3
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff ff35 	bl	80057ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005982:	bf00      	nop
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	08012fcc 	.word	0x08012fcc

08005990 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <netif_set_default+0x1c>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	2000a94c 	.word	0x2000a94c

080059b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <netif_set_up+0x1e>
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <netif_set_up+0x4c>)
 80059c0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <netif_set_up+0x50>)
 80059c6:	480f      	ldr	r0, [pc, #60]	; (8005a04 <netif_set_up+0x54>)
 80059c8:	f009 fb78 	bl	800f0bc <iprintf>
 80059cc:	e013      	b.n	80059f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80059ee:	2103      	movs	r1, #3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f809 	bl	8005a08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	08010894 	.word	0x08010894
 8005a00:	08010a1c 	.word	0x08010a1c
 8005a04:	080108e4 	.word	0x080108e4

08005a08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <netif_issue_reports+0x20>
 8005a1a:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <netif_issue_reports+0x74>)
 8005a1c:	f240 326d 	movw	r2, #877	; 0x36d
 8005a20:	4917      	ldr	r1, [pc, #92]	; (8005a80 <netif_issue_reports+0x78>)
 8005a22:	4818      	ldr	r0, [pc, #96]	; (8005a84 <netif_issue_reports+0x7c>)
 8005a24:	f009 fb4a 	bl	800f0bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01e      	beq.n	8005a74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d017      	beq.n	8005a74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f007 fea5 	bl	800d7bc <etharp_request>
 8005a72:	e000      	b.n	8005a76 <netif_issue_reports+0x6e>
    return;
 8005a74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08010894 	.word	0x08010894
 8005a80:	08010a38 	.word	0x08010a38
 8005a84:	080108e4 	.word	0x080108e4

08005a88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <netif_set_down+0x1e>
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <netif_set_down+0x58>)
 8005a98:	f240 329b 	movw	r2, #923	; 0x39b
 8005a9c:	4911      	ldr	r1, [pc, #68]	; (8005ae4 <netif_set_down+0x5c>)
 8005a9e:	4812      	ldr	r0, [pc, #72]	; (8005ae8 <netif_set_down+0x60>)
 8005aa0:	f009 fb0c 	bl	800f0bc <iprintf>
 8005aa4:	e019      	b.n	8005ada <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f007 fa2f 	bl	800cf38 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	08010894 	.word	0x08010894
 8005ae4:	08010a5c 	.word	0x08010a5c
 8005ae8:	080108e4 	.word	0x080108e4

08005aec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <netif_set_link_up+0x1e>
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <netif_set_link_up+0x5c>)
 8005afc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005b00:	4912      	ldr	r1, [pc, #72]	; (8005b4c <netif_set_link_up+0x60>)
 8005b02:	4813      	ldr	r0, [pc, #76]	; (8005b50 <netif_set_link_up+0x64>)
 8005b04:	f009 fada 	bl	800f0bc <iprintf>
 8005b08:	e01b      	b.n	8005b42 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d114      	bne.n	8005b42 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005b2a:	2103      	movs	r1, #3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff6b 	bl	8005a08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <netif_set_link_up+0x56>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08010894 	.word	0x08010894
 8005b4c:	08010a7c 	.word	0x08010a7c
 8005b50:	080108e4 	.word	0x080108e4

08005b54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <netif_set_link_down+0x1e>
 8005b62:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <netif_set_link_down+0x54>)
 8005b64:	f240 4206 	movw	r2, #1030	; 0x406
 8005b68:	4910      	ldr	r1, [pc, #64]	; (8005bac <netif_set_link_down+0x58>)
 8005b6a:	4811      	ldr	r0, [pc, #68]	; (8005bb0 <netif_set_link_down+0x5c>)
 8005b6c:	f009 faa6 	bl	800f0bc <iprintf>
 8005b70:	e017      	b.n	8005ba2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b86:	f023 0304 	bic.w	r3, r3, #4
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <netif_set_link_down+0x4e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	08010894 	.word	0x08010894
 8005bac:	08010aa0 	.word	0x08010aa0
 8005bb0:	080108e4 	.word	0x080108e4

08005bb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	61da      	str	r2, [r3, #28]
  }
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005be2:	f06f 030b 	mvn.w	r3, #11
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <netif_get_by_index+0x48>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e00c      	b.n	8005c26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c12:	3301      	adds	r3, #1
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	79fa      	ldrb	r2, [r7, #7]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d101      	bne.n	8005c20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	e006      	b.n	8005c2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1ef      	bne.n	8005c0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000a948 	.word	0x2000a948

08005c40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <pbuf_free_ooseq+0x38>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <pbuf_free_ooseq+0x3c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	e00a      	b.n	8005c6a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f002 f9df 	bl	8008020 <tcp_free_ooseq>
      return;
 8005c62:	e005      	b.n	8005c70 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f1      	bne.n	8005c54 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000a951 	.word	0x2000a951
 8005c7c:	2000a960 	.word	0x2000a960

08005c80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <pbuf_pool_is_empty+0x14>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005c8a:	bf00      	nop
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	2000a951 	.word	0x2000a951

08005c98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	80fb      	strh	r3, [r7, #6]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88ba      	ldrh	r2, [r7, #4]
 8005cc4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005cc6:	8b3b      	ldrh	r3, [r7, #24]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	7f3a      	ldrb	r2, [r7, #28]
 8005cd2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	73da      	strb	r2, [r3, #15]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	71fb      	strb	r3, [r7, #7]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	80bb      	strh	r3, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005d02:	887b      	ldrh	r3, [r7, #2]
 8005d04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d08:	d07f      	beq.n	8005e0a <pbuf_alloc+0x11e>
 8005d0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d0e:	f300 80c8 	bgt.w	8005ea2 <pbuf_alloc+0x1b6>
 8005d12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005d16:	d010      	beq.n	8005d3a <pbuf_alloc+0x4e>
 8005d18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005d1c:	f300 80c1 	bgt.w	8005ea2 <pbuf_alloc+0x1b6>
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d002      	beq.n	8005d2a <pbuf_alloc+0x3e>
 8005d24:	2b41      	cmp	r3, #65	; 0x41
 8005d26:	f040 80bc 	bne.w	8005ea2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	88bb      	ldrh	r3, [r7, #4]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	2000      	movs	r0, #0
 8005d32:	f000 f8d1 	bl	8005ed8 <pbuf_alloc_reference>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005d38:	e0bd      	b.n	8005eb6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005d42:	88bb      	ldrh	r3, [r7, #4]
 8005d44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005d46:	2008      	movs	r0, #8
 8005d48:	f7ff fbce 	bl	80054e8 <memp_malloc>
 8005d4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005d54:	f7ff ff94 	bl	8005c80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d60:	f000 faa8 	bl	80062b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e0a7      	b.n	8005eb8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005d68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d6a:	3303      	adds	r3, #3
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8b7a      	ldrh	r2, [r7, #26]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bf28      	it	cs
 8005d80:	4613      	movcs	r3, r2
 8005d82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005d84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d86:	3310      	adds	r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	4618      	mov	r0, r3
 8005d94:	89f9      	ldrh	r1, [r7, #14]
 8005d96:	8b7a      	ldrh	r2, [r7, #26]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	887b      	ldrh	r3, [r7, #2]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	460b      	mov	r3, r1
 8005da2:	4601      	mov	r1, r0
 8005da4:	6938      	ldr	r0, [r7, #16]
 8005da6:	f7ff ff77 	bl	8005c98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <pbuf_alloc+0xd8>
 8005db6:	4b42      	ldr	r3, [pc, #264]	; (8005ec0 <pbuf_alloc+0x1d4>)
 8005db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dbc:	4941      	ldr	r1, [pc, #260]	; (8005ec4 <pbuf_alloc+0x1d8>)
 8005dbe:	4842      	ldr	r0, [pc, #264]	; (8005ec8 <pbuf_alloc+0x1dc>)
 8005dc0:	f009 f97c 	bl	800f0bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dc6:	3303      	adds	r3, #3
 8005dc8:	f023 0303 	bic.w	r3, r3, #3
 8005dcc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005dd0:	d106      	bne.n	8005de0 <pbuf_alloc+0xf4>
 8005dd2:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <pbuf_alloc+0x1d4>)
 8005dd4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005dd8:	493c      	ldr	r1, [pc, #240]	; (8005ecc <pbuf_alloc+0x1e0>)
 8005dda:	483b      	ldr	r0, [pc, #236]	; (8005ec8 <pbuf_alloc+0x1dc>)
 8005ddc:	f009 f96e 	bl	800f0bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dea:	e002      	b.n	8005df2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005df6:	8b7a      	ldrh	r2, [r7, #26]
 8005df8:	89fb      	ldrh	r3, [r7, #14]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005e02:	8b7b      	ldrh	r3, [r7, #26]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d19e      	bne.n	8005d46 <pbuf_alloc+0x5a>
      break;
 8005e08:	e055      	b.n	8005eb6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f023 0303 	bic.w	r3, r3, #3
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	88bb      	ldrh	r3, [r7, #4]
 8005e18:	3303      	adds	r3, #3
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005e26:	8b3b      	ldrh	r3, [r7, #24]
 8005e28:	3310      	adds	r3, #16
 8005e2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005e2c:	8b3a      	ldrh	r2, [r7, #24]
 8005e2e:	88bb      	ldrh	r3, [r7, #4]
 8005e30:	3303      	adds	r3, #3
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d306      	bcc.n	8005e48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005e3a:	8afa      	ldrh	r2, [r7, #22]
 8005e3c:	88bb      	ldrh	r3, [r7, #4]
 8005e3e:	3303      	adds	r3, #3
 8005e40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d201      	bcs.n	8005e4c <pbuf_alloc+0x160>
        return NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e035      	b.n	8005eb8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005e4c:	8afb      	ldrh	r3, [r7, #22]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff f9ba 	bl	80051c8 <mem_malloc>
 8005e54:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <pbuf_alloc+0x174>
        return NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e02b      	b.n	8005eb8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e62:	3310      	adds	r3, #16
 8005e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e66:	4413      	add	r3, r2
 8005e68:	3303      	adds	r3, #3
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	4618      	mov	r0, r3
 8005e70:	88b9      	ldrh	r1, [r7, #4]
 8005e72:	88ba      	ldrh	r2, [r7, #4]
 8005e74:	2300      	movs	r3, #0
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	887b      	ldrh	r3, [r7, #2]
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4601      	mov	r1, r0
 8005e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e82:	f7ff ff09 	bl	8005c98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d010      	beq.n	8005eb4 <pbuf_alloc+0x1c8>
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <pbuf_alloc+0x1d4>)
 8005e94:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005e98:	490d      	ldr	r1, [pc, #52]	; (8005ed0 <pbuf_alloc+0x1e4>)
 8005e9a:	480b      	ldr	r0, [pc, #44]	; (8005ec8 <pbuf_alloc+0x1dc>)
 8005e9c:	f009 f90e 	bl	800f0bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005ea0:	e008      	b.n	8005eb4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <pbuf_alloc+0x1d4>)
 8005ea4:	f240 1227 	movw	r2, #295	; 0x127
 8005ea8:	490a      	ldr	r1, [pc, #40]	; (8005ed4 <pbuf_alloc+0x1e8>)
 8005eaa:	4807      	ldr	r0, [pc, #28]	; (8005ec8 <pbuf_alloc+0x1dc>)
 8005eac:	f009 f906 	bl	800f0bc <iprintf>
      return NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e001      	b.n	8005eb8 <pbuf_alloc+0x1cc>
      break;
 8005eb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3728      	adds	r7, #40	; 0x28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	08010ac4 	.word	0x08010ac4
 8005ec4:	08010af4 	.word	0x08010af4
 8005ec8:	08010b24 	.word	0x08010b24
 8005ecc:	08010b4c 	.word	0x08010b4c
 8005ed0:	08010b80 	.word	0x08010b80
 8005ed4:	08010bac 	.word	0x08010bac

08005ed8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005ee8:	883b      	ldrh	r3, [r7, #0]
 8005eea:	2b41      	cmp	r3, #65	; 0x41
 8005eec:	d009      	beq.n	8005f02 <pbuf_alloc_reference+0x2a>
 8005eee:	883b      	ldrh	r3, [r7, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d006      	beq.n	8005f02 <pbuf_alloc_reference+0x2a>
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <pbuf_alloc_reference+0x5c>)
 8005ef6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005efa:	490f      	ldr	r1, [pc, #60]	; (8005f38 <pbuf_alloc_reference+0x60>)
 8005efc:	480f      	ldr	r0, [pc, #60]	; (8005f3c <pbuf_alloc_reference+0x64>)
 8005efe:	f009 f8dd 	bl	800f0bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005f02:	2007      	movs	r0, #7
 8005f04:	f7ff faf0 	bl	80054e8 <memp_malloc>
 8005f08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e00b      	b.n	8005f2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005f14:	8879      	ldrh	r1, [r7, #2]
 8005f16:	887a      	ldrh	r2, [r7, #2]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	883b      	ldrh	r3, [r7, #0]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	460b      	mov	r3, r1
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff feb7 	bl	8005c98 <pbuf_init_alloced_pbuf>
  return p;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08010ac4 	.word	0x08010ac4
 8005f38:	08010bc8 	.word	0x08010bc8
 8005f3c:	08010b24 	.word	0x08010b24

08005f40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	81bb      	strh	r3, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005f58:	8a7b      	ldrh	r3, [r7, #18]
 8005f5a:	3303      	adds	r3, #3
 8005f5c:	f023 0203 	bic.w	r2, r3, #3
 8005f60:	89bb      	ldrh	r3, [r7, #12]
 8005f62:	441a      	add	r2, r3
 8005f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d901      	bls.n	8005f6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e018      	b.n	8005fa0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005f74:	8a7b      	ldrh	r3, [r7, #18]
 8005f76:	3303      	adds	r3, #3
 8005f78:	f023 0303 	bic.w	r3, r3, #3
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	4413      	add	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e001      	b.n	8005f88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	89b9      	ldrh	r1, [r7, #12]
 8005f8c:	89ba      	ldrh	r2, [r7, #12]
 8005f8e:	2302      	movs	r3, #2
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	897b      	ldrh	r3, [r7, #10]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	460b      	mov	r3, r1
 8005f98:	6979      	ldr	r1, [r7, #20]
 8005f9a:	f7ff fe7d 	bl	8005c98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005f9e:	687b      	ldr	r3, [r7, #4]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <pbuf_realloc+0x20>
 8005fba:	4b3a      	ldr	r3, [pc, #232]	; (80060a4 <pbuf_realloc+0xfc>)
 8005fbc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005fc0:	4939      	ldr	r1, [pc, #228]	; (80060a8 <pbuf_realloc+0x100>)
 8005fc2:	483a      	ldr	r0, [pc, #232]	; (80060ac <pbuf_realloc+0x104>)
 8005fc4:	f009 f87a 	bl	800f0bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	891b      	ldrh	r3, [r3, #8]
 8005fcc:	887a      	ldrh	r2, [r7, #2]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d263      	bcs.n	800609a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	891a      	ldrh	r2, [r3, #8]
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005fdc:	887b      	ldrh	r3, [r7, #2]
 8005fde:	817b      	strh	r3, [r7, #10]
  q = p;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005fe4:	e018      	b.n	8006018 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	895b      	ldrh	r3, [r3, #10]
 8005fea:	897a      	ldrh	r2, [r7, #10]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	891a      	ldrh	r2, [r3, #8]
 8005ff4:	893b      	ldrh	r3, [r7, #8]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <pbuf_realloc+0x70>
 800600a:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <pbuf_realloc+0xfc>)
 800600c:	f240 12af 	movw	r2, #431	; 0x1af
 8006010:	4927      	ldr	r1, [pc, #156]	; (80060b0 <pbuf_realloc+0x108>)
 8006012:	4826      	ldr	r0, [pc, #152]	; (80060ac <pbuf_realloc+0x104>)
 8006014:	f009 f852 	bl	800f0bc <iprintf>
  while (rem_len > q->len) {
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	897a      	ldrh	r2, [r7, #10]
 800601e:	429a      	cmp	r2, r3
 8006020:	d8e1      	bhi.n	8005fe6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	7b1b      	ldrb	r3, [r3, #12]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	2b00      	cmp	r3, #0
 800602c:	d121      	bne.n	8006072 <pbuf_realloc+0xca>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	895b      	ldrh	r3, [r3, #10]
 8006032:	897a      	ldrh	r2, [r7, #10]
 8006034:	429a      	cmp	r2, r3
 8006036:	d01c      	beq.n	8006072 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	7b5b      	ldrb	r3, [r3, #13]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d116      	bne.n	8006072 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	b29a      	uxth	r2, r3
 800604e:	897b      	ldrh	r3, [r7, #10]
 8006050:	4413      	add	r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7fe ffba 	bl	8004fd0 <mem_trim>
 800605c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <pbuf_realloc+0xca>
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <pbuf_realloc+0xfc>)
 8006066:	f240 12bd 	movw	r2, #445	; 0x1bd
 800606a:	4912      	ldr	r1, [pc, #72]	; (80060b4 <pbuf_realloc+0x10c>)
 800606c:	480f      	ldr	r0, [pc, #60]	; (80060ac <pbuf_realloc+0x104>)
 800606e:	f009 f825 	bl	800f0bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	897a      	ldrh	r2, [r7, #10]
 8006076:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	895a      	ldrh	r2, [r3, #10]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f911 	bl	80062b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	e000      	b.n	800609c <pbuf_realloc+0xf4>
    return;
 800609a:	bf00      	nop

}
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	08010ac4 	.word	0x08010ac4
 80060a8:	08010bdc 	.word	0x08010bdc
 80060ac:	08010b24 	.word	0x08010b24
 80060b0:	08010bf4 	.word	0x08010bf4
 80060b4:	08010c0c 	.word	0x08010c0c

080060b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <pbuf_add_header_impl+0x22>
 80060cc:	4b2b      	ldr	r3, [pc, #172]	; (800617c <pbuf_add_header_impl+0xc4>)
 80060ce:	f240 12df 	movw	r2, #479	; 0x1df
 80060d2:	492b      	ldr	r1, [pc, #172]	; (8006180 <pbuf_add_header_impl+0xc8>)
 80060d4:	482b      	ldr	r0, [pc, #172]	; (8006184 <pbuf_add_header_impl+0xcc>)
 80060d6:	f008 fff1 	bl	800f0bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <pbuf_add_header_impl+0x30>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e6:	d301      	bcc.n	80060ec <pbuf_add_header_impl+0x34>
    return 1;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e043      	b.n	8006174 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e03e      	b.n	8006174 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	891a      	ldrh	r2, [r3, #8]
 80060fe:	8a7b      	ldrh	r3, [r7, #18]
 8006100:	4413      	add	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	8a7a      	ldrh	r2, [r7, #18]
 8006106:	429a      	cmp	r2, r3
 8006108:	d901      	bls.n	800610e <pbuf_add_header_impl+0x56>
    return 1;
 800610a:	2301      	movs	r3, #1
 800610c:	e032      	b.n	8006174 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	7b1b      	ldrb	r3, [r3, #12]
 8006112:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006114:	8a3b      	ldrh	r3, [r7, #16]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00c      	beq.n	8006138 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	425b      	negs	r3, r3
 8006126:	4413      	add	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3310      	adds	r3, #16
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	d20d      	bcs.n	8006150 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006134:	2301      	movs	r3, #1
 8006136:	e01d      	b.n	8006174 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	425b      	negs	r3, r3
 8006146:	4413      	add	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e001      	b.n	8006150 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800614c:	2301      	movs	r3, #1
 800614e:	e011      	b.n	8006174 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	895a      	ldrh	r2, [r3, #10]
 800615a:	8a7b      	ldrh	r3, [r7, #18]
 800615c:	4413      	add	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	891a      	ldrh	r2, [r3, #8]
 8006168:	8a7b      	ldrh	r3, [r7, #18]
 800616a:	4413      	add	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	811a      	strh	r2, [r3, #8]


  return 0;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	08010ac4 	.word	0x08010ac4
 8006180:	08010c28 	.word	0x08010c28
 8006184:	08010b24 	.word	0x08010b24

08006188 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006192:	2200      	movs	r2, #0
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff ff8e 	bl	80060b8 <pbuf_add_header_impl>
 800619c:	4603      	mov	r3, r0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <pbuf_remove_header+0x1e>
 80061b8:	4b20      	ldr	r3, [pc, #128]	; (800623c <pbuf_remove_header+0x94>)
 80061ba:	f240 224b 	movw	r2, #587	; 0x24b
 80061be:	4920      	ldr	r1, [pc, #128]	; (8006240 <pbuf_remove_header+0x98>)
 80061c0:	4820      	ldr	r0, [pc, #128]	; (8006244 <pbuf_remove_header+0x9c>)
 80061c2:	f008 ff7b 	bl	800f0bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <pbuf_remove_header+0x2c>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d301      	bcc.n	80061d8 <pbuf_remove_header+0x30>
    return 1;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e02c      	b.n	8006232 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <pbuf_remove_header+0x3a>
    return 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	e027      	b.n	8006232 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	895b      	ldrh	r3, [r3, #10]
 80061ea:	89fa      	ldrh	r2, [r7, #14]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d908      	bls.n	8006202 <pbuf_remove_header+0x5a>
 80061f0:	4b12      	ldr	r3, [pc, #72]	; (800623c <pbuf_remove_header+0x94>)
 80061f2:	f240 2255 	movw	r2, #597	; 0x255
 80061f6:	4914      	ldr	r1, [pc, #80]	; (8006248 <pbuf_remove_header+0xa0>)
 80061f8:	4812      	ldr	r0, [pc, #72]	; (8006244 <pbuf_remove_header+0x9c>)
 80061fa:	f008 ff5f 	bl	800f0bc <iprintf>
 80061fe:	2301      	movs	r3, #1
 8006200:	e017      	b.n	8006232 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	441a      	add	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	895a      	ldrh	r2, [r3, #10]
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	891a      	ldrh	r2, [r3, #8]
 8006226:	89fb      	ldrh	r3, [r7, #14]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	b29a      	uxth	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	08010ac4 	.word	0x08010ac4
 8006240:	08010c28 	.word	0x08010c28
 8006244:	08010b24 	.word	0x08010b24
 8006248:	08010c34 	.word	0x08010c34

0800624c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
 8006258:	4613      	mov	r3, r2
 800625a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800625c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da08      	bge.n	8006276 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006264:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006268:	425b      	negs	r3, r3
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff9b 	bl	80061a8 <pbuf_remove_header>
 8006272:	4603      	mov	r3, r0
 8006274:	e007      	b.n	8006286 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006276:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800627a:	787a      	ldrb	r2, [r7, #1]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ff1a 	bl	80060b8 <pbuf_add_header_impl>
 8006284:	4603      	mov	r3, r0
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800629a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800629e:	2201      	movs	r2, #1
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ffd2 	bl	800624c <pbuf_header_impl>
 80062a8:	4603      	mov	r3, r0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <pbuf_free+0x22>
 80062c8:	4b38      	ldr	r3, [pc, #224]	; (80063ac <pbuf_free+0xf8>)
 80062ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80062ce:	4938      	ldr	r1, [pc, #224]	; (80063b0 <pbuf_free+0xfc>)
 80062d0:	4838      	ldr	r0, [pc, #224]	; (80063b4 <pbuf_free+0x100>)
 80062d2:	f008 fef3 	bl	800f0bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e063      	b.n	80063a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80062de:	e05c      	b.n	800639a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7b9b      	ldrb	r3, [r3, #14]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <pbuf_free+0x42>
 80062e8:	4b30      	ldr	r3, [pc, #192]	; (80063ac <pbuf_free+0xf8>)
 80062ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 80062ee:	4932      	ldr	r1, [pc, #200]	; (80063b8 <pbuf_free+0x104>)
 80062f0:	4830      	ldr	r0, [pc, #192]	; (80063b4 <pbuf_free+0x100>)
 80062f2:	f008 fee3 	bl	800f0bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7b9b      	ldrb	r3, [r3, #14]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	739a      	strb	r2, [r3, #14]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	7b9b      	ldrb	r3, [r3, #14]
 8006306:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006308:	7dbb      	ldrb	r3, [r7, #22]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d143      	bne.n	8006396 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7b1b      	ldrb	r3, [r3, #12]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7b5b      	ldrb	r3, [r3, #13]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <pbuf_free+0x90>
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <pbuf_free+0xf8>)
 8006338:	f240 22ff 	movw	r2, #767	; 0x2ff
 800633c:	491f      	ldr	r1, [pc, #124]	; (80063bc <pbuf_free+0x108>)
 800633e:	481d      	ldr	r0, [pc, #116]	; (80063b4 <pbuf_free+0x100>)
 8006340:	f008 febc 	bl	800f0bc <iprintf>
        pc->custom_free_function(p);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
 800634c:	e01d      	b.n	800638a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b02      	cmp	r3, #2
 8006352:	d104      	bne.n	800635e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	2008      	movs	r0, #8
 8006358:	f7ff f936 	bl	80055c8 <memp_free>
 800635c:	e015      	b.n	800638a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d104      	bne.n	800636e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	2007      	movs	r0, #7
 8006368:	f7ff f92e 	bl	80055c8 <memp_free>
 800636c:	e00d      	b.n	800638a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <pbuf_free+0xc8>
          mem_free(p);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fe fdc1 	bl	8004efc <mem_free>
 800637a:	e006      	b.n	800638a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <pbuf_free+0xf8>)
 800637e:	f240 320f 	movw	r2, #783	; 0x30f
 8006382:	490f      	ldr	r1, [pc, #60]	; (80063c0 <pbuf_free+0x10c>)
 8006384:	480b      	ldr	r0, [pc, #44]	; (80063b4 <pbuf_free+0x100>)
 8006386:	f008 fe99 	bl	800f0bc <iprintf>
        }
      }
      count++;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	3301      	adds	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	607b      	str	r3, [r7, #4]
 8006394:	e001      	b.n	800639a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d19f      	bne.n	80062e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	08010ac4 	.word	0x08010ac4
 80063b0:	08010c28 	.word	0x08010c28
 80063b4:	08010b24 	.word	0x08010b24
 80063b8:	08010c54 	.word	0x08010c54
 80063bc:	08010c6c 	.word	0x08010c6c
 80063c0:	08010c90 	.word	0x08010c90

080063c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80063d0:	e005      	b.n	80063de <pbuf_clen+0x1a>
    ++len;
 80063d2:	89fb      	ldrh	r3, [r7, #14]
 80063d4:	3301      	adds	r3, #1
 80063d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f6      	bne.n	80063d2 <pbuf_clen+0xe>
  }
  return len;
 80063e4:	89fb      	ldrh	r3, [r7, #14]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d010      	beq.n	8006424 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7b9b      	ldrb	r3, [r3, #14]
 8006406:	3301      	adds	r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	7b9b      	ldrb	r3, [r3, #14]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <pbuf_ref+0x30>
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <pbuf_ref+0x38>)
 8006418:	f240 3242 	movw	r2, #834	; 0x342
 800641c:	4904      	ldr	r1, [pc, #16]	; (8006430 <pbuf_ref+0x3c>)
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <pbuf_ref+0x40>)
 8006420:	f008 fe4c 	bl	800f0bc <iprintf>
  }
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	08010ac4 	.word	0x08010ac4
 8006430:	08010ca4 	.word	0x08010ca4
 8006434:	08010b24 	.word	0x08010b24

08006438 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <pbuf_cat+0x16>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <pbuf_cat+0x26>
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <pbuf_cat+0x98>)
 8006450:	f240 3259 	movw	r2, #857	; 0x359
 8006454:	491f      	ldr	r1, [pc, #124]	; (80064d4 <pbuf_cat+0x9c>)
 8006456:	4820      	ldr	r0, [pc, #128]	; (80064d8 <pbuf_cat+0xa0>)
 8006458:	f008 fe30 	bl	800f0bc <iprintf>
 800645c:	e034      	b.n	80064c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e00a      	b.n	800647a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	891a      	ldrh	r2, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	891b      	ldrh	r3, [r3, #8]
 800646c:	4413      	add	r3, r2
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	891a      	ldrh	r2, [r3, #8]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	895b      	ldrh	r3, [r3, #10]
 800648a:	429a      	cmp	r2, r3
 800648c:	d006      	beq.n	800649c <pbuf_cat+0x64>
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <pbuf_cat+0x98>)
 8006490:	f240 3262 	movw	r2, #866	; 0x362
 8006494:	4911      	ldr	r1, [pc, #68]	; (80064dc <pbuf_cat+0xa4>)
 8006496:	4810      	ldr	r0, [pc, #64]	; (80064d8 <pbuf_cat+0xa0>)
 8006498:	f008 fe10 	bl	800f0bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <pbuf_cat+0x7a>
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <pbuf_cat+0x98>)
 80064a6:	f240 3263 	movw	r2, #867	; 0x363
 80064aa:	490d      	ldr	r1, [pc, #52]	; (80064e0 <pbuf_cat+0xa8>)
 80064ac:	480a      	ldr	r0, [pc, #40]	; (80064d8 <pbuf_cat+0xa0>)
 80064ae:	f008 fe05 	bl	800f0bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	891a      	ldrh	r2, [r3, #8]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	891b      	ldrh	r3, [r3, #8]
 80064ba:	4413      	add	r3, r2
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	08010ac4 	.word	0x08010ac4
 80064d4:	08010cb8 	.word	0x08010cb8
 80064d8:	08010b24 	.word	0x08010b24
 80064dc:	08010cf0 	.word	0x08010cf0
 80064e0:	08010d20 	.word	0x08010d20

080064e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ffa1 	bl	8006438 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80064f6:	6838      	ldr	r0, [r7, #0]
 80064f8:	f7ff ff7c 	bl	80063f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <pbuf_copy+0x2a>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <pbuf_copy+0x2a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	891a      	ldrh	r2, [r3, #8]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	891b      	ldrh	r3, [r3, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	d209      	bcs.n	8006542 <pbuf_copy+0x3e>
 800652e:	4b57      	ldr	r3, [pc, #348]	; (800668c <pbuf_copy+0x188>)
 8006530:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006534:	4956      	ldr	r1, [pc, #344]	; (8006690 <pbuf_copy+0x18c>)
 8006536:	4857      	ldr	r0, [pc, #348]	; (8006694 <pbuf_copy+0x190>)
 8006538:	f008 fdc0 	bl	800f0bc <iprintf>
 800653c:	f06f 030f 	mvn.w	r3, #15
 8006540:	e09f      	b.n	8006682 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	895b      	ldrh	r3, [r3, #10]
 8006546:	461a      	mov	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	895b      	ldrh	r3, [r3, #10]
 8006550:	4619      	mov	r1, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1acb      	subs	r3, r1, r3
 8006556:	429a      	cmp	r2, r3
 8006558:	d306      	bcc.n	8006568 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	895b      	ldrh	r3, [r3, #10]
 800655e:	461a      	mov	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e005      	b.n	8006574 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	895b      	ldrh	r3, [r3, #10]
 800656c:	461a      	mov	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	18d0      	adds	r0, r2, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4619      	mov	r1, r3
 8006588:	f008 fd68 	bl	800f05c <memcpy>
    offset_to += len;
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	895b      	ldrh	r3, [r3, #10]
 80065a0:	461a      	mov	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d906      	bls.n	80065b6 <pbuf_copy+0xb2>
 80065a8:	4b38      	ldr	r3, [pc, #224]	; (800668c <pbuf_copy+0x188>)
 80065aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80065ae:	493a      	ldr	r1, [pc, #232]	; (8006698 <pbuf_copy+0x194>)
 80065b0:	4838      	ldr	r0, [pc, #224]	; (8006694 <pbuf_copy+0x190>)
 80065b2:	f008 fd83 	bl	800f0bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	895b      	ldrh	r3, [r3, #10]
 80065ba:	461a      	mov	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4293      	cmp	r3, r2
 80065c0:	d906      	bls.n	80065d0 <pbuf_copy+0xcc>
 80065c2:	4b32      	ldr	r3, [pc, #200]	; (800668c <pbuf_copy+0x188>)
 80065c4:	f240 32da 	movw	r2, #986	; 0x3da
 80065c8:	4934      	ldr	r1, [pc, #208]	; (800669c <pbuf_copy+0x198>)
 80065ca:	4832      	ldr	r0, [pc, #200]	; (8006694 <pbuf_copy+0x190>)
 80065cc:	f008 fd76 	bl	800f0bc <iprintf>
    if (offset_from >= p_from->len) {
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	895b      	ldrh	r3, [r3, #10]
 80065d4:	461a      	mov	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4293      	cmp	r3, r2
 80065da:	d304      	bcc.n	80065e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	895b      	ldrh	r3, [r3, #10]
 80065ea:	461a      	mov	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d114      	bne.n	800661c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10c      	bne.n	800661c <pbuf_copy+0x118>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <pbuf_copy+0x118>
 8006608:	4b20      	ldr	r3, [pc, #128]	; (800668c <pbuf_copy+0x188>)
 800660a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800660e:	4924      	ldr	r1, [pc, #144]	; (80066a0 <pbuf_copy+0x19c>)
 8006610:	4820      	ldr	r0, [pc, #128]	; (8006694 <pbuf_copy+0x190>)
 8006612:	f008 fd53 	bl	800f0bc <iprintf>
 8006616:	f06f 030f 	mvn.w	r3, #15
 800661a:	e032      	b.n	8006682 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d013      	beq.n	800664a <pbuf_copy+0x146>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	895a      	ldrh	r2, [r3, #10]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	891b      	ldrh	r3, [r3, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	d10d      	bne.n	800664a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <pbuf_copy+0x146>
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <pbuf_copy+0x188>)
 8006638:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800663c:	4919      	ldr	r1, [pc, #100]	; (80066a4 <pbuf_copy+0x1a0>)
 800663e:	4815      	ldr	r0, [pc, #84]	; (8006694 <pbuf_copy+0x190>)
 8006640:	f008 fd3c 	bl	800f0bc <iprintf>
 8006644:	f06f 0305 	mvn.w	r3, #5
 8006648:	e01b      	b.n	8006682 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d013      	beq.n	8006678 <pbuf_copy+0x174>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	895a      	ldrh	r2, [r3, #10]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	891b      	ldrh	r3, [r3, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d10d      	bne.n	8006678 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <pbuf_copy+0x174>
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <pbuf_copy+0x188>)
 8006666:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800666a:	490e      	ldr	r1, [pc, #56]	; (80066a4 <pbuf_copy+0x1a0>)
 800666c:	4809      	ldr	r0, [pc, #36]	; (8006694 <pbuf_copy+0x190>)
 800666e:	f008 fd25 	bl	800f0bc <iprintf>
 8006672:	f06f 0305 	mvn.w	r3, #5
 8006676:	e004      	b.n	8006682 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f47f af61 	bne.w	8006542 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	08010ac4 	.word	0x08010ac4
 8006690:	08010d6c 	.word	0x08010d6c
 8006694:	08010b24 	.word	0x08010b24
 8006698:	08010d9c 	.word	0x08010d9c
 800669c:	08010db4 	.word	0x08010db4
 80066a0:	08010dd0 	.word	0x08010dd0
 80066a4:	08010de0 	.word	0x08010de0

080066a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	460b      	mov	r3, r1
 80066b8:	80fb      	strh	r3, [r7, #6]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <pbuf_copy_partial+0x36>
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <pbuf_copy_partial+0xd4>)
 80066ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80066d2:	492b      	ldr	r1, [pc, #172]	; (8006780 <pbuf_copy_partial+0xd8>)
 80066d4:	482b      	ldr	r0, [pc, #172]	; (8006784 <pbuf_copy_partial+0xdc>)
 80066d6:	f008 fcf1 	bl	800f0bc <iprintf>
 80066da:	2300      	movs	r3, #0
 80066dc:	e04a      	b.n	8006774 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d108      	bne.n	80066f6 <pbuf_copy_partial+0x4e>
 80066e4:	4b25      	ldr	r3, [pc, #148]	; (800677c <pbuf_copy_partial+0xd4>)
 80066e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80066ea:	4927      	ldr	r1, [pc, #156]	; (8006788 <pbuf_copy_partial+0xe0>)
 80066ec:	4825      	ldr	r0, [pc, #148]	; (8006784 <pbuf_copy_partial+0xdc>)
 80066ee:	f008 fce5 	bl	800f0bc <iprintf>
 80066f2:	2300      	movs	r3, #0
 80066f4:	e03e      	b.n	8006774 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e034      	b.n	8006766 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80066fc:	88bb      	ldrh	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <pbuf_copy_partial+0x70>
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	895b      	ldrh	r3, [r3, #10]
 8006706:	88ba      	ldrh	r2, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d305      	bcc.n	8006718 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	895b      	ldrh	r3, [r3, #10]
 8006710:	88ba      	ldrh	r2, [r7, #4]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	80bb      	strh	r3, [r7, #4]
 8006716:	e023      	b.n	8006760 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	895a      	ldrh	r2, [r3, #10]
 800671c:	88bb      	ldrh	r3, [r7, #4]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006722:	8b3a      	ldrh	r2, [r7, #24]
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	429a      	cmp	r2, r3
 8006728:	d901      	bls.n	800672e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800672e:	8b7b      	ldrh	r3, [r7, #26]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	18d0      	adds	r0, r2, r3
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	88bb      	ldrh	r3, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	8b3a      	ldrh	r2, [r7, #24]
 800673e:	4619      	mov	r1, r3
 8006740:	f008 fc8c 	bl	800f05c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006744:	8afa      	ldrh	r2, [r7, #22]
 8006746:	8b3b      	ldrh	r3, [r7, #24]
 8006748:	4413      	add	r3, r2
 800674a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800674c:	8b7a      	ldrh	r2, [r7, #26]
 800674e:	8b3b      	ldrh	r3, [r7, #24]
 8006750:	4413      	add	r3, r2
 8006752:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	8b3b      	ldrh	r3, [r7, #24]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <pbuf_copy_partial+0xca>
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1c4      	bne.n	80066fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006772:	8afb      	ldrh	r3, [r7, #22]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	08010ac4 	.word	0x08010ac4
 8006780:	08010e0c 	.word	0x08010e0c
 8006784:	08010b24 	.word	0x08010b24
 8006788:	08010e2c 	.word	0x08010e2c

0800678c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <pbuf_take+0x30>
 80067a8:	4b3a      	ldr	r3, [pc, #232]	; (8006894 <pbuf_take+0x108>)
 80067aa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80067ae:	493a      	ldr	r1, [pc, #232]	; (8006898 <pbuf_take+0x10c>)
 80067b0:	483a      	ldr	r0, [pc, #232]	; (800689c <pbuf_take+0x110>)
 80067b2:	f008 fc83 	bl	800f0bc <iprintf>
 80067b6:	f06f 030f 	mvn.w	r3, #15
 80067ba:	e067      	b.n	800688c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <pbuf_take+0x4a>
 80067c2:	4b34      	ldr	r3, [pc, #208]	; (8006894 <pbuf_take+0x108>)
 80067c4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80067c8:	4935      	ldr	r1, [pc, #212]	; (80068a0 <pbuf_take+0x114>)
 80067ca:	4834      	ldr	r0, [pc, #208]	; (800689c <pbuf_take+0x110>)
 80067cc:	f008 fc76 	bl	800f0bc <iprintf>
 80067d0:	f06f 030f 	mvn.w	r3, #15
 80067d4:	e05a      	b.n	800688c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	891b      	ldrh	r3, [r3, #8]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d909      	bls.n	80067f4 <pbuf_take+0x68>
 80067e0:	4b2c      	ldr	r3, [pc, #176]	; (8006894 <pbuf_take+0x108>)
 80067e2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80067e6:	492f      	ldr	r1, [pc, #188]	; (80068a4 <pbuf_take+0x118>)
 80067e8:	482c      	ldr	r0, [pc, #176]	; (800689c <pbuf_take+0x110>)
 80067ea:	f008 fc67 	bl	800f0bc <iprintf>
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e04b      	b.n	800688c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <pbuf_take+0x7e>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <pbuf_take+0x7e>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	891b      	ldrh	r3, [r3, #8]
 8006804:	88fa      	ldrh	r2, [r7, #6]
 8006806:	429a      	cmp	r2, r3
 8006808:	d902      	bls.n	8006810 <pbuf_take+0x84>
    return ERR_ARG;
 800680a:	f06f 030f 	mvn.w	r3, #15
 800680e:	e03d      	b.n	800688c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	e028      	b.n	8006868 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <pbuf_take+0x9e>
 800681c:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <pbuf_take+0x108>)
 800681e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006822:	4921      	ldr	r1, [pc, #132]	; (80068a8 <pbuf_take+0x11c>)
 8006824:	481d      	ldr	r0, [pc, #116]	; (800689c <pbuf_take+0x110>)
 8006826:	f008 fc49 	bl	800f0bc <iprintf>
    buf_copy_len = total_copy_len;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	895b      	ldrh	r3, [r3, #10]
 8006832:	461a      	mov	r2, r3
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	4293      	cmp	r3, r2
 8006838:	d902      	bls.n	8006840 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	6858      	ldr	r0, [r3, #4]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4413      	add	r3, r2
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	4619      	mov	r1, r3
 800684e:	f008 fc05 	bl	800f05c <memcpy>
    total_copy_len -= buf_copy_len;
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	4413      	add	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1d3      	bne.n	8006816 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <pbuf_take+0xf0>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d006      	beq.n	800688a <pbuf_take+0xfe>
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <pbuf_take+0x108>)
 800687e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006882:	490a      	ldr	r1, [pc, #40]	; (80068ac <pbuf_take+0x120>)
 8006884:	4805      	ldr	r0, [pc, #20]	; (800689c <pbuf_take+0x110>)
 8006886:	f008 fc19 	bl	800f0bc <iprintf>
  return ERR_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	08010ac4 	.word	0x08010ac4
 8006898:	08010e9c 	.word	0x08010e9c
 800689c:	08010b24 	.word	0x08010b24
 80068a0:	08010eb4 	.word	0x08010eb4
 80068a4:	08010ed0 	.word	0x08010ed0
 80068a8:	08010ef0 	.word	0x08010ef0
 80068ac:	08010f08 	.word	0x08010f08

080068b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	603a      	str	r2, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
 80068bc:	460b      	mov	r3, r1
 80068be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	8919      	ldrh	r1, [r3, #8]
 80068c4:	88ba      	ldrh	r2, [r7, #4]
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fa0f 	bl	8005cec <pbuf_alloc>
 80068ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <pbuf_clone+0x2a>
    return NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e011      	b.n	80068fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff fe11 	bl	8006504 <pbuf_copy>
 80068e2:	4603      	mov	r3, r0
 80068e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80068e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d006      	beq.n	80068fc <pbuf_clone+0x4c>
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <pbuf_clone+0x58>)
 80068f0:	f240 5224 	movw	r2, #1316	; 0x524
 80068f4:	4905      	ldr	r1, [pc, #20]	; (800690c <pbuf_clone+0x5c>)
 80068f6:	4806      	ldr	r0, [pc, #24]	; (8006910 <pbuf_clone+0x60>)
 80068f8:	f008 fbe0 	bl	800f0bc <iprintf>
  return q;
 80068fc:	68fb      	ldr	r3, [r7, #12]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	08010ac4 	.word	0x08010ac4
 800690c:	08010f38 	.word	0x08010f38
 8006910:	08010b24 	.word	0x08010b24

08006914 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006918:	f008 fbe8 	bl	800f0ec <rand>
 800691c:	4603      	mov	r3, r0
 800691e:	b29b      	uxth	r3, r3
 8006920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006924:	b29b      	uxth	r3, r3
 8006926:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800692a:	b29a      	uxth	r2, r3
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <tcp_init+0x20>)
 800692e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006930:	bf00      	nop
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000020 	.word	0x20000020

08006938 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7d1b      	ldrb	r3, [r3, #20]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d105      	bne.n	8006954 <tcp_free+0x1c>
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <tcp_free+0x2c>)
 800694a:	22d4      	movs	r2, #212	; 0xd4
 800694c:	4906      	ldr	r1, [pc, #24]	; (8006968 <tcp_free+0x30>)
 800694e:	4807      	ldr	r0, [pc, #28]	; (800696c <tcp_free+0x34>)
 8006950:	f008 fbb4 	bl	800f0bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	2001      	movs	r0, #1
 8006958:	f7fe fe36 	bl	80055c8 <memp_free>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	08010fc4 	.word	0x08010fc4
 8006968:	08010ff4 	.word	0x08010ff4
 800696c:	08011008 	.word	0x08011008

08006970 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7d1b      	ldrb	r3, [r3, #20]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d105      	bne.n	800698c <tcp_free_listen+0x1c>
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <tcp_free_listen+0x2c>)
 8006982:	22df      	movs	r2, #223	; 0xdf
 8006984:	4906      	ldr	r1, [pc, #24]	; (80069a0 <tcp_free_listen+0x30>)
 8006986:	4807      	ldr	r0, [pc, #28]	; (80069a4 <tcp_free_listen+0x34>)
 8006988:	f008 fb98 	bl	800f0bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	2002      	movs	r0, #2
 8006990:	f7fe fe1a 	bl	80055c8 <memp_free>
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	08010fc4 	.word	0x08010fc4
 80069a0:	08011030 	.word	0x08011030
 80069a4:	08011008 	.word	0x08011008

080069a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80069ac:	f000 fea2 	bl	80076f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <tcp_tmr+0x28>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <tcp_tmr+0x28>)
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <tcp_tmr+0x28>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80069c8:	f000 fb54 	bl	8007074 <tcp_slowtmr>
  }
}
 80069cc:	bf00      	nop
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	2000a969 	.word	0x2000a969

080069d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <tcp_remove_listener+0x1c>
 80069e4:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <tcp_remove_listener+0x48>)
 80069e6:	22ff      	movs	r2, #255	; 0xff
 80069e8:	490d      	ldr	r1, [pc, #52]	; (8006a20 <tcp_remove_listener+0x4c>)
 80069ea:	480e      	ldr	r0, [pc, #56]	; (8006a24 <tcp_remove_listener+0x50>)
 80069ec:	f008 fb66 	bl	800f0bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e00a      	b.n	8006a0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d102      	bne.n	8006a06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f1      	bne.n	80069f6 <tcp_remove_listener+0x22>
    }
  }
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08010fc4 	.word	0x08010fc4
 8006a20:	0801104c 	.word	0x0801104c
 8006a24:	08011008 	.word	0x08011008

08006a28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <tcp_listen_closed+0x1c>
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <tcp_listen_closed+0x60>)
 8006a38:	f240 1211 	movw	r2, #273	; 0x111
 8006a3c:	4913      	ldr	r1, [pc, #76]	; (8006a8c <tcp_listen_closed+0x64>)
 8006a3e:	4814      	ldr	r0, [pc, #80]	; (8006a90 <tcp_listen_closed+0x68>)
 8006a40:	f008 fb3c 	bl	800f0bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7d1b      	ldrb	r3, [r3, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d006      	beq.n	8006a5a <tcp_listen_closed+0x32>
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <tcp_listen_closed+0x60>)
 8006a4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006a52:	4910      	ldr	r1, [pc, #64]	; (8006a94 <tcp_listen_closed+0x6c>)
 8006a54:	480e      	ldr	r0, [pc, #56]	; (8006a90 <tcp_listen_closed+0x68>)
 8006a56:	f008 fb31 	bl	800f0bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	e00b      	b.n	8006a78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006a60:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <tcp_listen_closed+0x70>)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff ffb1 	bl	80069d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d9f0      	bls.n	8006a60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08010fc4 	.word	0x08010fc4
 8006a8c:	08011074 	.word	0x08011074
 8006a90:	08011008 	.word	0x08011008
 8006a94:	08011080 	.word	0x08011080
 8006a98:	08012fa4 	.word	0x08012fa4

08006a9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006a9c:	b5b0      	push	{r4, r5, r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af04      	add	r7, sp, #16
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <tcp_close_shutdown+0x20>
 8006aae:	4b63      	ldr	r3, [pc, #396]	; (8006c3c <tcp_close_shutdown+0x1a0>)
 8006ab0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ab4:	4962      	ldr	r1, [pc, #392]	; (8006c40 <tcp_close_shutdown+0x1a4>)
 8006ab6:	4863      	ldr	r0, [pc, #396]	; (8006c44 <tcp_close_shutdown+0x1a8>)
 8006ab8:	f008 fb00 	bl	800f0bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d066      	beq.n	8006b90 <tcp_close_shutdown+0xf4>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7d1b      	ldrb	r3, [r3, #20]
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d003      	beq.n	8006ad2 <tcp_close_shutdown+0x36>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7d1b      	ldrb	r3, [r3, #20]
 8006ace:	2b07      	cmp	r3, #7
 8006ad0:	d15e      	bne.n	8006b90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <tcp_close_shutdown+0x48>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ade:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ae2:	d055      	beq.n	8006b90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8b5b      	ldrh	r3, [r3, #26]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <tcp_close_shutdown+0x62>
 8006af0:	4b52      	ldr	r3, [pc, #328]	; (8006c3c <tcp_close_shutdown+0x1a0>)
 8006af2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006af6:	4954      	ldr	r1, [pc, #336]	; (8006c48 <tcp_close_shutdown+0x1ac>)
 8006af8:	4852      	ldr	r0, [pc, #328]	; (8006c44 <tcp_close_shutdown+0x1a8>)
 8006afa:	f008 fadf 	bl	800f0bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006b06:	687d      	ldr	r5, [r7, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	8ad2      	ldrh	r2, [r2, #22]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	8b09      	ldrh	r1, [r1, #24]
 8006b14:	9102      	str	r1, [sp, #8]
 8006b16:	9201      	str	r2, [sp, #4]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4601      	mov	r1, r0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f004 fe91 	bl	800b848 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f8c6 	bl	8007cb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006b2c:	4b47      	ldr	r3, [pc, #284]	; (8006c4c <tcp_close_shutdown+0x1b0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d105      	bne.n	8006b42 <tcp_close_shutdown+0xa6>
 8006b36:	4b45      	ldr	r3, [pc, #276]	; (8006c4c <tcp_close_shutdown+0x1b0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4a43      	ldr	r2, [pc, #268]	; (8006c4c <tcp_close_shutdown+0x1b0>)
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e013      	b.n	8006b6a <tcp_close_shutdown+0xce>
 8006b42:	4b42      	ldr	r3, [pc, #264]	; (8006c4c <tcp_close_shutdown+0x1b0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e00c      	b.n	8006b64 <tcp_close_shutdown+0xc8>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d104      	bne.n	8006b5e <tcp_close_shutdown+0xc2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	60da      	str	r2, [r3, #12]
 8006b5c:	e005      	b.n	8006b6a <tcp_close_shutdown+0xce>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1ef      	bne.n	8006b4a <tcp_close_shutdown+0xae>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	4b37      	ldr	r3, [pc, #220]	; (8006c50 <tcp_close_shutdown+0x1b4>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006b76:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <tcp_close_shutdown+0x1b8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d102      	bne.n	8006b86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006b80:	f003 fd5e 	bl	800a640 <tcp_trigger_input_pcb_close>
 8006b84:	e002      	b.n	8006b8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fed6 	bl	8006938 <tcp_free>
      }
      return ERR_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e050      	b.n	8006c32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7d1b      	ldrb	r3, [r3, #20]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d03b      	beq.n	8006c10 <tcp_close_shutdown+0x174>
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	dc44      	bgt.n	8006c26 <tcp_close_shutdown+0x18a>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <tcp_close_shutdown+0x10a>
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d02a      	beq.n	8006bfa <tcp_close_shutdown+0x15e>
 8006ba4:	e03f      	b.n	8006c26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8adb      	ldrh	r3, [r3, #22]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d021      	beq.n	8006bf2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006bae:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <tcp_close_shutdown+0x1bc>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d105      	bne.n	8006bc4 <tcp_close_shutdown+0x128>
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <tcp_close_shutdown+0x1bc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	4a26      	ldr	r2, [pc, #152]	; (8006c58 <tcp_close_shutdown+0x1bc>)
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e013      	b.n	8006bec <tcp_close_shutdown+0x150>
 8006bc4:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <tcp_close_shutdown+0x1bc>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	e00c      	b.n	8006be6 <tcp_close_shutdown+0x14a>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d104      	bne.n	8006be0 <tcp_close_shutdown+0x144>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	60da      	str	r2, [r3, #12]
 8006bde:	e005      	b.n	8006bec <tcp_close_shutdown+0x150>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1ef      	bne.n	8006bcc <tcp_close_shutdown+0x130>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fea0 	bl	8006938 <tcp_free>
      break;
 8006bf8:	e01a      	b.n	8006c30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff ff14 	bl	8006a28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4816      	ldr	r0, [pc, #88]	; (8006c5c <tcp_close_shutdown+0x1c0>)
 8006c04:	f001 f8a8 	bl	8007d58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff feb1 	bl	8006970 <tcp_free_listen>
      break;
 8006c0e:	e00f      	b.n	8006c30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	480e      	ldr	r0, [pc, #56]	; (8006c4c <tcp_close_shutdown+0x1b0>)
 8006c14:	f001 f8a0 	bl	8007d58 <tcp_pcb_remove>
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <tcp_close_shutdown+0x1b4>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fe8a 	bl	8006938 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006c24:	e004      	b.n	8006c30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f81a 	bl	8006c60 <tcp_close_shutdown_fin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	e000      	b.n	8006c32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08010fc4 	.word	0x08010fc4
 8006c40:	08011098 	.word	0x08011098
 8006c44:	08011008 	.word	0x08011008
 8006c48:	080110b8 	.word	0x080110b8
 8006c4c:	2000a960 	.word	0x2000a960
 8006c50:	2000a968 	.word	0x2000a968
 8006c54:	2000a9a0 	.word	0x2000a9a0
 8006c58:	2000a958 	.word	0x2000a958
 8006c5c:	2000a95c 	.word	0x2000a95c

08006c60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <tcp_close_shutdown_fin+0x1c>
 8006c6e:	4b2e      	ldr	r3, [pc, #184]	; (8006d28 <tcp_close_shutdown_fin+0xc8>)
 8006c70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006c74:	492d      	ldr	r1, [pc, #180]	; (8006d2c <tcp_close_shutdown_fin+0xcc>)
 8006c76:	482e      	ldr	r0, [pc, #184]	; (8006d30 <tcp_close_shutdown_fin+0xd0>)
 8006c78:	f008 fa20 	bl	800f0bc <iprintf>

  switch (pcb->state) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	7d1b      	ldrb	r3, [r3, #20]
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	d020      	beq.n	8006cc6 <tcp_close_shutdown_fin+0x66>
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	dc2b      	bgt.n	8006ce0 <tcp_close_shutdown_fin+0x80>
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d002      	beq.n	8006c92 <tcp_close_shutdown_fin+0x32>
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d00d      	beq.n	8006cac <tcp_close_shutdown_fin+0x4c>
 8006c90:	e026      	b.n	8006ce0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f003 fee6 	bl	800aa64 <tcp_send_fin>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11f      	bne.n	8006ce4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2205      	movs	r2, #5
 8006ca8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006caa:	e01b      	b.n	8006ce4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f003 fed9 	bl	800aa64 <tcp_send_fin>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d114      	bne.n	8006ce8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006cc4:	e010      	b.n	8006ce8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f003 fecc 	bl	800aa64 <tcp_send_fin>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2209      	movs	r2, #9
 8006cdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006cde:	e005      	b.n	8006cec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e01c      	b.n	8006d1e <tcp_close_shutdown_fin+0xbe>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e002      	b.n	8006cee <tcp_close_shutdown_fin+0x8e>
      break;
 8006ce8:	bf00      	nop
 8006cea:	e000      	b.n	8006cee <tcp_close_shutdown_fin+0x8e>
      break;
 8006cec:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d103      	bne.n	8006cfe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f003 fff2 	bl	800ace0 <tcp_output>
 8006cfc:	e00d      	b.n	8006d1a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d108      	bne.n	8006d1a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8b5b      	ldrh	r3, [r3, #26]
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e001      	b.n	8006d1e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	08010fc4 	.word	0x08010fc4
 8006d2c:	08011074 	.word	0x08011074
 8006d30:	08011008 	.word	0x08011008

08006d34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <tcp_close+0x22>
 8006d42:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <tcp_close+0x4c>)
 8006d44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006d48:	490e      	ldr	r1, [pc, #56]	; (8006d84 <tcp_close+0x50>)
 8006d4a:	480f      	ldr	r0, [pc, #60]	; (8006d88 <tcp_close+0x54>)
 8006d4c:	f008 f9b6 	bl	800f0bc <iprintf>
 8006d50:	f06f 030f 	mvn.w	r3, #15
 8006d54:	e00f      	b.n	8006d76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7d1b      	ldrb	r3, [r3, #20]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d006      	beq.n	8006d6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8b5b      	ldrh	r3, [r3, #26]
 8006d62:	f043 0310 	orr.w	r3, r3, #16
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fe94 	bl	8006a9c <tcp_close_shutdown>
 8006d74:	4603      	mov	r3, r0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	08010fc4 	.word	0x08010fc4
 8006d84:	080110d4 	.word	0x080110d4
 8006d88:	08011008 	.word	0x08011008

08006d8c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	; 0x38
 8006d90:	af04      	add	r7, sp, #16
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <tcp_abandon+0x20>
 8006d9c:	4b52      	ldr	r3, [pc, #328]	; (8006ee8 <tcp_abandon+0x15c>)
 8006d9e:	f240 223d 	movw	r2, #573	; 0x23d
 8006da2:	4952      	ldr	r1, [pc, #328]	; (8006eec <tcp_abandon+0x160>)
 8006da4:	4852      	ldr	r0, [pc, #328]	; (8006ef0 <tcp_abandon+0x164>)
 8006da6:	f008 f989 	bl	800f0bc <iprintf>
 8006daa:	e099      	b.n	8006ee0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d106      	bne.n	8006dc2 <tcp_abandon+0x36>
 8006db4:	4b4c      	ldr	r3, [pc, #304]	; (8006ee8 <tcp_abandon+0x15c>)
 8006db6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006dba:	494e      	ldr	r1, [pc, #312]	; (8006ef4 <tcp_abandon+0x168>)
 8006dbc:	484c      	ldr	r0, [pc, #304]	; (8006ef0 <tcp_abandon+0x164>)
 8006dbe:	f008 f97d 	bl	800f0bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7d1b      	ldrb	r3, [r3, #20]
 8006dc6:	2b0a      	cmp	r3, #10
 8006dc8:	d107      	bne.n	8006dda <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	484a      	ldr	r0, [pc, #296]	; (8006ef8 <tcp_abandon+0x16c>)
 8006dce:	f000 ffc3 	bl	8007d58 <tcp_pcb_remove>
    tcp_free(pcb);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fdb0 	bl	8006938 <tcp_free>
 8006dd8:	e082      	b.n	8006ee0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7d1b      	ldrb	r3, [r3, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d126      	bne.n	8006e52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8adb      	ldrh	r3, [r3, #22]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d02e      	beq.n	8006e6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e0c:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <tcp_abandon+0x170>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d105      	bne.n	8006e22 <tcp_abandon+0x96>
 8006e16:	4b39      	ldr	r3, [pc, #228]	; (8006efc <tcp_abandon+0x170>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	4a37      	ldr	r2, [pc, #220]	; (8006efc <tcp_abandon+0x170>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	e013      	b.n	8006e4a <tcp_abandon+0xbe>
 8006e22:	4b36      	ldr	r3, [pc, #216]	; (8006efc <tcp_abandon+0x170>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	e00c      	b.n	8006e44 <tcp_abandon+0xb8>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d104      	bne.n	8006e3e <tcp_abandon+0xb2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	60da      	str	r2, [r3, #12]
 8006e3c:	e005      	b.n	8006e4a <tcp_abandon+0xbe>
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1ef      	bne.n	8006e2a <tcp_abandon+0x9e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	60da      	str	r2, [r3, #12]
 8006e50:	e00b      	b.n	8006e6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8adb      	ldrh	r3, [r3, #22]
 8006e5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4828      	ldr	r0, [pc, #160]	; (8006f00 <tcp_abandon+0x174>)
 8006e60:	f000 ff7a 	bl	8007d58 <tcp_pcb_remove>
 8006e64:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <tcp_abandon+0x178>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fd1c 	bl	80078b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fd13 	bl	80078b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fd0a 	bl	80078b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00e      	beq.n	8006ec4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	8b12      	ldrh	r2, [r2, #24]
 8006eb0:	9202      	str	r2, [sp, #8]
 8006eb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006eb4:	9201      	str	r2, [sp, #4]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f004 fcc2 	bl	800b848 <tcp_rst>
    }
    last_state = pcb->state;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7d1b      	ldrb	r3, [r3, #20]
 8006ec8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fd34 	bl	8006938 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <tcp_abandon+0x154>
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f06f 010c 	mvn.w	r1, #12
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	4798      	blx	r3
  }
}
 8006ee0:	3728      	adds	r7, #40	; 0x28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	08010fc4 	.word	0x08010fc4
 8006eec:	08011108 	.word	0x08011108
 8006ef0:	08011008 	.word	0x08011008
 8006ef4:	08011124 	.word	0x08011124
 8006ef8:	2000a964 	.word	0x2000a964
 8006efc:	2000a958 	.word	0x2000a958
 8006f00:	2000a960 	.word	0x2000a960
 8006f04:	2000a968 	.word	0x2000a968

08006f08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006f10:	2101      	movs	r1, #1
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff ff3a 	bl	8006d8c <tcp_abandon>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <tcp_update_rcv_ann_wnd+0x1c>
 8006f2e:	4b25      	ldr	r3, [pc, #148]	; (8006fc4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006f30:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006f34:	4924      	ldr	r1, [pc, #144]	; (8006fc8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006f36:	4825      	ldr	r0, [pc, #148]	; (8006fcc <tcp_update_rcv_ann_wnd+0xac>)
 8006f38:	f008 f8c0 	bl	800f0bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006f44:	4413      	add	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006f50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006f54:	bf28      	it	cs
 8006f56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	db08      	blt.n	8006f78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	e020      	b.n	8006fba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dd03      	ble.n	8006f8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f8c:	e014      	b.n	8006fb8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa0:	d306      	bcc.n	8006fb0 <tcp_update_rcv_ann_wnd+0x90>
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006fa4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006fa8:	4909      	ldr	r1, [pc, #36]	; (8006fd0 <tcp_update_rcv_ann_wnd+0xb0>)
 8006faa:	4808      	ldr	r0, [pc, #32]	; (8006fcc <tcp_update_rcv_ann_wnd+0xac>)
 8006fac:	f008 f886 	bl	800f0bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006fb8:	2300      	movs	r3, #0
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	08010fc4 	.word	0x08010fc4
 8006fc8:	08011220 	.word	0x08011220
 8006fcc:	08011008 	.word	0x08011008
 8006fd0:	08011244 	.word	0x08011244

08006fd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <tcp_recved+0x22>
 8006fe6:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <tcp_recved+0x90>)
 8006fe8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006fec:	491e      	ldr	r1, [pc, #120]	; (8007068 <tcp_recved+0x94>)
 8006fee:	481f      	ldr	r0, [pc, #124]	; (800706c <tcp_recved+0x98>)
 8006ff0:	f008 f864 	bl	800f0bc <iprintf>
 8006ff4:	e032      	b.n	800705c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7d1b      	ldrb	r3, [r3, #20]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d106      	bne.n	800700c <tcp_recved+0x38>
 8006ffe:	4b19      	ldr	r3, [pc, #100]	; (8007064 <tcp_recved+0x90>)
 8007000:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007004:	491a      	ldr	r1, [pc, #104]	; (8007070 <tcp_recved+0x9c>)
 8007006:	4819      	ldr	r0, [pc, #100]	; (800706c <tcp_recved+0x98>)
 8007008:	f008 f858 	bl	800f0bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007010:	887b      	ldrh	r3, [r7, #2]
 8007012:	4413      	add	r3, r2
 8007014:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007016:	89fb      	ldrh	r3, [r7, #14]
 8007018:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800701c:	d804      	bhi.n	8007028 <tcp_recved+0x54>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007022:	89fa      	ldrh	r2, [r7, #14]
 8007024:	429a      	cmp	r2, r3
 8007026:	d204      	bcs.n	8007032 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800702e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007030:	e002      	b.n	8007038 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	89fa      	ldrh	r2, [r7, #14]
 8007036:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ff71 	bl	8006f20 <tcp_update_rcv_ann_wnd>
 800703e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007046:	d309      	bcc.n	800705c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	8b5b      	ldrh	r3, [r3, #26]
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	b29a      	uxth	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f003 fe42 	bl	800ace0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	08010fc4 	.word	0x08010fc4
 8007068:	08011260 	.word	0x08011260
 800706c:	08011008 	.word	0x08011008
 8007070:	08011278 	.word	0x08011278

08007074 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007074:	b5b0      	push	{r4, r5, r7, lr}
 8007076:	b090      	sub	sp, #64	; 0x40
 8007078:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007080:	4b94      	ldr	r3, [pc, #592]	; (80072d4 <tcp_slowtmr+0x260>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	4a93      	ldr	r2, [pc, #588]	; (80072d4 <tcp_slowtmr+0x260>)
 8007088:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800708a:	4b93      	ldr	r3, [pc, #588]	; (80072d8 <tcp_slowtmr+0x264>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	4b91      	ldr	r3, [pc, #580]	; (80072d8 <tcp_slowtmr+0x264>)
 8007094:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800709a:	4b90      	ldr	r3, [pc, #576]	; (80072dc <tcp_slowtmr+0x268>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80070a0:	e29f      	b.n	80075e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	7d1b      	ldrb	r3, [r3, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <tcp_slowtmr+0x44>
 80070aa:	4b8d      	ldr	r3, [pc, #564]	; (80072e0 <tcp_slowtmr+0x26c>)
 80070ac:	f240 42be 	movw	r2, #1214	; 0x4be
 80070b0:	498c      	ldr	r1, [pc, #560]	; (80072e4 <tcp_slowtmr+0x270>)
 80070b2:	488d      	ldr	r0, [pc, #564]	; (80072e8 <tcp_slowtmr+0x274>)
 80070b4:	f008 f802 	bl	800f0bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	7d1b      	ldrb	r3, [r3, #20]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d106      	bne.n	80070ce <tcp_slowtmr+0x5a>
 80070c0:	4b87      	ldr	r3, [pc, #540]	; (80072e0 <tcp_slowtmr+0x26c>)
 80070c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80070c6:	4989      	ldr	r1, [pc, #548]	; (80072ec <tcp_slowtmr+0x278>)
 80070c8:	4887      	ldr	r0, [pc, #540]	; (80072e8 <tcp_slowtmr+0x274>)
 80070ca:	f007 fff7 	bl	800f0bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	7d1b      	ldrb	r3, [r3, #20]
 80070d2:	2b0a      	cmp	r3, #10
 80070d4:	d106      	bne.n	80070e4 <tcp_slowtmr+0x70>
 80070d6:	4b82      	ldr	r3, [pc, #520]	; (80072e0 <tcp_slowtmr+0x26c>)
 80070d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80070dc:	4984      	ldr	r1, [pc, #528]	; (80072f0 <tcp_slowtmr+0x27c>)
 80070de:	4882      	ldr	r0, [pc, #520]	; (80072e8 <tcp_slowtmr+0x274>)
 80070e0:	f007 ffec 	bl	800f0bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	7f9a      	ldrb	r2, [r3, #30]
 80070e8:	4b7b      	ldr	r3, [pc, #492]	; (80072d8 <tcp_slowtmr+0x264>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d105      	bne.n	80070fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80070fa:	e272      	b.n	80075e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80070fc:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <tcp_slowtmr+0x264>)
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	7d1b      	ldrb	r3, [r3, #20]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d10a      	bne.n	800712e <tcp_slowtmr+0xba>
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800711e:	2b05      	cmp	r3, #5
 8007120:	d905      	bls.n	800712e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007126:	3301      	adds	r3, #1
 8007128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800712c:	e11e      	b.n	800736c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007134:	2b0b      	cmp	r3, #11
 8007136:	d905      	bls.n	8007144 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713c:	3301      	adds	r3, #1
 800713e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007142:	e113      	b.n	800736c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800714a:	2b00      	cmp	r3, #0
 800714c:	d075      	beq.n	800723a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	2b00      	cmp	r3, #0
 8007154:	d006      	beq.n	8007164 <tcp_slowtmr+0xf0>
 8007156:	4b62      	ldr	r3, [pc, #392]	; (80072e0 <tcp_slowtmr+0x26c>)
 8007158:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800715c:	4965      	ldr	r1, [pc, #404]	; (80072f4 <tcp_slowtmr+0x280>)
 800715e:	4862      	ldr	r0, [pc, #392]	; (80072e8 <tcp_slowtmr+0x274>)
 8007160:	f007 ffac 	bl	800f0bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <tcp_slowtmr+0x106>
 800716c:	4b5c      	ldr	r3, [pc, #368]	; (80072e0 <tcp_slowtmr+0x26c>)
 800716e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007172:	4961      	ldr	r1, [pc, #388]	; (80072f8 <tcp_slowtmr+0x284>)
 8007174:	485c      	ldr	r0, [pc, #368]	; (80072e8 <tcp_slowtmr+0x274>)
 8007176:	f007 ffa1 	bl	800f0bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007180:	2b0b      	cmp	r3, #11
 8007182:	d905      	bls.n	8007190 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007188:	3301      	adds	r3, #1
 800718a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800718e:	e0ed      	b.n	800736c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007196:	3b01      	subs	r3, #1
 8007198:	4a58      	ldr	r2, [pc, #352]	; (80072fc <tcp_slowtmr+0x288>)
 800719a:	5cd3      	ldrb	r3, [r2, r3]
 800719c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071a4:	7c7a      	ldrb	r2, [r7, #17]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d907      	bls.n	80071ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071b0:	3301      	adds	r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071c0:	7c7a      	ldrb	r2, [r7, #17]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	f200 80d2 	bhi.w	800736c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80071c8:	2301      	movs	r3, #1
 80071ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d108      	bne.n	80071e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80071d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071d8:	f004 fc2a 	bl	800ba30 <tcp_zero_window_probe>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d014      	beq.n	800720c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80071e2:	2300      	movs	r3, #0
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	e011      	b.n	800720c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ee:	4619      	mov	r1, r3
 80071f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071f2:	f003 faef 	bl	800a7d4 <tcp_split_unsent_seg>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d107      	bne.n	800720c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80071fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071fe:	f003 fd6f 	bl	800ace0 <tcp_output>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80ac 	beq.w	800736c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007222:	2b06      	cmp	r3, #6
 8007224:	f200 80a2 	bhi.w	800736c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800722e:	3301      	adds	r3, #1
 8007230:	b2da      	uxtb	r2, r3
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007238:	e098      	b.n	800736c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007240:	2b00      	cmp	r3, #0
 8007242:	db0f      	blt.n	8007264 <tcp_slowtmr+0x1f0>
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800724a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800724e:	4293      	cmp	r3, r2
 8007250:	d008      	beq.n	8007264 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007258:	b29b      	uxth	r3, r3
 800725a:	3301      	adds	r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	b21a      	sxth	r2, r3
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007270:	429a      	cmp	r2, r3
 8007272:	db7b      	blt.n	800736c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007276:	f004 f825 	bl	800b2c4 <tcp_rexmit_rto_prepare>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <tcp_slowtmr+0x21c>
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	2b00      	cmp	r3, #0
 8007286:	d171      	bne.n	800736c <tcp_slowtmr+0x2f8>
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d06d      	beq.n	800736c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	7d1b      	ldrb	r3, [r3, #20]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d03a      	beq.n	800730e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800729e:	2b0c      	cmp	r3, #12
 80072a0:	bf28      	it	cs
 80072a2:	230c      	movcs	r3, #12
 80072a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80072ac:	10db      	asrs	r3, r3, #3
 80072ae:	b21b      	sxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80072b8:	4413      	add	r3, r2
 80072ba:	7efa      	ldrb	r2, [r7, #27]
 80072bc:	4910      	ldr	r1, [pc, #64]	; (8007300 <tcp_slowtmr+0x28c>)
 80072be:	5c8a      	ldrb	r2, [r1, r2]
 80072c0:	4093      	lsls	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80072ca:	4293      	cmp	r3, r2
 80072cc:	dc1a      	bgt.n	8007304 <tcp_slowtmr+0x290>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	b21a      	sxth	r2, r3
 80072d2:	e019      	b.n	8007308 <tcp_slowtmr+0x294>
 80072d4:	2000a954 	.word	0x2000a954
 80072d8:	2000a96a 	.word	0x2000a96a
 80072dc:	2000a960 	.word	0x2000a960
 80072e0:	08010fc4 	.word	0x08010fc4
 80072e4:	08011308 	.word	0x08011308
 80072e8:	08011008 	.word	0x08011008
 80072ec:	08011334 	.word	0x08011334
 80072f0:	08011360 	.word	0x08011360
 80072f4:	08011390 	.word	0x08011390
 80072f8:	080113c4 	.word	0x080113c4
 80072fc:	08012f9c 	.word	0x08012f9c
 8007300:	08012f8c 	.word	0x08012f8c
 8007304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	2200      	movs	r2, #0
 8007312:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007320:	4293      	cmp	r3, r2
 8007322:	bf28      	it	cs
 8007324:	4613      	movcs	r3, r2
 8007326:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007328:	8a7b      	ldrh	r3, [r7, #18]
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	429a      	cmp	r2, r3
 8007344:	d206      	bcs.n	8007354 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	2200      	movs	r2, #0
 8007362:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007368:	f004 f81c 	bl	800b3a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	7d1b      	ldrb	r3, [r3, #20]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d111      	bne.n	8007398 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	8b5b      	ldrh	r3, [r3, #26]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007380:	4b9d      	ldr	r3, [pc, #628]	; (80075f8 <tcp_slowtmr+0x584>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b28      	cmp	r3, #40	; 0x28
 800738c:	d904      	bls.n	8007398 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800738e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007392:	3301      	adds	r3, #1
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	7a5b      	ldrb	r3, [r3, #9]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d04c      	beq.n	800743e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d003      	beq.n	80073b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80073b0:	2b07      	cmp	r3, #7
 80073b2:	d144      	bne.n	800743e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073b4:	4b90      	ldr	r3, [pc, #576]	; (80075f8 <tcp_slowtmr+0x584>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80073c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80073cc:	498b      	ldr	r1, [pc, #556]	; (80075fc <tcp_slowtmr+0x588>)
 80073ce:	fba1 1303 	umull	r1, r3, r1, r3
 80073d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d90a      	bls.n	80073ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80073d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073dc:	3301      	adds	r3, #1
 80073de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80073e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073e6:	3301      	adds	r3, #1
 80073e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073ec:	e027      	b.n	800743e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073ee:	4b82      	ldr	r3, [pc, #520]	; (80075f8 <tcp_slowtmr+0x584>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007404:	4618      	mov	r0, r3
 8007406:	4b7e      	ldr	r3, [pc, #504]	; (8007600 <tcp_slowtmr+0x58c>)
 8007408:	fb00 f303 	mul.w	r3, r0, r3
 800740c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800740e:	497b      	ldr	r1, [pc, #492]	; (80075fc <tcp_slowtmr+0x588>)
 8007410:	fba1 1303 	umull	r1, r3, r1, r3
 8007414:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007416:	429a      	cmp	r2, r3
 8007418:	d911      	bls.n	800743e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800741a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800741c:	f004 fac8 	bl	800b9b0 <tcp_keepalive>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007426:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007434:	3301      	adds	r3, #1
 8007436:	b2da      	uxtb	r2, r3
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007442:	2b00      	cmp	r3, #0
 8007444:	d011      	beq.n	800746a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007446:	4b6c      	ldr	r3, [pc, #432]	; (80075f8 <tcp_slowtmr+0x584>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007456:	4619      	mov	r1, r3
 8007458:	460b      	mov	r3, r1
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	440b      	add	r3, r1
 800745e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007460:	429a      	cmp	r2, r3
 8007462:	d302      	bcc.n	800746a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007466:	f000 fddb 	bl	8008020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	7d1b      	ldrb	r3, [r3, #20]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d10b      	bne.n	800748a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007472:	4b61      	ldr	r3, [pc, #388]	; (80075f8 <tcp_slowtmr+0x584>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b28      	cmp	r3, #40	; 0x28
 800747e:	d904      	bls.n	800748a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007484:	3301      	adds	r3, #1
 8007486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	2b09      	cmp	r3, #9
 8007490:	d10b      	bne.n	80074aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007492:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <tcp_slowtmr+0x584>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2bf0      	cmp	r3, #240	; 0xf0
 800749e:	d904      	bls.n	80074aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80074a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a4:	3301      	adds	r3, #1
 80074a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80074aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d060      	beq.n	8007574 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80074ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074bc:	f000 fbfc 	bl	8007cb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d010      	beq.n	80074e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80074c6:	4b4f      	ldr	r3, [pc, #316]	; (8007604 <tcp_slowtmr+0x590>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d106      	bne.n	80074de <tcp_slowtmr+0x46a>
 80074d0:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <tcp_slowtmr+0x594>)
 80074d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80074d6:	494d      	ldr	r1, [pc, #308]	; (800760c <tcp_slowtmr+0x598>)
 80074d8:	484d      	ldr	r0, [pc, #308]	; (8007610 <tcp_slowtmr+0x59c>)
 80074da:	f007 fdef 	bl	800f0bc <iprintf>
        prev->next = pcb->next;
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	60da      	str	r2, [r3, #12]
 80074e6:	e00f      	b.n	8007508 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80074e8:	4b46      	ldr	r3, [pc, #280]	; (8007604 <tcp_slowtmr+0x590>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d006      	beq.n	8007500 <tcp_slowtmr+0x48c>
 80074f2:	4b45      	ldr	r3, [pc, #276]	; (8007608 <tcp_slowtmr+0x594>)
 80074f4:	f240 5271 	movw	r2, #1393	; 0x571
 80074f8:	4946      	ldr	r1, [pc, #280]	; (8007614 <tcp_slowtmr+0x5a0>)
 80074fa:	4845      	ldr	r0, [pc, #276]	; (8007610 <tcp_slowtmr+0x59c>)
 80074fc:	f007 fdde 	bl	800f0bc <iprintf>
        tcp_active_pcbs = pcb->next;
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a3f      	ldr	r2, [pc, #252]	; (8007604 <tcp_slowtmr+0x590>)
 8007506:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800750c:	2b00      	cmp	r3, #0
 800750e:	d013      	beq.n	8007538 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007518:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	3304      	adds	r3, #4
 800751e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007520:	8ad2      	ldrh	r2, [r2, #22]
 8007522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007524:	8b09      	ldrh	r1, [r1, #24]
 8007526:	9102      	str	r1, [sp, #8]
 8007528:	9201      	str	r2, [sp, #4]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	462b      	mov	r3, r5
 800752e:	4622      	mov	r2, r4
 8007530:	4601      	mov	r1, r0
 8007532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007534:	f004 f988 	bl	800b848 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	7d1b      	ldrb	r3, [r3, #20]
 8007542:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800754e:	6838      	ldr	r0, [r7, #0]
 8007550:	f7ff f9f2 	bl	8006938 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007554:	4b30      	ldr	r3, [pc, #192]	; (8007618 <tcp_slowtmr+0x5a4>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <tcp_slowtmr+0x4f6>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f06f 010c 	mvn.w	r1, #12
 8007566:	68b8      	ldr	r0, [r7, #8]
 8007568:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800756a:	4b2b      	ldr	r3, [pc, #172]	; (8007618 <tcp_slowtmr+0x5a4>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d037      	beq.n	80075e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007572:	e590      	b.n	8007096 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	7f1b      	ldrb	r3, [r3, #28]
 8007582:	3301      	adds	r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	7f1a      	ldrb	r2, [r3, #28]
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	7f5b      	ldrb	r3, [r3, #29]
 8007592:	429a      	cmp	r2, r3
 8007594:	d325      	bcc.n	80075e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	2200      	movs	r2, #0
 800759a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800759c:	4b1e      	ldr	r3, [pc, #120]	; (8007618 <tcp_slowtmr+0x5a4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <tcp_slowtmr+0x550>
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b4:	6912      	ldr	r2, [r2, #16]
 80075b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80075c2:	e002      	b.n	80075ca <tcp_slowtmr+0x556>
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80075ca:	4b13      	ldr	r3, [pc, #76]	; (8007618 <tcp_slowtmr+0x5a4>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d000      	beq.n	80075d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80075d2:	e560      	b.n	8007096 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80075d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80075dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075de:	f003 fb7f 	bl	800ace0 <tcp_output>
  while (pcb != NULL) {
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f47f ad5c 	bne.w	80070a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80075ee:	4b0b      	ldr	r3, [pc, #44]	; (800761c <tcp_slowtmr+0x5a8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80075f4:	e067      	b.n	80076c6 <tcp_slowtmr+0x652>
 80075f6:	bf00      	nop
 80075f8:	2000a954 	.word	0x2000a954
 80075fc:	10624dd3 	.word	0x10624dd3
 8007600:	000124f8 	.word	0x000124f8
 8007604:	2000a960 	.word	0x2000a960
 8007608:	08010fc4 	.word	0x08010fc4
 800760c:	080113fc 	.word	0x080113fc
 8007610:	08011008 	.word	0x08011008
 8007614:	08011428 	.word	0x08011428
 8007618:	2000a968 	.word	0x2000a968
 800761c:	2000a964 	.word	0x2000a964
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	7d1b      	ldrb	r3, [r3, #20]
 8007624:	2b0a      	cmp	r3, #10
 8007626:	d006      	beq.n	8007636 <tcp_slowtmr+0x5c2>
 8007628:	4b2b      	ldr	r3, [pc, #172]	; (80076d8 <tcp_slowtmr+0x664>)
 800762a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800762e:	492b      	ldr	r1, [pc, #172]	; (80076dc <tcp_slowtmr+0x668>)
 8007630:	482b      	ldr	r0, [pc, #172]	; (80076e0 <tcp_slowtmr+0x66c>)
 8007632:	f007 fd43 	bl	800f0bc <iprintf>
    pcb_remove = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800763c:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <tcp_slowtmr+0x670>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2bf0      	cmp	r3, #240	; 0xf0
 8007648:	d904      	bls.n	8007654 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800764a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800764e:	3301      	adds	r3, #1
 8007650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007658:	2b00      	cmp	r3, #0
 800765a:	d02f      	beq.n	80076bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800765c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800765e:	f000 fb2b 	bl	8007cb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d010      	beq.n	800768a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007668:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <tcp_slowtmr+0x674>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766e:	429a      	cmp	r2, r3
 8007670:	d106      	bne.n	8007680 <tcp_slowtmr+0x60c>
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <tcp_slowtmr+0x664>)
 8007674:	f240 52af 	movw	r2, #1455	; 0x5af
 8007678:	491c      	ldr	r1, [pc, #112]	; (80076ec <tcp_slowtmr+0x678>)
 800767a:	4819      	ldr	r0, [pc, #100]	; (80076e0 <tcp_slowtmr+0x66c>)
 800767c:	f007 fd1e 	bl	800f0bc <iprintf>
        prev->next = pcb->next;
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	60da      	str	r2, [r3, #12]
 8007688:	e00f      	b.n	80076aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800768a:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <tcp_slowtmr+0x674>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007690:	429a      	cmp	r2, r3
 8007692:	d006      	beq.n	80076a2 <tcp_slowtmr+0x62e>
 8007694:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <tcp_slowtmr+0x664>)
 8007696:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800769a:	4915      	ldr	r1, [pc, #84]	; (80076f0 <tcp_slowtmr+0x67c>)
 800769c:	4810      	ldr	r0, [pc, #64]	; (80076e0 <tcp_slowtmr+0x66c>)
 800769e:	f007 fd0d 	bl	800f0bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80076a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <tcp_slowtmr+0x674>)
 80076a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80076b4:	69f8      	ldr	r0, [r7, #28]
 80076b6:	f7ff f93f 	bl	8006938 <tcp_free>
 80076ba:	e004      	b.n	80076c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1a9      	bne.n	8007620 <tcp_slowtmr+0x5ac>
    }
  }
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	3730      	adds	r7, #48	; 0x30
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bdb0      	pop	{r4, r5, r7, pc}
 80076d6:	bf00      	nop
 80076d8:	08010fc4 	.word	0x08010fc4
 80076dc:	08011454 	.word	0x08011454
 80076e0:	08011008 	.word	0x08011008
 80076e4:	2000a954 	.word	0x2000a954
 80076e8:	2000a964 	.word	0x2000a964
 80076ec:	08011484 	.word	0x08011484
 80076f0:	080114ac 	.word	0x080114ac

080076f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80076fa:	4b2d      	ldr	r3, [pc, #180]	; (80077b0 <tcp_fasttmr+0xbc>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <tcp_fasttmr+0xbc>)
 8007704:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007706:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <tcp_fasttmr+0xc0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800770c:	e048      	b.n	80077a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7f9a      	ldrb	r2, [r3, #30]
 8007712:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <tcp_fasttmr+0xbc>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d03f      	beq.n	800779a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800771a:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <tcp_fasttmr+0xbc>)
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8b5b      	ldrh	r3, [r3, #26]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d010      	beq.n	8007750 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8b5b      	ldrh	r3, [r3, #26]
 8007732:	f043 0302 	orr.w	r3, r3, #2
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f003 facf 	bl	800ace0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8b5b      	ldrh	r3, [r3, #26]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8b5b      	ldrh	r3, [r3, #26]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8b5b      	ldrh	r3, [r3, #26]
 8007760:	f023 0308 	bic.w	r3, r3, #8
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fa78 	bl	8006c60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <tcp_fasttmr+0xc4>)
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f819 	bl	80077bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <tcp_fasttmr+0xc4>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d000      	beq.n	8007794 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007792:	e7b8      	b.n	8007706 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	e002      	b.n	80077a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1b3      	bne.n	800770e <tcp_fasttmr+0x1a>
    }
  }
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	2000a96a 	.word	0x2000a96a
 80077b4:	2000a960 	.word	0x2000a960
 80077b8:	2000a968 	.word	0x2000a968

080077bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <tcp_process_refused_data+0x22>
 80077ca:	4b37      	ldr	r3, [pc, #220]	; (80078a8 <tcp_process_refused_data+0xec>)
 80077cc:	f240 6209 	movw	r2, #1545	; 0x609
 80077d0:	4936      	ldr	r1, [pc, #216]	; (80078ac <tcp_process_refused_data+0xf0>)
 80077d2:	4837      	ldr	r0, [pc, #220]	; (80078b0 <tcp_process_refused_data+0xf4>)
 80077d4:	f007 fc72 	bl	800f0bc <iprintf>
 80077d8:	f06f 030f 	mvn.w	r3, #15
 80077dc:	e060      	b.n	80078a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e2:	7b5b      	ldrb	r3, [r3, #13]
 80077e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <tcp_process_refused_data+0x58>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6918      	ldr	r0, [r3, #16]
 8007806:	2300      	movs	r3, #0
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	47a0      	blx	r4
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]
 8007812:	e007      	b.n	8007824 <tcp_process_refused_data+0x68>
 8007814:	2300      	movs	r3, #0
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	2000      	movs	r0, #0
 800781c:	f000 f8a4 	bl	8007968 <tcp_recv_null>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d12a      	bne.n	8007882 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d033      	beq.n	800789e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800783e:	d005      	beq.n	800784c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	3301      	adds	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <tcp_process_refused_data+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6918      	ldr	r0, [r3, #16]
 8007860:	2300      	movs	r3, #0
 8007862:	2200      	movs	r2, #0
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	47a0      	blx	r4
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e001      	b.n	8007872 <tcp_process_refused_data+0xb6>
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007876:	f113 0f0d 	cmn.w	r3, #13
 800787a:	d110      	bne.n	800789e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800787c:	f06f 030c 	mvn.w	r3, #12
 8007880:	e00e      	b.n	80078a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007886:	f113 0f0d 	cmn.w	r3, #13
 800788a:	d102      	bne.n	8007892 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800788c:	f06f 030c 	mvn.w	r3, #12
 8007890:	e006      	b.n	80078a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007898:	f06f 0304 	mvn.w	r3, #4
 800789c:	e000      	b.n	80078a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd90      	pop	{r4, r7, pc}
 80078a8:	08010fc4 	.word	0x08010fc4
 80078ac:	080114d4 	.word	0x080114d4
 80078b0:	08011008 	.word	0x08011008

080078b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80078bc:	e007      	b.n	80078ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f80a 	bl	80078de <tcp_seg_free>
    seg = next;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f4      	bne.n	80078be <tcp_segs_free+0xa>
  }
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00c      	beq.n	8007906 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fcdb 	bl	80062b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	2003      	movs	r0, #3
 8007902:	f7fd fe61 	bl	80055c8 <memp_free>
  }
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <tcp_seg_copy+0x1c>
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <tcp_seg_copy+0x4c>)
 8007920:	f240 6282 	movw	r2, #1666	; 0x682
 8007924:	490e      	ldr	r1, [pc, #56]	; (8007960 <tcp_seg_copy+0x50>)
 8007926:	480f      	ldr	r0, [pc, #60]	; (8007964 <tcp_seg_copy+0x54>)
 8007928:	f007 fbc8 	bl	800f0bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800792c:	2003      	movs	r0, #3
 800792e:	f7fd fddb 	bl	80054e8 <memp_malloc>
 8007932:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <tcp_seg_copy+0x2e>
    return NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	e00a      	b.n	8007954 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800793e:	2210      	movs	r2, #16
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f007 fb8a 	bl	800f05c <memcpy>
  pbuf_ref(cseg->p);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fd51 	bl	80063f4 <pbuf_ref>
  return cseg;
 8007952:	68fb      	ldr	r3, [r7, #12]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	08010fc4 	.word	0x08010fc4
 8007960:	08011518 	.word	0x08011518
 8007964:	08011008 	.word	0x08011008

08007968 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <tcp_recv_null+0x28>
 800797c:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <tcp_recv_null+0x60>)
 800797e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007982:	4912      	ldr	r1, [pc, #72]	; (80079cc <tcp_recv_null+0x64>)
 8007984:	4812      	ldr	r0, [pc, #72]	; (80079d0 <tcp_recv_null+0x68>)
 8007986:	f007 fb99 	bl	800f0bc <iprintf>
 800798a:	f06f 030f 	mvn.w	r3, #15
 800798e:	e016      	b.n	80079be <tcp_recv_null+0x56>

  if (p != NULL) {
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	891b      	ldrh	r3, [r3, #8]
 800799a:	4619      	mov	r1, r3
 800799c:	68b8      	ldr	r0, [r7, #8]
 800799e:	f7ff fb19 	bl	8006fd4 <tcp_recved>
    pbuf_free(p);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fe fc86 	bl	80062b4 <pbuf_free>
 80079a8:	e008      	b.n	80079bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80079aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80079b2:	68b8      	ldr	r0, [r7, #8]
 80079b4:	f7ff f9be 	bl	8006d34 <tcp_close>
 80079b8:	4603      	mov	r3, r0
 80079ba:	e000      	b.n	80079be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	08010fc4 	.word	0x08010fc4
 80079cc:	08011534 	.word	0x08011534
 80079d0:	08011008 	.word	0x08011008

080079d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80079de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	db01      	blt.n	80079ea <tcp_kill_prio+0x16>
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	e000      	b.n	80079ec <tcp_kill_prio+0x18>
 80079ea:	237f      	movs	r3, #127	; 0x7f
 80079ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d034      	beq.n	8007a5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a02:	4b19      	ldr	r3, [pc, #100]	; (8007a68 <tcp_kill_prio+0x94>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e01f      	b.n	8007a4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	7d5b      	ldrb	r3, [r3, #21]
 8007a0e:	7afa      	ldrb	r2, [r7, #11]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d80c      	bhi.n	8007a2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007a18:	7afa      	ldrb	r2, [r7, #11]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d112      	bne.n	8007a44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <tcp_kill_prio+0x98>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d80a      	bhi.n	8007a44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <tcp_kill_prio+0x98>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	7d5b      	ldrb	r3, [r3, #21]
 8007a42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1dc      	bne.n	8007a0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a56:	6938      	ldr	r0, [r7, #16]
 8007a58:	f7ff fa56 	bl	8006f08 <tcp_abort>
 8007a5c:	e000      	b.n	8007a60 <tcp_kill_prio+0x8c>
    return;
 8007a5e:	bf00      	nop
  }
}
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000a960 	.word	0x2000a960
 8007a6c:	2000a954 	.word	0x2000a954

08007a70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d009      	beq.n	8007a94 <tcp_kill_state+0x24>
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	2b09      	cmp	r3, #9
 8007a84:	d006      	beq.n	8007a94 <tcp_kill_state+0x24>
 8007a86:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <tcp_kill_state+0x80>)
 8007a88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007a8c:	4919      	ldr	r1, [pc, #100]	; (8007af4 <tcp_kill_state+0x84>)
 8007a8e:	481a      	ldr	r0, [pc, #104]	; (8007af8 <tcp_kill_state+0x88>)
 8007a90:	f007 fb14 	bl	800f0bc <iprintf>

  inactivity = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a9c:	4b17      	ldr	r3, [pc, #92]	; (8007afc <tcp_kill_state+0x8c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	e017      	b.n	8007ad4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	7d1b      	ldrb	r3, [r3, #20]
 8007aa8:	79fa      	ldrb	r2, [r7, #7]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d10f      	bne.n	8007ace <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <tcp_kill_state+0x90>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d807      	bhi.n	8007ace <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007abe:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <tcp_kill_state+0x90>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e4      	bne.n	8007aa4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f7ff f952 	bl	8006d8c <tcp_abandon>
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	08010fc4 	.word	0x08010fc4
 8007af4:	08011550 	.word	0x08011550
 8007af8:	08011008 	.word	0x08011008
 8007afc:	2000a960 	.word	0x2000a960
 8007b00:	2000a954 	.word	0x2000a954

08007b04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <tcp_kill_timewait+0x58>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	e012      	b.n	8007b40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b1a:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <tcp_kill_timewait+0x5c>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d807      	bhi.n	8007b3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <tcp_kill_timewait+0x5c>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e9      	bne.n	8007b1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b4c:	68b8      	ldr	r0, [r7, #8]
 8007b4e:	f7ff f9db 	bl	8006f08 <tcp_abort>
  }
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000a964 	.word	0x2000a964
 8007b60:	2000a954 	.word	0x2000a954

08007b64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007b6a:	4b10      	ldr	r3, [pc, #64]	; (8007bac <tcp_handle_closepend+0x48>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b70:	e014      	b.n	8007b9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8b5b      	ldrh	r3, [r3, #26]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8b5b      	ldrh	r3, [r3, #26]
 8007b88:	f023 0308 	bic.w	r3, r3, #8
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff f864 	bl	8006c60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e7      	bne.n	8007b72 <tcp_handle_closepend+0xe>
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	2000a960 	.word	0x2000a960

08007bb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007bba:	2001      	movs	r0, #1
 8007bbc:	f7fd fc94 	bl	80054e8 <memp_malloc>
 8007bc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d126      	bne.n	8007c16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007bc8:	f7ff ffcc 	bl	8007b64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007bcc:	f7ff ff9a 	bl	8007b04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	f7fd fc89 	bl	80054e8 <memp_malloc>
 8007bd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d11b      	bne.n	8007c16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007bde:	2009      	movs	r0, #9
 8007be0:	f7ff ff46 	bl	8007a70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007be4:	2001      	movs	r0, #1
 8007be6:	f7fd fc7f 	bl	80054e8 <memp_malloc>
 8007bea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d111      	bne.n	8007c16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007bf2:	2008      	movs	r0, #8
 8007bf4:	f7ff ff3c 	bl	8007a70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f7fd fc75 	bl	80054e8 <memp_malloc>
 8007bfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d107      	bne.n	8007c16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff fee3 	bl	80079d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c0e:	2001      	movs	r0, #1
 8007c10:	f7fd fc6a 	bl	80054e8 <memp_malloc>
 8007c14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d03f      	beq.n	8007c9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007c1c:	229c      	movs	r2, #156	; 0x9c
 8007c1e:	2100      	movs	r1, #0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f007 fa43 	bl	800f0ac <memset>
    pcb->prio = prio;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	79fa      	ldrb	r2, [r7, #7]
 8007c2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007c32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	22ff      	movs	r2, #255	; 0xff
 8007c4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007c52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2206      	movs	r2, #6
 8007c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2206      	movs	r2, #6
 8007c60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007c72:	4b0d      	ldr	r3, [pc, #52]	; (8007ca8 <tcp_alloc+0xf8>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <tcp_alloc+0xfc>)
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007c88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <tcp_alloc+0x100>)
 8007c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <tcp_alloc+0x104>)
 8007c98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2000a954 	.word	0x2000a954
 8007cac:	2000a96a 	.word	0x2000a96a
 8007cb0:	08007969 	.word	0x08007969
 8007cb4:	006ddd00 	.word	0x006ddd00

08007cb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <tcp_pcb_purge+0x1e>
 8007cc6:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <tcp_pcb_purge+0x94>)
 8007cc8:	f640 0251 	movw	r2, #2129	; 0x851
 8007ccc:	4920      	ldr	r1, [pc, #128]	; (8007d50 <tcp_pcb_purge+0x98>)
 8007cce:	4821      	ldr	r0, [pc, #132]	; (8007d54 <tcp_pcb_purge+0x9c>)
 8007cd0:	f007 f9f4 	bl	800f0bc <iprintf>
 8007cd4:	e037      	b.n	8007d46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7d1b      	ldrb	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d033      	beq.n	8007d46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007ce2:	2b0a      	cmp	r3, #10
 8007ce4:	d02f      	beq.n	8007d46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d02b      	beq.n	8007d46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fada 	bl	80062b4 <pbuf_free>
      pcb->refused_data = NULL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f986 	bl	8008020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff fdc7 	bl	80078b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fdc2 	bl	80078b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	66da      	str	r2, [r3, #108]	; 0x6c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	08010fc4 	.word	0x08010fc4
 8007d50:	08011610 	.word	0x08011610
 8007d54:	08011008 	.word	0x08011008

08007d58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d106      	bne.n	8007d76 <tcp_pcb_remove+0x1e>
 8007d68:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <tcp_pcb_remove+0x10c>)
 8007d6a:	f640 0283 	movw	r2, #2179	; 0x883
 8007d6e:	493e      	ldr	r1, [pc, #248]	; (8007e68 <tcp_pcb_remove+0x110>)
 8007d70:	483e      	ldr	r0, [pc, #248]	; (8007e6c <tcp_pcb_remove+0x114>)
 8007d72:	f007 f9a3 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <tcp_pcb_remove+0x32>
 8007d7c:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <tcp_pcb_remove+0x10c>)
 8007d7e:	f640 0284 	movw	r2, #2180	; 0x884
 8007d82:	493b      	ldr	r1, [pc, #236]	; (8007e70 <tcp_pcb_remove+0x118>)
 8007d84:	4839      	ldr	r0, [pc, #228]	; (8007e6c <tcp_pcb_remove+0x114>)
 8007d86:	f007 f999 	bl	800f0bc <iprintf>

  TCP_RMV(pcblist, pcb);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d105      	bne.n	8007da0 <tcp_pcb_remove+0x48>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e013      	b.n	8007dc8 <tcp_pcb_remove+0x70>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e00c      	b.n	8007dc2 <tcp_pcb_remove+0x6a>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d104      	bne.n	8007dbc <tcp_pcb_remove+0x64>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60da      	str	r2, [r3, #12]
 8007dba:	e005      	b.n	8007dc8 <tcp_pcb_remove+0x70>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1ef      	bne.n	8007da8 <tcp_pcb_remove+0x50>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007dce:	6838      	ldr	r0, [r7, #0]
 8007dd0:	f7ff ff72 	bl	8007cb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	7d1b      	ldrb	r3, [r3, #20]
 8007dd8:	2b0a      	cmp	r3, #10
 8007dda:	d013      	beq.n	8007e04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d00f      	beq.n	8007e04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	8b5b      	ldrh	r3, [r3, #26]
 8007de8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	8b5b      	ldrh	r3, [r3, #26]
 8007df4:	f043 0302 	orr.w	r3, r3, #2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007dfe:	6838      	ldr	r0, [r7, #0]
 8007e00:	f002 ff6e 	bl	800ace0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	7d1b      	ldrb	r3, [r3, #20]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d020      	beq.n	8007e4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <tcp_pcb_remove+0xca>
 8007e14:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <tcp_pcb_remove+0x10c>)
 8007e16:	f640 0293 	movw	r2, #2195	; 0x893
 8007e1a:	4916      	ldr	r1, [pc, #88]	; (8007e74 <tcp_pcb_remove+0x11c>)
 8007e1c:	4813      	ldr	r0, [pc, #76]	; (8007e6c <tcp_pcb_remove+0x114>)
 8007e1e:	f007 f94d 	bl	800f0bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <tcp_pcb_remove+0xe0>
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <tcp_pcb_remove+0x10c>)
 8007e2c:	f640 0294 	movw	r2, #2196	; 0x894
 8007e30:	4911      	ldr	r1, [pc, #68]	; (8007e78 <tcp_pcb_remove+0x120>)
 8007e32:	480e      	ldr	r0, [pc, #56]	; (8007e6c <tcp_pcb_remove+0x114>)
 8007e34:	f007 f942 	bl	800f0bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d006      	beq.n	8007e4e <tcp_pcb_remove+0xf6>
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <tcp_pcb_remove+0x10c>)
 8007e42:	f640 0296 	movw	r2, #2198	; 0x896
 8007e46:	490d      	ldr	r1, [pc, #52]	; (8007e7c <tcp_pcb_remove+0x124>)
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <tcp_pcb_remove+0x114>)
 8007e4a:	f007 f937 	bl	800f0bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	08010fc4 	.word	0x08010fc4
 8007e68:	0801162c 	.word	0x0801162c
 8007e6c:	08011008 	.word	0x08011008
 8007e70:	08011648 	.word	0x08011648
 8007e74:	08011668 	.word	0x08011668
 8007e78:	08011680 	.word	0x08011680
 8007e7c:	0801169c 	.word	0x0801169c

08007e80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <tcp_next_iss+0x1c>
 8007e8e:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <tcp_next_iss+0x38>)
 8007e90:	f640 02af 	movw	r2, #2223	; 0x8af
 8007e94:	4909      	ldr	r1, [pc, #36]	; (8007ebc <tcp_next_iss+0x3c>)
 8007e96:	480a      	ldr	r0, [pc, #40]	; (8007ec0 <tcp_next_iss+0x40>)
 8007e98:	f007 f910 	bl	800f0bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <tcp_next_iss+0x44>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <tcp_next_iss+0x48>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4a07      	ldr	r2, [pc, #28]	; (8007ec4 <tcp_next_iss+0x44>)
 8007ea8:	6013      	str	r3, [r2, #0]
  return iss;
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <tcp_next_iss+0x44>)
 8007eac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08010fc4 	.word	0x08010fc4
 8007ebc:	080116b4 	.word	0x080116b4
 8007ec0:	08011008 	.word	0x08011008
 8007ec4:	20000024 	.word	0x20000024
 8007ec8:	2000a954 	.word	0x2000a954

08007ecc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <tcp_eff_send_mss_netif+0x22>
 8007ee0:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <tcp_eff_send_mss_netif+0x68>)
 8007ee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007ee6:	4914      	ldr	r1, [pc, #80]	; (8007f38 <tcp_eff_send_mss_netif+0x6c>)
 8007ee8:	4814      	ldr	r0, [pc, #80]	; (8007f3c <tcp_eff_send_mss_netif+0x70>)
 8007eea:	f007 f8e7 	bl	800f0bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007ef4:	89fb      	ldrh	r3, [r7, #14]
 8007ef6:	e019      	b.n	8007f2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007efc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007efe:	8afb      	ldrh	r3, [r7, #22]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d012      	beq.n	8007f2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007f04:	2328      	movs	r3, #40	; 0x28
 8007f06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007f08:	8afa      	ldrh	r2, [r7, #22]
 8007f0a:	8abb      	ldrh	r3, [r7, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d904      	bls.n	8007f1a <tcp_eff_send_mss_netif+0x4e>
 8007f10:	8afa      	ldrh	r2, [r7, #22]
 8007f12:	8abb      	ldrh	r3, [r7, #20]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	e000      	b.n	8007f1c <tcp_eff_send_mss_netif+0x50>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007f1e:	8a7a      	ldrh	r2, [r7, #18]
 8007f20:	89fb      	ldrh	r3, [r7, #14]
 8007f22:	4293      	cmp	r3, r2
 8007f24:	bf28      	it	cs
 8007f26:	4613      	movcs	r3, r2
 8007f28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	08010fc4 	.word	0x08010fc4
 8007f38:	080116d0 	.word	0x080116d0
 8007f3c:	08011008 	.word	0x08011008

08007f40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d119      	bne.n	8007f88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007f54:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007f56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007f5a:	4910      	ldr	r1, [pc, #64]	; (8007f9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007f5c:	4810      	ldr	r0, [pc, #64]	; (8007fa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007f5e:	f007 f8ad 	bl	800f0bc <iprintf>

  while (pcb != NULL) {
 8007f62:	e011      	b.n	8007f88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d108      	bne.n	8007f82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7fe ffc6 	bl	8006f08 <tcp_abort>
      pcb = next;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e002      	b.n	8007f88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1ea      	bne.n	8007f64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	08010fc4 	.word	0x08010fc4
 8007f9c:	080116f8 	.word	0x080116f8
 8007fa0:	08011008 	.word	0x08011008

08007fa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02a      	beq.n	800800a <tcp_netif_ip_addr_changed+0x66>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d026      	beq.n	800800a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007fbc:	4b15      	ldr	r3, [pc, #84]	; (8008014 <tcp_netif_ip_addr_changed+0x70>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff ffbc 	bl	8007f40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <tcp_netif_ip_addr_changed+0x74>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff ffb6 	bl	8007f40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d017      	beq.n	800800a <tcp_netif_ip_addr_changed+0x66>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <tcp_netif_ip_addr_changed+0x78>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e00c      	b.n	8008004 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d103      	bne.n	8007ffe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1ef      	bne.n	8007fea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	2000a960 	.word	0x2000a960
 8008018:	2000a958 	.word	0x2000a958
 800801c:	2000a95c 	.word	0x2000a95c

08008020 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff fc3d 	bl	80078b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b08d      	sub	sp, #52	; 0x34
 800804c:	af04      	add	r7, sp, #16
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d105      	bne.n	8008064 <tcp_input+0x1c>
 8008058:	4b9b      	ldr	r3, [pc, #620]	; (80082c8 <tcp_input+0x280>)
 800805a:	2283      	movs	r2, #131	; 0x83
 800805c:	499b      	ldr	r1, [pc, #620]	; (80082cc <tcp_input+0x284>)
 800805e:	489c      	ldr	r0, [pc, #624]	; (80082d0 <tcp_input+0x288>)
 8008060:	f007 f82c 	bl	800f0bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a9a      	ldr	r2, [pc, #616]	; (80082d4 <tcp_input+0x28c>)
 800806a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	895b      	ldrh	r3, [r3, #10]
 8008070:	2b13      	cmp	r3, #19
 8008072:	f240 83d1 	bls.w	8008818 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008076:	4b98      	ldr	r3, [pc, #608]	; (80082d8 <tcp_input+0x290>)
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	4a97      	ldr	r2, [pc, #604]	; (80082d8 <tcp_input+0x290>)
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f005 ffd1 	bl	800e028 <ip4_addr_isbroadcast_u32>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	f040 83c7 	bne.w	800881c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800808e:	4b92      	ldr	r3, [pc, #584]	; (80082d8 <tcp_input+0x290>)
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008096:	2be0      	cmp	r3, #224	; 0xe0
 8008098:	f000 83c0 	beq.w	800881c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800809c:	4b8d      	ldr	r3, [pc, #564]	; (80082d4 <tcp_input+0x28c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	899b      	ldrh	r3, [r3, #12]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fc fda7 	bl	8004bf8 <lwip_htons>
 80080aa:	4603      	mov	r3, r0
 80080ac:	0b1b      	lsrs	r3, r3, #12
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80080b6:	7cbb      	ldrb	r3, [r7, #18]
 80080b8:	2b13      	cmp	r3, #19
 80080ba:	f240 83b1 	bls.w	8008820 <tcp_input+0x7d8>
 80080be:	7cbb      	ldrb	r3, [r7, #18]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	891b      	ldrh	r3, [r3, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	f200 83aa 	bhi.w	8008820 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80080cc:	7cbb      	ldrb	r3, [r7, #18]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b14      	subs	r3, #20
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	4b81      	ldr	r3, [pc, #516]	; (80082dc <tcp_input+0x294>)
 80080d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80080d8:	4b81      	ldr	r3, [pc, #516]	; (80082e0 <tcp_input+0x298>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	895a      	ldrh	r2, [r3, #10]
 80080e2:	7cbb      	ldrb	r3, [r7, #18]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d309      	bcc.n	80080fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80080ea:	4b7c      	ldr	r3, [pc, #496]	; (80082dc <tcp_input+0x294>)
 80080ec:	881a      	ldrh	r2, [r3, #0]
 80080ee:	4b7d      	ldr	r3, [pc, #500]	; (80082e4 <tcp_input+0x29c>)
 80080f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80080f2:	7cbb      	ldrb	r3, [r7, #18]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fe f856 	bl	80061a8 <pbuf_remove_header>
 80080fc:	e04e      	b.n	800819c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <tcp_input+0xca>
 8008106:	4b70      	ldr	r3, [pc, #448]	; (80082c8 <tcp_input+0x280>)
 8008108:	22c2      	movs	r2, #194	; 0xc2
 800810a:	4977      	ldr	r1, [pc, #476]	; (80082e8 <tcp_input+0x2a0>)
 800810c:	4870      	ldr	r0, [pc, #448]	; (80082d0 <tcp_input+0x288>)
 800810e:	f006 ffd5 	bl	800f0bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008112:	2114      	movs	r1, #20
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7fe f847 	bl	80061a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	895a      	ldrh	r2, [r3, #10]
 800811e:	4b71      	ldr	r3, [pc, #452]	; (80082e4 <tcp_input+0x29c>)
 8008120:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008122:	4b6e      	ldr	r3, [pc, #440]	; (80082dc <tcp_input+0x294>)
 8008124:	881a      	ldrh	r2, [r3, #0]
 8008126:	4b6f      	ldr	r3, [pc, #444]	; (80082e4 <tcp_input+0x29c>)
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800812e:	4b6d      	ldr	r3, [pc, #436]	; (80082e4 <tcp_input+0x29c>)
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7fe f837 	bl	80061a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	895b      	ldrh	r3, [r3, #10]
 8008140:	8a3a      	ldrh	r2, [r7, #16]
 8008142:	429a      	cmp	r2, r3
 8008144:	f200 836e 	bhi.w	8008824 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	4a64      	ldr	r2, [pc, #400]	; (80082e0 <tcp_input+0x298>)
 8008150:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	8a3a      	ldrh	r2, [r7, #16]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe f824 	bl	80061a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	891a      	ldrh	r2, [r3, #8]
 8008164:	8a3b      	ldrh	r3, [r7, #16]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	b29a      	uxth	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	895b      	ldrh	r3, [r3, #10]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <tcp_input+0x13a>
 8008176:	4b54      	ldr	r3, [pc, #336]	; (80082c8 <tcp_input+0x280>)
 8008178:	22df      	movs	r2, #223	; 0xdf
 800817a:	495c      	ldr	r1, [pc, #368]	; (80082ec <tcp_input+0x2a4>)
 800817c:	4854      	ldr	r0, [pc, #336]	; (80082d0 <tcp_input+0x288>)
 800817e:	f006 ff9d 	bl	800f0bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	891a      	ldrh	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	891b      	ldrh	r3, [r3, #8]
 800818c:	429a      	cmp	r2, r3
 800818e:	d005      	beq.n	800819c <tcp_input+0x154>
 8008190:	4b4d      	ldr	r3, [pc, #308]	; (80082c8 <tcp_input+0x280>)
 8008192:	22e0      	movs	r2, #224	; 0xe0
 8008194:	4956      	ldr	r1, [pc, #344]	; (80082f0 <tcp_input+0x2a8>)
 8008196:	484e      	ldr	r0, [pc, #312]	; (80082d0 <tcp_input+0x288>)
 8008198:	f006 ff90 	bl	800f0bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800819c:	4b4d      	ldr	r3, [pc, #308]	; (80082d4 <tcp_input+0x28c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	4a4b      	ldr	r2, [pc, #300]	; (80082d4 <tcp_input+0x28c>)
 80081a6:	6814      	ldr	r4, [r2, #0]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fc fd25 	bl	8004bf8 <lwip_htons>
 80081ae:	4603      	mov	r3, r0
 80081b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80081b2:	4b48      	ldr	r3, [pc, #288]	; (80082d4 <tcp_input+0x28c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4a46      	ldr	r2, [pc, #280]	; (80082d4 <tcp_input+0x28c>)
 80081bc:	6814      	ldr	r4, [r2, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fc fd1a 	bl	8004bf8 <lwip_htons>
 80081c4:	4603      	mov	r3, r0
 80081c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80081c8:	4b42      	ldr	r3, [pc, #264]	; (80082d4 <tcp_input+0x28c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	4a41      	ldr	r2, [pc, #260]	; (80082d4 <tcp_input+0x28c>)
 80081d0:	6814      	ldr	r4, [r2, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fc fd25 	bl	8004c22 <lwip_htonl>
 80081d8:	4603      	mov	r3, r0
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	6863      	ldr	r3, [r4, #4]
 80081de:	4a45      	ldr	r2, [pc, #276]	; (80082f4 <tcp_input+0x2ac>)
 80081e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80081e2:	4b3c      	ldr	r3, [pc, #240]	; (80082d4 <tcp_input+0x28c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	4a3a      	ldr	r2, [pc, #232]	; (80082d4 <tcp_input+0x28c>)
 80081ea:	6814      	ldr	r4, [r2, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fc fd18 	bl	8004c22 <lwip_htonl>
 80081f2:	4603      	mov	r3, r0
 80081f4:	60a3      	str	r3, [r4, #8]
 80081f6:	68a3      	ldr	r3, [r4, #8]
 80081f8:	4a3f      	ldr	r2, [pc, #252]	; (80082f8 <tcp_input+0x2b0>)
 80081fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80081fc:	4b35      	ldr	r3, [pc, #212]	; (80082d4 <tcp_input+0x28c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	89db      	ldrh	r3, [r3, #14]
 8008202:	b29b      	uxth	r3, r3
 8008204:	4a33      	ldr	r2, [pc, #204]	; (80082d4 <tcp_input+0x28c>)
 8008206:	6814      	ldr	r4, [r2, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7fc fcf5 	bl	8004bf8 <lwip_htons>
 800820e:	4603      	mov	r3, r0
 8008210:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008212:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <tcp_input+0x28c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	899b      	ldrh	r3, [r3, #12]
 8008218:	b29b      	uxth	r3, r3
 800821a:	4618      	mov	r0, r3
 800821c:	f7fc fcec 	bl	8004bf8 <lwip_htons>
 8008220:	4603      	mov	r3, r0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008228:	b2da      	uxtb	r2, r3
 800822a:	4b34      	ldr	r3, [pc, #208]	; (80082fc <tcp_input+0x2b4>)
 800822c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	891a      	ldrh	r2, [r3, #8]
 8008232:	4b33      	ldr	r3, [pc, #204]	; (8008300 <tcp_input+0x2b8>)
 8008234:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008236:	4b31      	ldr	r3, [pc, #196]	; (80082fc <tcp_input+0x2b4>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00c      	beq.n	800825c <tcp_input+0x214>
    tcplen++;
 8008242:	4b2f      	ldr	r3, [pc, #188]	; (8008300 <tcp_input+0x2b8>)
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	4b2d      	ldr	r3, [pc, #180]	; (8008300 <tcp_input+0x2b8>)
 800824c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	891a      	ldrh	r2, [r3, #8]
 8008252:	4b2b      	ldr	r3, [pc, #172]	; (8008300 <tcp_input+0x2b8>)
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	f200 82e6 	bhi.w	8008828 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008260:	4b28      	ldr	r3, [pc, #160]	; (8008304 <tcp_input+0x2bc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e09d      	b.n	80083a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	7d1b      	ldrb	r3, [r3, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d105      	bne.n	800827c <tcp_input+0x234>
 8008270:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <tcp_input+0x280>)
 8008272:	22fb      	movs	r2, #251	; 0xfb
 8008274:	4924      	ldr	r1, [pc, #144]	; (8008308 <tcp_input+0x2c0>)
 8008276:	4816      	ldr	r0, [pc, #88]	; (80082d0 <tcp_input+0x288>)
 8008278:	f006 ff20 	bl	800f0bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	2b0a      	cmp	r3, #10
 8008282:	d105      	bne.n	8008290 <tcp_input+0x248>
 8008284:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <tcp_input+0x280>)
 8008286:	22fc      	movs	r2, #252	; 0xfc
 8008288:	4920      	ldr	r1, [pc, #128]	; (800830c <tcp_input+0x2c4>)
 800828a:	4811      	ldr	r0, [pc, #68]	; (80082d0 <tcp_input+0x288>)
 800828c:	f006 ff16 	bl	800f0bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	7d1b      	ldrb	r3, [r3, #20]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d105      	bne.n	80082a4 <tcp_input+0x25c>
 8008298:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <tcp_input+0x280>)
 800829a:	22fd      	movs	r2, #253	; 0xfd
 800829c:	491c      	ldr	r1, [pc, #112]	; (8008310 <tcp_input+0x2c8>)
 800829e:	480c      	ldr	r0, [pc, #48]	; (80082d0 <tcp_input+0x288>)
 80082a0:	f006 ff0c 	bl	800f0bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	7a1b      	ldrb	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d033      	beq.n	8008314 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	7a1a      	ldrb	r2, [r3, #8]
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <tcp_input+0x290>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082b8:	3301      	adds	r3, #1
 80082ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80082bc:	429a      	cmp	r2, r3
 80082be:	d029      	beq.n	8008314 <tcp_input+0x2cc>
      prev = pcb;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	61bb      	str	r3, [r7, #24]
      continue;
 80082c4:	e06b      	b.n	800839e <tcp_input+0x356>
 80082c6:	bf00      	nop
 80082c8:	0801172c 	.word	0x0801172c
 80082cc:	08011760 	.word	0x08011760
 80082d0:	08011778 	.word	0x08011778
 80082d4:	2000a97c 	.word	0x2000a97c
 80082d8:	20005224 	.word	0x20005224
 80082dc:	2000a980 	.word	0x2000a980
 80082e0:	2000a984 	.word	0x2000a984
 80082e4:	2000a982 	.word	0x2000a982
 80082e8:	080117a0 	.word	0x080117a0
 80082ec:	080117b0 	.word	0x080117b0
 80082f0:	080117bc 	.word	0x080117bc
 80082f4:	2000a98c 	.word	0x2000a98c
 80082f8:	2000a990 	.word	0x2000a990
 80082fc:	2000a998 	.word	0x2000a998
 8008300:	2000a996 	.word	0x2000a996
 8008304:	2000a960 	.word	0x2000a960
 8008308:	080117dc 	.word	0x080117dc
 800830c:	08011804 	.word	0x08011804
 8008310:	08011830 	.word	0x08011830
    }

    if (pcb->remote_port == tcphdr->src &&
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	8b1a      	ldrh	r2, [r3, #24]
 8008318:	4b72      	ldr	r3, [pc, #456]	; (80084e4 <tcp_input+0x49c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	429a      	cmp	r2, r3
 8008322:	d13a      	bne.n	800839a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	8ada      	ldrh	r2, [r3, #22]
 8008328:	4b6e      	ldr	r3, [pc, #440]	; (80084e4 <tcp_input+0x49c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008330:	429a      	cmp	r2, r3
 8008332:	d132      	bne.n	800839a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	4b6b      	ldr	r3, [pc, #428]	; (80084e8 <tcp_input+0x4a0>)
 800833a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800833c:	429a      	cmp	r2, r3
 800833e:	d12c      	bne.n	800839a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b68      	ldr	r3, [pc, #416]	; (80084e8 <tcp_input+0x4a0>)
 8008346:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008348:	429a      	cmp	r2, r3
 800834a:	d126      	bne.n	800839a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	429a      	cmp	r2, r3
 8008354:	d106      	bne.n	8008364 <tcp_input+0x31c>
 8008356:	4b65      	ldr	r3, [pc, #404]	; (80084ec <tcp_input+0x4a4>)
 8008358:	f240 120d 	movw	r2, #269	; 0x10d
 800835c:	4964      	ldr	r1, [pc, #400]	; (80084f0 <tcp_input+0x4a8>)
 800835e:	4865      	ldr	r0, [pc, #404]	; (80084f4 <tcp_input+0x4ac>)
 8008360:	f006 feac 	bl	800f0bc <iprintf>
      if (prev != NULL) {
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <tcp_input+0x338>
        prev->next = pcb->next;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008372:	4b61      	ldr	r3, [pc, #388]	; (80084f8 <tcp_input+0x4b0>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800837a:	4a5f      	ldr	r2, [pc, #380]	; (80084f8 <tcp_input+0x4b0>)
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	429a      	cmp	r2, r3
 8008388:	d111      	bne.n	80083ae <tcp_input+0x366>
 800838a:	4b58      	ldr	r3, [pc, #352]	; (80084ec <tcp_input+0x4a4>)
 800838c:	f240 1215 	movw	r2, #277	; 0x115
 8008390:	495a      	ldr	r1, [pc, #360]	; (80084fc <tcp_input+0x4b4>)
 8008392:	4858      	ldr	r0, [pc, #352]	; (80084f4 <tcp_input+0x4ac>)
 8008394:	f006 fe92 	bl	800f0bc <iprintf>
      break;
 8008398:	e009      	b.n	80083ae <tcp_input+0x366>
    }
    prev = pcb;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	61fb      	str	r3, [r7, #28]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f47f af5e 	bne.w	8008268 <tcp_input+0x220>
 80083ac:	e000      	b.n	80083b0 <tcp_input+0x368>
      break;
 80083ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f040 80aa 	bne.w	800850c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80083b8:	4b51      	ldr	r3, [pc, #324]	; (8008500 <tcp_input+0x4b8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e03f      	b.n	8008440 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	7d1b      	ldrb	r3, [r3, #20]
 80083c4:	2b0a      	cmp	r3, #10
 80083c6:	d006      	beq.n	80083d6 <tcp_input+0x38e>
 80083c8:	4b48      	ldr	r3, [pc, #288]	; (80084ec <tcp_input+0x4a4>)
 80083ca:	f240 121f 	movw	r2, #287	; 0x11f
 80083ce:	494d      	ldr	r1, [pc, #308]	; (8008504 <tcp_input+0x4bc>)
 80083d0:	4848      	ldr	r0, [pc, #288]	; (80084f4 <tcp_input+0x4ac>)
 80083d2:	f006 fe73 	bl	800f0bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	7a1b      	ldrb	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d009      	beq.n	80083f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	7a1a      	ldrb	r2, [r3, #8]
 80083e2:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <tcp_input+0x4a0>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083ea:	3301      	adds	r3, #1
 80083ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d122      	bne.n	8008438 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	8b1a      	ldrh	r2, [r3, #24]
 80083f6:	4b3b      	ldr	r3, [pc, #236]	; (80084e4 <tcp_input+0x49c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	429a      	cmp	r2, r3
 8008400:	d11b      	bne.n	800843a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	8ada      	ldrh	r2, [r3, #22]
 8008406:	4b37      	ldr	r3, [pc, #220]	; (80084e4 <tcp_input+0x49c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	885b      	ldrh	r3, [r3, #2]
 800840c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800840e:	429a      	cmp	r2, r3
 8008410:	d113      	bne.n	800843a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	4b34      	ldr	r3, [pc, #208]	; (80084e8 <tcp_input+0x4a0>)
 8008418:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800841a:	429a      	cmp	r2, r3
 800841c:	d10d      	bne.n	800843a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b31      	ldr	r3, [pc, #196]	; (80084e8 <tcp_input+0x4a0>)
 8008424:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008426:	429a      	cmp	r2, r3
 8008428:	d107      	bne.n	800843a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800842a:	69f8      	ldr	r0, [r7, #28]
 800842c:	f000 fb56 	bl	8008adc <tcp_timewait_input>
        }
        pbuf_free(p);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fd ff3f 	bl	80062b4 <pbuf_free>
        return;
 8008436:	e1fd      	b.n	8008834 <tcp_input+0x7ec>
        continue;
 8008438:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	61fb      	str	r3, [r7, #28]
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1bc      	bne.n	80083c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008446:	2300      	movs	r3, #0
 8008448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800844a:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <tcp_input+0x4c0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e02a      	b.n	80084a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	7a1b      	ldrb	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00c      	beq.n	8008474 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	7a1a      	ldrb	r2, [r3, #8]
 800845e:	4b22      	ldr	r3, [pc, #136]	; (80084e8 <tcp_input+0x4a0>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008466:	3301      	adds	r3, #1
 8008468:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800846a:	429a      	cmp	r2, r3
 800846c:	d002      	beq.n	8008474 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	61bb      	str	r3, [r7, #24]
        continue;
 8008472:	e016      	b.n	80084a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	8ada      	ldrh	r2, [r3, #22]
 8008478:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <tcp_input+0x49c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b29b      	uxth	r3, r3
 8008480:	429a      	cmp	r2, r3
 8008482:	d10c      	bne.n	800849e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	4b17      	ldr	r3, [pc, #92]	; (80084e8 <tcp_input+0x4a0>)
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	429a      	cmp	r2, r3
 800848e:	d00f      	beq.n	80084b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <tcp_input+0x46a>
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1d1      	bne.n	8008452 <tcp_input+0x40a>
 80084ae:	e000      	b.n	80084b2 <tcp_input+0x46a>
            break;
 80084b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d029      	beq.n	800850c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <tcp_input+0x4c0>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80084ce:	4a0e      	ldr	r2, [pc, #56]	; (8008508 <tcp_input+0x4c0>)
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f000 fa03 	bl	80088e0 <tcp_listen_input>
      }
      pbuf_free(p);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fd feea 	bl	80062b4 <pbuf_free>
      return;
 80084e0:	e1a8      	b.n	8008834 <tcp_input+0x7ec>
 80084e2:	bf00      	nop
 80084e4:	2000a97c 	.word	0x2000a97c
 80084e8:	20005224 	.word	0x20005224
 80084ec:	0801172c 	.word	0x0801172c
 80084f0:	08011858 	.word	0x08011858
 80084f4:	08011778 	.word	0x08011778
 80084f8:	2000a960 	.word	0x2000a960
 80084fc:	08011884 	.word	0x08011884
 8008500:	2000a964 	.word	0x2000a964
 8008504:	080118b0 	.word	0x080118b0
 8008508:	2000a95c 	.word	0x2000a95c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8158 	beq.w	80087c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008514:	4b95      	ldr	r3, [pc, #596]	; (800876c <tcp_input+0x724>)
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	891a      	ldrh	r2, [r3, #8]
 800851e:	4b93      	ldr	r3, [pc, #588]	; (800876c <tcp_input+0x724>)
 8008520:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008522:	4a92      	ldr	r2, [pc, #584]	; (800876c <tcp_input+0x724>)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008528:	4b91      	ldr	r3, [pc, #580]	; (8008770 <tcp_input+0x728>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a8f      	ldr	r2, [pc, #572]	; (800876c <tcp_input+0x724>)
 800852e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008530:	4b90      	ldr	r3, [pc, #576]	; (8008774 <tcp_input+0x72c>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008536:	4b90      	ldr	r3, [pc, #576]	; (8008778 <tcp_input+0x730>)
 8008538:	2200      	movs	r2, #0
 800853a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800853c:	4b8f      	ldr	r3, [pc, #572]	; (800877c <tcp_input+0x734>)
 800853e:	2200      	movs	r2, #0
 8008540:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008542:	4b8f      	ldr	r3, [pc, #572]	; (8008780 <tcp_input+0x738>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d006      	beq.n	800855c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7b5b      	ldrb	r3, [r3, #13]
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008560:	2b00      	cmp	r3, #0
 8008562:	d017      	beq.n	8008594 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008564:	69f8      	ldr	r0, [r7, #28]
 8008566:	f7ff f929 	bl	80077bc <tcp_process_refused_data>
 800856a:	4603      	mov	r3, r0
 800856c:	f113 0f0d 	cmn.w	r3, #13
 8008570:	d007      	beq.n	8008582 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00c      	beq.n	8008594 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800857a:	4b82      	ldr	r3, [pc, #520]	; (8008784 <tcp_input+0x73c>)
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 80e3 	bne.w	8008752 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800858c:	69f8      	ldr	r0, [r7, #28]
 800858e:	f003 f9ad 	bl	800b8ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008592:	e0de      	b.n	8008752 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008594:	4a7c      	ldr	r2, [pc, #496]	; (8008788 <tcp_input+0x740>)
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800859a:	69f8      	ldr	r0, [r7, #28]
 800859c:	f000 fb18 	bl	8008bd0 <tcp_process>
 80085a0:	4603      	mov	r3, r0
 80085a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80085a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085a8:	f113 0f0d 	cmn.w	r3, #13
 80085ac:	f000 80d3 	beq.w	8008756 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80085b0:	4b71      	ldr	r3, [pc, #452]	; (8008778 <tcp_input+0x730>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d015      	beq.n	80085e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d008      	beq.n	80085d8 <tcp_input+0x590>
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	6912      	ldr	r2, [r2, #16]
 80085d0:	f06f 010d 	mvn.w	r1, #13
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	486c      	ldr	r0, [pc, #432]	; (800878c <tcp_input+0x744>)
 80085dc:	f7ff fbbc 	bl	8007d58 <tcp_pcb_remove>
        tcp_free(pcb);
 80085e0:	69f8      	ldr	r0, [r7, #28]
 80085e2:	f7fe f9a9 	bl	8006938 <tcp_free>
 80085e6:	e0da      	b.n	800879e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80085ec:	4b63      	ldr	r3, [pc, #396]	; (800877c <tcp_input+0x734>)
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01d      	beq.n	8008630 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <tcp_input+0x734>)
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <tcp_input+0x5d2>
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	6910      	ldr	r0, [r2, #16]
 800860e:	89fa      	ldrh	r2, [r7, #14]
 8008610:	69f9      	ldr	r1, [r7, #28]
 8008612:	4798      	blx	r3
 8008614:	4603      	mov	r3, r0
 8008616:	74fb      	strb	r3, [r7, #19]
 8008618:	e001      	b.n	800861e <tcp_input+0x5d6>
 800861a:	2300      	movs	r3, #0
 800861c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800861e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008622:	f113 0f0d 	cmn.w	r3, #13
 8008626:	f000 8098 	beq.w	800875a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800862a:	4b54      	ldr	r3, [pc, #336]	; (800877c <tcp_input+0x734>)
 800862c:	2200      	movs	r2, #0
 800862e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008630:	69f8      	ldr	r0, [r7, #28]
 8008632:	f000 f915 	bl	8008860 <tcp_input_delayed_close>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 8090 	bne.w	800875e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800863e:	4b4d      	ldr	r3, [pc, #308]	; (8008774 <tcp_input+0x72c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d041      	beq.n	80086ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <tcp_input+0x614>
 800864e:	4b50      	ldr	r3, [pc, #320]	; (8008790 <tcp_input+0x748>)
 8008650:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008654:	494f      	ldr	r1, [pc, #316]	; (8008794 <tcp_input+0x74c>)
 8008656:	4850      	ldr	r0, [pc, #320]	; (8008798 <tcp_input+0x750>)
 8008658:	f006 fd30 	bl	800f0bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	8b5b      	ldrh	r3, [r3, #26]
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008668:	4b42      	ldr	r3, [pc, #264]	; (8008774 <tcp_input+0x72c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd fe21 	bl	80062b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008672:	69f8      	ldr	r0, [r7, #28]
 8008674:	f7fe fc48 	bl	8006f08 <tcp_abort>
            goto aborted;
 8008678:	e091      	b.n	800879e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00c      	beq.n	800869e <tcp_input+0x656>
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	6918      	ldr	r0, [r3, #16]
 800868e:	4b39      	ldr	r3, [pc, #228]	; (8008774 <tcp_input+0x72c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	47a0      	blx	r4
 8008698:	4603      	mov	r3, r0
 800869a:	74fb      	strb	r3, [r7, #19]
 800869c:	e008      	b.n	80086b0 <tcp_input+0x668>
 800869e:	4b35      	ldr	r3, [pc, #212]	; (8008774 <tcp_input+0x72c>)
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	2000      	movs	r0, #0
 80086a8:	f7ff f95e 	bl	8007968 <tcp_recv_null>
 80086ac:	4603      	mov	r3, r0
 80086ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80086b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086b4:	f113 0f0d 	cmn.w	r3, #13
 80086b8:	d053      	beq.n	8008762 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80086ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80086c2:	4b2c      	ldr	r3, [pc, #176]	; (8008774 <tcp_input+0x72c>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80086ca:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <tcp_input+0x730>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d030      	beq.n	8008738 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e2:	7b5a      	ldrb	r2, [r3, #13]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e8:	f042 0220 	orr.w	r2, r2, #32
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	735a      	strb	r2, [r3, #13]
 80086f0:	e022      	b.n	8008738 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80086fa:	d005      	beq.n	8008708 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008700:	3301      	adds	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <tcp_input+0x6e2>
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	6918      	ldr	r0, [r3, #16]
 800871c:	2300      	movs	r3, #0
 800871e:	2200      	movs	r2, #0
 8008720:	69f9      	ldr	r1, [r7, #28]
 8008722:	47a0      	blx	r4
 8008724:	4603      	mov	r3, r0
 8008726:	74fb      	strb	r3, [r7, #19]
 8008728:	e001      	b.n	800872e <tcp_input+0x6e6>
 800872a:	2300      	movs	r3, #0
 800872c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800872e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008732:	f113 0f0d 	cmn.w	r3, #13
 8008736:	d016      	beq.n	8008766 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008738:	4b13      	ldr	r3, [pc, #76]	; (8008788 <tcp_input+0x740>)
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800873e:	69f8      	ldr	r0, [r7, #28]
 8008740:	f000 f88e 	bl	8008860 <tcp_input_delayed_close>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d128      	bne.n	800879c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800874a:	69f8      	ldr	r0, [r7, #28]
 800874c:	f002 fac8 	bl	800ace0 <tcp_output>
 8008750:	e025      	b.n	800879e <tcp_input+0x756>
        goto aborted;
 8008752:	bf00      	nop
 8008754:	e023      	b.n	800879e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008756:	bf00      	nop
 8008758:	e021      	b.n	800879e <tcp_input+0x756>
              goto aborted;
 800875a:	bf00      	nop
 800875c:	e01f      	b.n	800879e <tcp_input+0x756>
          goto aborted;
 800875e:	bf00      	nop
 8008760:	e01d      	b.n	800879e <tcp_input+0x756>
            goto aborted;
 8008762:	bf00      	nop
 8008764:	e01b      	b.n	800879e <tcp_input+0x756>
              goto aborted;
 8008766:	bf00      	nop
 8008768:	e019      	b.n	800879e <tcp_input+0x756>
 800876a:	bf00      	nop
 800876c:	2000a96c 	.word	0x2000a96c
 8008770:	2000a97c 	.word	0x2000a97c
 8008774:	2000a99c 	.word	0x2000a99c
 8008778:	2000a999 	.word	0x2000a999
 800877c:	2000a994 	.word	0x2000a994
 8008780:	2000a998 	.word	0x2000a998
 8008784:	2000a996 	.word	0x2000a996
 8008788:	2000a9a0 	.word	0x2000a9a0
 800878c:	2000a960 	.word	0x2000a960
 8008790:	0801172c 	.word	0x0801172c
 8008794:	080118e0 	.word	0x080118e0
 8008798:	08011778 	.word	0x08011778
          goto aborted;
 800879c:	bf00      	nop
    tcp_input_pcb = NULL;
 800879e:	4b27      	ldr	r3, [pc, #156]	; (800883c <tcp_input+0x7f4>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80087a4:	4b26      	ldr	r3, [pc, #152]	; (8008840 <tcp_input+0x7f8>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80087aa:	4b26      	ldr	r3, [pc, #152]	; (8008844 <tcp_input+0x7fc>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d03f      	beq.n	8008832 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <tcp_input+0x7fc>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fd fd7c 	bl	80062b4 <pbuf_free>
      inseg.p = NULL;
 80087bc:	4b21      	ldr	r3, [pc, #132]	; (8008844 <tcp_input+0x7fc>)
 80087be:	2200      	movs	r2, #0
 80087c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80087c2:	e036      	b.n	8008832 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80087c4:	4b20      	ldr	r3, [pc, #128]	; (8008848 <tcp_input+0x800>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	899b      	ldrh	r3, [r3, #12]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fc fa13 	bl	8004bf8 <lwip_htons>
 80087d2:	4603      	mov	r3, r0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d118      	bne.n	8008810 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <tcp_input+0x804>)
 80087e0:	6819      	ldr	r1, [r3, #0]
 80087e2:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <tcp_input+0x808>)
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <tcp_input+0x80c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087ee:	4b16      	ldr	r3, [pc, #88]	; (8008848 <tcp_input+0x800>)
 80087f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087f2:	885b      	ldrh	r3, [r3, #2]
 80087f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087f6:	4a14      	ldr	r2, [pc, #80]	; (8008848 <tcp_input+0x800>)
 80087f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087fa:	8812      	ldrh	r2, [r2, #0]
 80087fc:	b292      	uxth	r2, r2
 80087fe:	9202      	str	r2, [sp, #8]
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <tcp_input+0x810>)
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4b15      	ldr	r3, [pc, #84]	; (800885c <tcp_input+0x814>)
 8008808:	4602      	mov	r2, r0
 800880a:	2000      	movs	r0, #0
 800880c:	f003 f81c 	bl	800b848 <tcp_rst>
    pbuf_free(p);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7fd fd4f 	bl	80062b4 <pbuf_free>
  return;
 8008816:	e00c      	b.n	8008832 <tcp_input+0x7ea>
    goto dropped;
 8008818:	bf00      	nop
 800881a:	e006      	b.n	800882a <tcp_input+0x7e2>
    goto dropped;
 800881c:	bf00      	nop
 800881e:	e004      	b.n	800882a <tcp_input+0x7e2>
    goto dropped;
 8008820:	bf00      	nop
 8008822:	e002      	b.n	800882a <tcp_input+0x7e2>
      goto dropped;
 8008824:	bf00      	nop
 8008826:	e000      	b.n	800882a <tcp_input+0x7e2>
      goto dropped;
 8008828:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7fd fd42 	bl	80062b4 <pbuf_free>
 8008830:	e000      	b.n	8008834 <tcp_input+0x7ec>
  return;
 8008832:	bf00      	nop
}
 8008834:	3724      	adds	r7, #36	; 0x24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd90      	pop	{r4, r7, pc}
 800883a:	bf00      	nop
 800883c:	2000a9a0 	.word	0x2000a9a0
 8008840:	2000a99c 	.word	0x2000a99c
 8008844:	2000a96c 	.word	0x2000a96c
 8008848:	2000a97c 	.word	0x2000a97c
 800884c:	2000a990 	.word	0x2000a990
 8008850:	2000a996 	.word	0x2000a996
 8008854:	2000a98c 	.word	0x2000a98c
 8008858:	20005234 	.word	0x20005234
 800885c:	20005238 	.word	0x20005238

08008860 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <tcp_input_delayed_close+0x1c>
 800886e:	4b17      	ldr	r3, [pc, #92]	; (80088cc <tcp_input_delayed_close+0x6c>)
 8008870:	f240 225a 	movw	r2, #602	; 0x25a
 8008874:	4916      	ldr	r1, [pc, #88]	; (80088d0 <tcp_input_delayed_close+0x70>)
 8008876:	4817      	ldr	r0, [pc, #92]	; (80088d4 <tcp_input_delayed_close+0x74>)
 8008878:	f006 fc20 	bl	800f0bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800887c:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <tcp_input_delayed_close+0x78>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 0310 	and.w	r3, r3, #16
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01c      	beq.n	80088c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8b5b      	ldrh	r3, [r3, #26]
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10d      	bne.n	80088b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889a:	2b00      	cmp	r3, #0
 800889c:	d008      	beq.n	80088b0 <tcp_input_delayed_close+0x50>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6912      	ldr	r2, [r2, #16]
 80088a8:	f06f 010e 	mvn.w	r1, #14
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	480a      	ldr	r0, [pc, #40]	; (80088dc <tcp_input_delayed_close+0x7c>)
 80088b4:	f7ff fa50 	bl	8007d58 <tcp_pcb_remove>
    tcp_free(pcb);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7fe f83d 	bl	8006938 <tcp_free>
    return 1;
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	0801172c 	.word	0x0801172c
 80088d0:	080118fc 	.word	0x080118fc
 80088d4:	08011778 	.word	0x08011778
 80088d8:	2000a999 	.word	0x2000a999
 80088dc:	2000a960 	.word	0x2000a960

080088e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80088e0:	b590      	push	{r4, r7, lr}
 80088e2:	b08b      	sub	sp, #44	; 0x2c
 80088e4:	af04      	add	r7, sp, #16
 80088e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80088e8:	4b6f      	ldr	r3, [pc, #444]	; (8008aa8 <tcp_listen_input+0x1c8>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 80d2 	bne.w	8008a9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <tcp_listen_input+0x2a>
 80088fc:	4b6b      	ldr	r3, [pc, #428]	; (8008aac <tcp_listen_input+0x1cc>)
 80088fe:	f240 2281 	movw	r2, #641	; 0x281
 8008902:	496b      	ldr	r1, [pc, #428]	; (8008ab0 <tcp_listen_input+0x1d0>)
 8008904:	486b      	ldr	r0, [pc, #428]	; (8008ab4 <tcp_listen_input+0x1d4>)
 8008906:	f006 fbd9 	bl	800f0bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800890a:	4b67      	ldr	r3, [pc, #412]	; (8008aa8 <tcp_listen_input+0x1c8>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b00      	cmp	r3, #0
 8008914:	d019      	beq.n	800894a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008916:	4b68      	ldr	r3, [pc, #416]	; (8008ab8 <tcp_listen_input+0x1d8>)
 8008918:	6819      	ldr	r1, [r3, #0]
 800891a:	4b68      	ldr	r3, [pc, #416]	; (8008abc <tcp_listen_input+0x1dc>)
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	4b67      	ldr	r3, [pc, #412]	; (8008ac0 <tcp_listen_input+0x1e0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008926:	4b67      	ldr	r3, [pc, #412]	; (8008ac4 <tcp_listen_input+0x1e4>)
 8008928:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800892a:	885b      	ldrh	r3, [r3, #2]
 800892c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800892e:	4a65      	ldr	r2, [pc, #404]	; (8008ac4 <tcp_listen_input+0x1e4>)
 8008930:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008932:	8812      	ldrh	r2, [r2, #0]
 8008934:	b292      	uxth	r2, r2
 8008936:	9202      	str	r2, [sp, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	4b63      	ldr	r3, [pc, #396]	; (8008ac8 <tcp_listen_input+0x1e8>)
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	4b63      	ldr	r3, [pc, #396]	; (8008acc <tcp_listen_input+0x1ec>)
 8008940:	4602      	mov	r2, r0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f002 ff80 	bl	800b848 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008948:	e0a9      	b.n	8008a9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800894a:	4b57      	ldr	r3, [pc, #348]	; (8008aa8 <tcp_listen_input+0x1c8>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80a3 	beq.w	8008a9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7d5b      	ldrb	r3, [r3, #21]
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff f927 	bl	8007bb0 <tcp_alloc>
 8008962:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d111      	bne.n	800898e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <tcp_listen_input+0xa8>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6910      	ldr	r0, [r2, #16]
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	2100      	movs	r1, #0
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	73bb      	strb	r3, [r7, #14]
      return;
 8008986:	e08b      	b.n	8008aa0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008988:	23f0      	movs	r3, #240	; 0xf0
 800898a:	73bb      	strb	r3, [r7, #14]
      return;
 800898c:	e088      	b.n	8008aa0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800898e:	4b50      	ldr	r3, [pc, #320]	; (8008ad0 <tcp_listen_input+0x1f0>)
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008996:	4b4e      	ldr	r3, [pc, #312]	; (8008ad0 <tcp_listen_input+0x1f0>)
 8008998:	691a      	ldr	r2, [r3, #16]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8ada      	ldrh	r2, [r3, #22]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80089a6:	4b47      	ldr	r3, [pc, #284]	; (8008ac4 <tcp_listen_input+0x1e4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2203      	movs	r2, #3
 80089b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80089b8:	4b41      	ldr	r3, [pc, #260]	; (8008ac0 <tcp_listen_input+0x1e0>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80089ca:	6978      	ldr	r0, [r7, #20]
 80089cc:	f7ff fa58 	bl	8007e80 <tcp_next_iss>
 80089d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80089ea:	4b35      	ldr	r3, [pc, #212]	; (8008ac0 <tcp_listen_input+0x1e0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	1e5a      	subs	r2, r3, #1
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7a5b      	ldrb	r3, [r3, #9]
 8008a06:	f003 030c 	and.w	r3, r3, #12
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7a1a      	ldrb	r2, [r3, #8]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008a18:	4b2e      	ldr	r3, [pc, #184]	; (8008ad4 <tcp_listen_input+0x1f4>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	60da      	str	r2, [r3, #12]
 8008a20:	4a2c      	ldr	r2, [pc, #176]	; (8008ad4 <tcp_listen_input+0x1f4>)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	f003 f8d1 	bl	800bbcc <tcp_timer_needed>
 8008a2a:	4b2b      	ldr	r3, [pc, #172]	; (8008ad8 <tcp_listen_input+0x1f8>)
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008a30:	6978      	ldr	r0, [r7, #20]
 8008a32:	f001 fd8f 	bl	800a554 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008a36:	4b23      	ldr	r3, [pc, #140]	; (8008ac4 <tcp_listen_input+0x1e4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	89db      	ldrh	r3, [r3, #14]
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f005 f84f 	bl	800dafc <ip4_route>
 8008a5e:	4601      	mov	r1, r0
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3304      	adds	r3, #4
 8008a64:	461a      	mov	r2, r3
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fa30 	bl	8007ecc <tcp_eff_send_mss_netif>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008a74:	2112      	movs	r1, #18
 8008a76:	6978      	ldr	r0, [r7, #20]
 8008a78:	f002 f844 	bl	800ab04 <tcp_enqueue_flags>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6978      	ldr	r0, [r7, #20]
 8008a8c:	f7fe f97e 	bl	8006d8c <tcp_abandon>
      return;
 8008a90:	e006      	b.n	8008aa0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008a92:	6978      	ldr	r0, [r7, #20]
 8008a94:	f002 f924 	bl	800ace0 <tcp_output>
  return;
 8008a98:	e001      	b.n	8008a9e <tcp_listen_input+0x1be>
    return;
 8008a9a:	bf00      	nop
 8008a9c:	e000      	b.n	8008aa0 <tcp_listen_input+0x1c0>
  return;
 8008a9e:	bf00      	nop
}
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd90      	pop	{r4, r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2000a998 	.word	0x2000a998
 8008aac:	0801172c 	.word	0x0801172c
 8008ab0:	08011924 	.word	0x08011924
 8008ab4:	08011778 	.word	0x08011778
 8008ab8:	2000a990 	.word	0x2000a990
 8008abc:	2000a996 	.word	0x2000a996
 8008ac0:	2000a98c 	.word	0x2000a98c
 8008ac4:	2000a97c 	.word	0x2000a97c
 8008ac8:	20005234 	.word	0x20005234
 8008acc:	20005238 	.word	0x20005238
 8008ad0:	20005224 	.word	0x20005224
 8008ad4:	2000a960 	.word	0x2000a960
 8008ad8:	2000a968 	.word	0x2000a968

08008adc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af04      	add	r7, sp, #16
 8008ae2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008ae4:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <tcp_timewait_input+0xc8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d153      	bne.n	8008b98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <tcp_timewait_input+0x28>
 8008af6:	4b2c      	ldr	r3, [pc, #176]	; (8008ba8 <tcp_timewait_input+0xcc>)
 8008af8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008afc:	492b      	ldr	r1, [pc, #172]	; (8008bac <tcp_timewait_input+0xd0>)
 8008afe:	482c      	ldr	r0, [pc, #176]	; (8008bb0 <tcp_timewait_input+0xd4>)
 8008b00:	f006 fadc 	bl	800f0bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <tcp_timewait_input+0xc8>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d02a      	beq.n	8008b66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <tcp_timewait_input+0xd8>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	db2d      	blt.n	8008b7a <tcp_timewait_input+0x9e>
 8008b1e:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <tcp_timewait_input+0xd8>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b2a:	440b      	add	r3, r1
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dc23      	bgt.n	8008b7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b32:	4b21      	ldr	r3, [pc, #132]	; (8008bb8 <tcp_timewait_input+0xdc>)
 8008b34:	6819      	ldr	r1, [r3, #0]
 8008b36:	4b21      	ldr	r3, [pc, #132]	; (8008bbc <tcp_timewait_input+0xe0>)
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <tcp_timewait_input+0xd8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b42:	4b1f      	ldr	r3, [pc, #124]	; (8008bc0 <tcp_timewait_input+0xe4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b46:	885b      	ldrh	r3, [r3, #2]
 8008b48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b4a:	4a1d      	ldr	r2, [pc, #116]	; (8008bc0 <tcp_timewait_input+0xe4>)
 8008b4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b4e:	8812      	ldrh	r2, [r2, #0]
 8008b50:	b292      	uxth	r2, r2
 8008b52:	9202      	str	r2, [sp, #8]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	4b1b      	ldr	r3, [pc, #108]	; (8008bc4 <tcp_timewait_input+0xe8>)
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <tcp_timewait_input+0xec>)
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f002 fe72 	bl	800b848 <tcp_rst>
      return;
 8008b64:	e01b      	b.n	8008b9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <tcp_timewait_input+0xc8>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008b72:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <tcp_timewait_input+0xf0>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <tcp_timewait_input+0xe0>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00c      	beq.n	8008b9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8b5b      	ldrh	r3, [r3, #26]
 8008b86:	f043 0302 	orr.w	r3, r3, #2
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f002 f8a5 	bl	800ace0 <tcp_output>
  }
  return;
 8008b96:	e001      	b.n	8008b9c <tcp_timewait_input+0xc0>
    return;
 8008b98:	bf00      	nop
 8008b9a:	e000      	b.n	8008b9e <tcp_timewait_input+0xc2>
  return;
 8008b9c:	bf00      	nop
}
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	2000a998 	.word	0x2000a998
 8008ba8:	0801172c 	.word	0x0801172c
 8008bac:	08011944 	.word	0x08011944
 8008bb0:	08011778 	.word	0x08011778
 8008bb4:	2000a98c 	.word	0x2000a98c
 8008bb8:	2000a990 	.word	0x2000a990
 8008bbc:	2000a996 	.word	0x2000a996
 8008bc0:	2000a97c 	.word	0x2000a97c
 8008bc4:	20005234 	.word	0x20005234
 8008bc8:	20005238 	.word	0x20005238
 8008bcc:	2000a954 	.word	0x2000a954

08008bd0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b08d      	sub	sp, #52	; 0x34
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <tcp_process+0x24>
 8008be6:	4b9d      	ldr	r3, [pc, #628]	; (8008e5c <tcp_process+0x28c>)
 8008be8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008bec:	499c      	ldr	r1, [pc, #624]	; (8008e60 <tcp_process+0x290>)
 8008bee:	489d      	ldr	r0, [pc, #628]	; (8008e64 <tcp_process+0x294>)
 8008bf0:	f006 fa64 	bl	800f0bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008bf4:	4b9c      	ldr	r3, [pc, #624]	; (8008e68 <tcp_process+0x298>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d04e      	beq.n	8008c9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7d1b      	ldrb	r3, [r3, #20]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d108      	bne.n	8008c1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c0c:	4b97      	ldr	r3, [pc, #604]	; (8008e6c <tcp_process+0x29c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d123      	bne.n	8008c5c <tcp_process+0x8c>
        acceptable = 1;
 8008c14:	2301      	movs	r3, #1
 8008c16:	76fb      	strb	r3, [r7, #27]
 8008c18:	e020      	b.n	8008c5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c1e:	4b94      	ldr	r3, [pc, #592]	; (8008e70 <tcp_process+0x2a0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d102      	bne.n	8008c2c <tcp_process+0x5c>
        acceptable = 1;
 8008c26:	2301      	movs	r3, #1
 8008c28:	76fb      	strb	r3, [r7, #27]
 8008c2a:	e017      	b.n	8008c5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008c2c:	4b90      	ldr	r3, [pc, #576]	; (8008e70 <tcp_process+0x2a0>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	db10      	blt.n	8008c5c <tcp_process+0x8c>
 8008c3a:	4b8d      	ldr	r3, [pc, #564]	; (8008e70 <tcp_process+0x2a0>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c46:	440b      	add	r3, r1
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dc06      	bgt.n	8008c5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8b5b      	ldrh	r3, [r3, #26]
 8008c52:	f043 0302 	orr.w	r3, r3, #2
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008c5c:	7efb      	ldrb	r3, [r7, #27]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01b      	beq.n	8008c9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7d1b      	ldrb	r3, [r3, #20]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <tcp_process+0xa8>
 8008c6a:	4b7c      	ldr	r3, [pc, #496]	; (8008e5c <tcp_process+0x28c>)
 8008c6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008c70:	4980      	ldr	r1, [pc, #512]	; (8008e74 <tcp_process+0x2a4>)
 8008c72:	487c      	ldr	r0, [pc, #496]	; (8008e64 <tcp_process+0x294>)
 8008c74:	f006 fa22 	bl	800f0bc <iprintf>
      recv_flags |= TF_RESET;
 8008c78:	4b7f      	ldr	r3, [pc, #508]	; (8008e78 <tcp_process+0x2a8>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	f043 0308 	orr.w	r3, r3, #8
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	4b7d      	ldr	r3, [pc, #500]	; (8008e78 <tcp_process+0x2a8>)
 8008c84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8b5b      	ldrh	r3, [r3, #26]
 8008c8a:	f023 0301 	bic.w	r3, r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008c94:	f06f 030d 	mvn.w	r3, #13
 8008c98:	e37a      	b.n	8009390 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e378      	b.n	8009390 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008c9e:	4b72      	ldr	r3, [pc, #456]	; (8008e68 <tcp_process+0x298>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d010      	beq.n	8008ccc <tcp_process+0xfc>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	7d1b      	ldrb	r3, [r3, #20]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d00c      	beq.n	8008ccc <tcp_process+0xfc>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7d1b      	ldrb	r3, [r3, #20]
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d008      	beq.n	8008ccc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8b5b      	ldrh	r3, [r3, #26]
 8008cbe:	f043 0302 	orr.w	r3, r3, #2
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e361      	b.n	8009390 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8b5b      	ldrh	r3, [r3, #26]
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008cd8:	4b68      	ldr	r3, [pc, #416]	; (8008e7c <tcp_process+0x2ac>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fc2f 	bl	800a554 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	7d1b      	ldrb	r3, [r3, #20]
 8008cfa:	3b02      	subs	r3, #2
 8008cfc:	2b07      	cmp	r3, #7
 8008cfe:	f200 8337 	bhi.w	8009370 <tcp_process+0x7a0>
 8008d02:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <tcp_process+0x138>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008f59 	.word	0x08008f59
 8008d10:	080090d1 	.word	0x080090d1
 8008d14:	080090fb 	.word	0x080090fb
 8008d18:	0800921f 	.word	0x0800921f
 8008d1c:	080090d1 	.word	0x080090d1
 8008d20:	080092ab 	.word	0x080092ab
 8008d24:	0800933b 	.word	0x0800933b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008d28:	4b4f      	ldr	r3, [pc, #316]	; (8008e68 <tcp_process+0x298>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80e4 	beq.w	8008efe <tcp_process+0x32e>
 8008d36:	4b4c      	ldr	r3, [pc, #304]	; (8008e68 <tcp_process+0x298>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 80dd 	beq.w	8008efe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	4b48      	ldr	r3, [pc, #288]	; (8008e6c <tcp_process+0x29c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	f040 80d5 	bne.w	8008efe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008d54:	4b46      	ldr	r3, [pc, #280]	; (8008e70 <tcp_process+0x2a0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008d66:	4b41      	ldr	r3, [pc, #260]	; (8008e6c <tcp_process+0x29c>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008d6e:	4b44      	ldr	r3, [pc, #272]	; (8008e80 <tcp_process+0x2b0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	89db      	ldrh	r3, [r3, #14]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <tcp_process+0x2a0>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	1e5a      	subs	r2, r3, #1
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2204      	movs	r2, #4
 8008d96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f004 feab 	bl	800dafc <ip4_route>
 8008da6:	4601      	mov	r1, r0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3304      	adds	r3, #4
 8008dac:	461a      	mov	r2, r3
 8008dae:	4620      	mov	r0, r4
 8008db0:	f7ff f88c 	bl	8007ecc <tcp_eff_send_mss_netif>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dc0:	009a      	lsls	r2, r3, #2
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	f241 111c 	movw	r1, #4380	; 0x111c
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	bf38      	it	cc
 8008dd0:	460b      	movcc	r3, r1
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d204      	bcs.n	8008de0 <tcp_process+0x210>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	e00d      	b.n	8008dfc <tcp_process+0x22c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	f241 121c 	movw	r2, #4380	; 0x111c
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d904      	bls.n	8008df8 <tcp_process+0x228>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	e001      	b.n	8008dfc <tcp_process+0x22c>
 8008df8:	f241 131c 	movw	r3, #4380	; 0x111c
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d106      	bne.n	8008e1a <tcp_process+0x24a>
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <tcp_process+0x28c>)
 8008e0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008e12:	491c      	ldr	r1, [pc, #112]	; (8008e84 <tcp_process+0x2b4>)
 8008e14:	4813      	ldr	r0, [pc, #76]	; (8008e64 <tcp_process+0x294>)
 8008e16:	f006 f951 	bl	800f0bc <iprintf>
        --pcb->snd_queuelen;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d12a      	bne.n	8008e8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <tcp_process+0x280>
 8008e42:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <tcp_process+0x28c>)
 8008e44:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008e48:	490f      	ldr	r1, [pc, #60]	; (8008e88 <tcp_process+0x2b8>)
 8008e4a:	4806      	ldr	r0, [pc, #24]	; (8008e64 <tcp_process+0x294>)
 8008e4c:	f006 f936 	bl	800f0bc <iprintf>
          pcb->unsent = rseg->next;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	66da      	str	r2, [r3, #108]	; 0x6c
 8008e58:	e01c      	b.n	8008e94 <tcp_process+0x2c4>
 8008e5a:	bf00      	nop
 8008e5c:	0801172c 	.word	0x0801172c
 8008e60:	08011964 	.word	0x08011964
 8008e64:	08011778 	.word	0x08011778
 8008e68:	2000a998 	.word	0x2000a998
 8008e6c:	2000a990 	.word	0x2000a990
 8008e70:	2000a98c 	.word	0x2000a98c
 8008e74:	08011980 	.word	0x08011980
 8008e78:	2000a999 	.word	0x2000a999
 8008e7c:	2000a954 	.word	0x2000a954
 8008e80:	2000a97c 	.word	0x2000a97c
 8008e84:	080119a0 	.word	0x080119a0
 8008e88:	080119b8 	.word	0x080119b8
        } else {
          pcb->unacked = rseg->next;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008e94:	69f8      	ldr	r0, [r7, #28]
 8008e96:	f7fe fd22 	bl	80078de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d104      	bne.n	8008eac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ea8:	861a      	strh	r2, [r3, #48]	; 0x30
 8008eaa:	e006      	b.n	8008eba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <tcp_process+0x30a>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6910      	ldr	r0, [r2, #16]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	76bb      	strb	r3, [r7, #26]
 8008ed8:	e001      	b.n	8008ede <tcp_process+0x30e>
 8008eda:	2300      	movs	r3, #0
 8008edc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008ede:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008ee2:	f113 0f0d 	cmn.w	r3, #13
 8008ee6:	d102      	bne.n	8008eee <tcp_process+0x31e>
          return ERR_ABRT;
 8008ee8:	f06f 030c 	mvn.w	r3, #12
 8008eec:	e250      	b.n	8009390 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8b5b      	ldrh	r3, [r3, #26]
 8008ef2:	f043 0302 	orr.w	r3, r3, #2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008efc:	e23a      	b.n	8009374 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008efe:	4b98      	ldr	r3, [pc, #608]	; (8009160 <tcp_process+0x590>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 8234 	beq.w	8009374 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f0c:	4b95      	ldr	r3, [pc, #596]	; (8009164 <tcp_process+0x594>)
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	4b95      	ldr	r3, [pc, #596]	; (8009168 <tcp_process+0x598>)
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	4b95      	ldr	r3, [pc, #596]	; (800916c <tcp_process+0x59c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f1c:	4b94      	ldr	r3, [pc, #592]	; (8009170 <tcp_process+0x5a0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f20:	885b      	ldrh	r3, [r3, #2]
 8008f22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f24:	4a92      	ldr	r2, [pc, #584]	; (8009170 <tcp_process+0x5a0>)
 8008f26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f28:	8812      	ldrh	r2, [r2, #0]
 8008f2a:	b292      	uxth	r2, r2
 8008f2c:	9202      	str	r2, [sp, #8]
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	4b90      	ldr	r3, [pc, #576]	; (8009174 <tcp_process+0x5a4>)
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4b90      	ldr	r3, [pc, #576]	; (8009178 <tcp_process+0x5a8>)
 8008f36:	4602      	mov	r2, r0
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f002 fc85 	bl	800b848 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f44:	2b05      	cmp	r3, #5
 8008f46:	f200 8215 	bhi.w	8009374 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f002 fa4f 	bl	800b3f4 <tcp_rexmit_rto>
      break;
 8008f56:	e20d      	b.n	8009374 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008f58:	4b81      	ldr	r3, [pc, #516]	; (8009160 <tcp_process+0x590>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 80a1 	beq.w	80090a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008f66:	4b7f      	ldr	r3, [pc, #508]	; (8009164 <tcp_process+0x594>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	db7e      	blt.n	8009074 <tcp_process+0x4a4>
 8008f76:	4b7b      	ldr	r3, [pc, #492]	; (8009164 <tcp_process+0x594>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dc77      	bgt.n	8009074 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2204      	movs	r2, #4
 8008f88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008f92:	23fa      	movs	r3, #250	; 0xfa
 8008f94:	76bb      	strb	r3, [r7, #26]
 8008f96:	e01d      	b.n	8008fd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <tcp_process+0x3e0>
 8008fa2:	4b76      	ldr	r3, [pc, #472]	; (800917c <tcp_process+0x5ac>)
 8008fa4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008fa8:	4975      	ldr	r1, [pc, #468]	; (8009180 <tcp_process+0x5b0>)
 8008faa:	4876      	ldr	r0, [pc, #472]	; (8009184 <tcp_process+0x5b4>)
 8008fac:	f006 f886 	bl	800f0bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <tcp_process+0x400>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6910      	ldr	r0, [r2, #16]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4798      	blx	r3
 8008fca:	4603      	mov	r3, r0
 8008fcc:	76bb      	strb	r3, [r7, #26]
 8008fce:	e001      	b.n	8008fd4 <tcp_process+0x404>
 8008fd0:	23f0      	movs	r3, #240	; 0xf0
 8008fd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008fd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008fdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008fe0:	f113 0f0d 	cmn.w	r3, #13
 8008fe4:	d002      	beq.n	8008fec <tcp_process+0x41c>
              tcp_abort(pcb);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fd ff8e 	bl	8006f08 <tcp_abort>
            }
            return ERR_ABRT;
 8008fec:	f06f 030c 	mvn.w	r3, #12
 8008ff0:	e1ce      	b.n	8009390 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fae0 	bl	80095b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008ff8:	4b63      	ldr	r3, [pc, #396]	; (8009188 <tcp_process+0x5b8>)
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <tcp_process+0x43c>
            recv_acked--;
 8009000:	4b61      	ldr	r3, [pc, #388]	; (8009188 <tcp_process+0x5b8>)
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	4b5f      	ldr	r3, [pc, #380]	; (8009188 <tcp_process+0x5b8>)
 800900a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009010:	009a      	lsls	r2, r3, #2
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	f241 111c 	movw	r1, #4380	; 0x111c
 800901c:	428b      	cmp	r3, r1
 800901e:	bf38      	it	cc
 8009020:	460b      	movcc	r3, r1
 8009022:	429a      	cmp	r2, r3
 8009024:	d204      	bcs.n	8009030 <tcp_process+0x460>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	b29b      	uxth	r3, r3
 800902e:	e00d      	b.n	800904c <tcp_process+0x47c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	f241 121c 	movw	r2, #4380	; 0x111c
 800903a:	4293      	cmp	r3, r2
 800903c:	d904      	bls.n	8009048 <tcp_process+0x478>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	b29b      	uxth	r3, r3
 8009046:	e001      	b.n	800904c <tcp_process+0x47c>
 8009048:	f241 131c 	movw	r3, #4380	; 0x111c
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009052:	4b4e      	ldr	r3, [pc, #312]	; (800918c <tcp_process+0x5bc>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d037      	beq.n	80090ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	8b5b      	ldrh	r3, [r3, #26]
 8009062:	f043 0302 	orr.w	r3, r3, #2
 8009066:	b29a      	uxth	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2207      	movs	r2, #7
 8009070:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009072:	e02c      	b.n	80090ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009074:	4b3b      	ldr	r3, [pc, #236]	; (8009164 <tcp_process+0x594>)
 8009076:	6819      	ldr	r1, [r3, #0]
 8009078:	4b3b      	ldr	r3, [pc, #236]	; (8009168 <tcp_process+0x598>)
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	4b3b      	ldr	r3, [pc, #236]	; (800916c <tcp_process+0x59c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009084:	4b3a      	ldr	r3, [pc, #232]	; (8009170 <tcp_process+0x5a0>)
 8009086:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009088:	885b      	ldrh	r3, [r3, #2]
 800908a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800908c:	4a38      	ldr	r2, [pc, #224]	; (8009170 <tcp_process+0x5a0>)
 800908e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009090:	8812      	ldrh	r2, [r2, #0]
 8009092:	b292      	uxth	r2, r2
 8009094:	9202      	str	r2, [sp, #8]
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	4b36      	ldr	r3, [pc, #216]	; (8009174 <tcp_process+0x5a4>)
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4b36      	ldr	r3, [pc, #216]	; (8009178 <tcp_process+0x5a8>)
 800909e:	4602      	mov	r2, r0
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f002 fbd1 	bl	800b848 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80090a6:	e167      	b.n	8009378 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80090a8:	4b2d      	ldr	r3, [pc, #180]	; (8009160 <tcp_process+0x590>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8161 	beq.w	8009378 <tcp_process+0x7a8>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	1e5a      	subs	r2, r3, #1
 80090bc:	4b2b      	ldr	r3, [pc, #172]	; (800916c <tcp_process+0x59c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	f040 8159 	bne.w	8009378 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f002 f9b6 	bl	800b438 <tcp_rexmit>
      break;
 80090cc:	e154      	b.n	8009378 <tcp_process+0x7a8>
 80090ce:	e153      	b.n	8009378 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa71 	bl	80095b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80090d6:	4b2d      	ldr	r3, [pc, #180]	; (800918c <tcp_process+0x5bc>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 814c 	beq.w	800937c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	8b5b      	ldrh	r3, [r3, #26]
 80090e8:	f043 0302 	orr.w	r3, r3, #2
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2207      	movs	r2, #7
 80090f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80090f8:	e140      	b.n	800937c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa5c 	bl	80095b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009100:	4b22      	ldr	r3, [pc, #136]	; (800918c <tcp_process+0x5bc>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d071      	beq.n	80091f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800910c:	4b14      	ldr	r3, [pc, #80]	; (8009160 <tcp_process+0x590>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d060      	beq.n	80091da <tcp_process+0x60a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800911c:	4b11      	ldr	r3, [pc, #68]	; (8009164 <tcp_process+0x594>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d15a      	bne.n	80091da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009128:	2b00      	cmp	r3, #0
 800912a:	d156      	bne.n	80091da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8b5b      	ldrh	r3, [r3, #26]
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fe fdbc 	bl	8007cb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009140:	4b13      	ldr	r3, [pc, #76]	; (8009190 <tcp_process+0x5c0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	429a      	cmp	r2, r3
 8009148:	d105      	bne.n	8009156 <tcp_process+0x586>
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <tcp_process+0x5c0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4a0f      	ldr	r2, [pc, #60]	; (8009190 <tcp_process+0x5c0>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	e02e      	b.n	80091b4 <tcp_process+0x5e4>
 8009156:	4b0e      	ldr	r3, [pc, #56]	; (8009190 <tcp_process+0x5c0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e027      	b.n	80091ae <tcp_process+0x5de>
 800915e:	bf00      	nop
 8009160:	2000a998 	.word	0x2000a998
 8009164:	2000a990 	.word	0x2000a990
 8009168:	2000a996 	.word	0x2000a996
 800916c:	2000a98c 	.word	0x2000a98c
 8009170:	2000a97c 	.word	0x2000a97c
 8009174:	20005234 	.word	0x20005234
 8009178:	20005238 	.word	0x20005238
 800917c:	0801172c 	.word	0x0801172c
 8009180:	080119cc 	.word	0x080119cc
 8009184:	08011778 	.word	0x08011778
 8009188:	2000a994 	.word	0x2000a994
 800918c:	2000a999 	.word	0x2000a999
 8009190:	2000a960 	.word	0x2000a960
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	429a      	cmp	r2, r3
 800919c:	d104      	bne.n	80091a8 <tcp_process+0x5d8>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	e005      	b.n	80091b4 <tcp_process+0x5e4>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1ef      	bne.n	8009194 <tcp_process+0x5c4>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	60da      	str	r2, [r3, #12]
 80091ba:	4b77      	ldr	r3, [pc, #476]	; (8009398 <tcp_process+0x7c8>)
 80091bc:	2201      	movs	r2, #1
 80091be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	220a      	movs	r2, #10
 80091c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80091c6:	4b75      	ldr	r3, [pc, #468]	; (800939c <tcp_process+0x7cc>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	4a73      	ldr	r2, [pc, #460]	; (800939c <tcp_process+0x7cc>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	f002 fcfa 	bl	800bbcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80091d8:	e0d2      	b.n	8009380 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8b5b      	ldrh	r3, [r3, #26]
 80091de:	f043 0302 	orr.w	r3, r3, #2
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2208      	movs	r2, #8
 80091ec:	751a      	strb	r2, [r3, #20]
      break;
 80091ee:	e0c7      	b.n	8009380 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091f0:	4b6b      	ldr	r3, [pc, #428]	; (80093a0 <tcp_process+0x7d0>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 80c1 	beq.w	8009380 <tcp_process+0x7b0>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009202:	4b68      	ldr	r3, [pc, #416]	; (80093a4 <tcp_process+0x7d4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	f040 80ba 	bne.w	8009380 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009210:	2b00      	cmp	r3, #0
 8009212:	f040 80b5 	bne.w	8009380 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2206      	movs	r2, #6
 800921a:	751a      	strb	r2, [r3, #20]
      break;
 800921c:	e0b0      	b.n	8009380 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f9ca 	bl	80095b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009224:	4b60      	ldr	r3, [pc, #384]	; (80093a8 <tcp_process+0x7d8>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80a9 	beq.w	8009384 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	8b5b      	ldrh	r3, [r3, #26]
 8009236:	f043 0302 	orr.w	r3, r3, #2
 800923a:	b29a      	uxth	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fe fd39 	bl	8007cb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009246:	4b59      	ldr	r3, [pc, #356]	; (80093ac <tcp_process+0x7dc>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d105      	bne.n	800925c <tcp_process+0x68c>
 8009250:	4b56      	ldr	r3, [pc, #344]	; (80093ac <tcp_process+0x7dc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	4a55      	ldr	r2, [pc, #340]	; (80093ac <tcp_process+0x7dc>)
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	e013      	b.n	8009284 <tcp_process+0x6b4>
 800925c:	4b53      	ldr	r3, [pc, #332]	; (80093ac <tcp_process+0x7dc>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	e00c      	b.n	800927e <tcp_process+0x6ae>
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	429a      	cmp	r2, r3
 800926c:	d104      	bne.n	8009278 <tcp_process+0x6a8>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	60da      	str	r2, [r3, #12]
 8009276:	e005      	b.n	8009284 <tcp_process+0x6b4>
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1ef      	bne.n	8009264 <tcp_process+0x694>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	4b43      	ldr	r3, [pc, #268]	; (8009398 <tcp_process+0x7c8>)
 800928c:	2201      	movs	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	220a      	movs	r2, #10
 8009294:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009296:	4b41      	ldr	r3, [pc, #260]	; (800939c <tcp_process+0x7cc>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]
 800929e:	4a3f      	ldr	r2, [pc, #252]	; (800939c <tcp_process+0x7cc>)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	f002 fc92 	bl	800bbcc <tcp_timer_needed>
      }
      break;
 80092a8:	e06c      	b.n	8009384 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f984 	bl	80095b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80092b0:	4b3b      	ldr	r3, [pc, #236]	; (80093a0 <tcp_process+0x7d0>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d065      	beq.n	8009388 <tcp_process+0x7b8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c0:	4b38      	ldr	r3, [pc, #224]	; (80093a4 <tcp_process+0x7d4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d15f      	bne.n	8009388 <tcp_process+0x7b8>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d15b      	bne.n	8009388 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7fe fcf1 	bl	8007cb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80092d6:	4b35      	ldr	r3, [pc, #212]	; (80093ac <tcp_process+0x7dc>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d105      	bne.n	80092ec <tcp_process+0x71c>
 80092e0:	4b32      	ldr	r3, [pc, #200]	; (80093ac <tcp_process+0x7dc>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	4a31      	ldr	r2, [pc, #196]	; (80093ac <tcp_process+0x7dc>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	e013      	b.n	8009314 <tcp_process+0x744>
 80092ec:	4b2f      	ldr	r3, [pc, #188]	; (80093ac <tcp_process+0x7dc>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e00c      	b.n	800930e <tcp_process+0x73e>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d104      	bne.n	8009308 <tcp_process+0x738>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	60da      	str	r2, [r3, #12]
 8009306:	e005      	b.n	8009314 <tcp_process+0x744>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1ef      	bne.n	80092f4 <tcp_process+0x724>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	60da      	str	r2, [r3, #12]
 800931a:	4b1f      	ldr	r3, [pc, #124]	; (8009398 <tcp_process+0x7c8>)
 800931c:	2201      	movs	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	220a      	movs	r2, #10
 8009324:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009326:	4b1d      	ldr	r3, [pc, #116]	; (800939c <tcp_process+0x7cc>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	60da      	str	r2, [r3, #12]
 800932e:	4a1b      	ldr	r2, [pc, #108]	; (800939c <tcp_process+0x7cc>)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	f002 fc4a 	bl	800bbcc <tcp_timer_needed>
      }
      break;
 8009338:	e026      	b.n	8009388 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f93c 	bl	80095b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009340:	4b17      	ldr	r3, [pc, #92]	; (80093a0 <tcp_process+0x7d0>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01f      	beq.n	800938c <tcp_process+0x7bc>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009350:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <tcp_process+0x7d4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d119      	bne.n	800938c <tcp_process+0x7bc>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d115      	bne.n	800938c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <tcp_process+0x7d8>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f043 0310 	orr.w	r3, r3, #16
 8009368:	b2da      	uxtb	r2, r3
 800936a:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <tcp_process+0x7d8>)
 800936c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800936e:	e00d      	b.n	800938c <tcp_process+0x7bc>
    default:
      break;
 8009370:	bf00      	nop
 8009372:	e00c      	b.n	800938e <tcp_process+0x7be>
      break;
 8009374:	bf00      	nop
 8009376:	e00a      	b.n	800938e <tcp_process+0x7be>
      break;
 8009378:	bf00      	nop
 800937a:	e008      	b.n	800938e <tcp_process+0x7be>
      break;
 800937c:	bf00      	nop
 800937e:	e006      	b.n	800938e <tcp_process+0x7be>
      break;
 8009380:	bf00      	nop
 8009382:	e004      	b.n	800938e <tcp_process+0x7be>
      break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <tcp_process+0x7be>
      break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <tcp_process+0x7be>
      break;
 800938c:	bf00      	nop
  }
  return ERR_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3724      	adds	r7, #36	; 0x24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd90      	pop	{r4, r7, pc}
 8009398:	2000a968 	.word	0x2000a968
 800939c:	2000a964 	.word	0x2000a964
 80093a0:	2000a998 	.word	0x2000a998
 80093a4:	2000a990 	.word	0x2000a990
 80093a8:	2000a999 	.word	0x2000a999
 80093ac:	2000a960 	.word	0x2000a960

080093b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80093b0:	b590      	push	{r4, r7, lr}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <tcp_oos_insert_segment+0x1e>
 80093c0:	4b3b      	ldr	r3, [pc, #236]	; (80094b0 <tcp_oos_insert_segment+0x100>)
 80093c2:	f240 421f 	movw	r2, #1055	; 0x41f
 80093c6:	493b      	ldr	r1, [pc, #236]	; (80094b4 <tcp_oos_insert_segment+0x104>)
 80093c8:	483b      	ldr	r0, [pc, #236]	; (80094b8 <tcp_oos_insert_segment+0x108>)
 80093ca:	f005 fe77 	bl	800f0bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	899b      	ldrh	r3, [r3, #12]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fb fc0e 	bl	8004bf8 <lwip_htons>
 80093dc:	4603      	mov	r3, r0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d028      	beq.n	800943a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80093e8:	6838      	ldr	r0, [r7, #0]
 80093ea:	f7fe fa63 	bl	80078b4 <tcp_segs_free>
    next = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	603b      	str	r3, [r7, #0]
 80093f2:	e056      	b.n	80094a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	899b      	ldrh	r3, [r3, #12]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fb fbfb 	bl	8004bf8 <lwip_htons>
 8009402:	4603      	mov	r3, r0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00d      	beq.n	800942a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	899b      	ldrh	r3, [r3, #12]
 8009414:	b29c      	uxth	r4, r3
 8009416:	2001      	movs	r0, #1
 8009418:	f7fb fbee 	bl	8004bf8 <lwip_htons>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	4322      	orrs	r2, r4
 8009426:	b292      	uxth	r2, r2
 8009428:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7fe fa52 	bl	80078de <tcp_seg_free>
    while (next &&
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00e      	beq.n	800945e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	891b      	ldrh	r3, [r3, #8]
 8009444:	461a      	mov	r2, r3
 8009446:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <tcp_oos_insert_segment+0x10c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	441a      	add	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	8909      	ldrh	r1, [r1, #8]
 8009456:	440b      	add	r3, r1
 8009458:	1ad3      	subs	r3, r2, r3
    while (next &&
 800945a:	2b00      	cmp	r3, #0
 800945c:	daca      	bge.n	80093f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01e      	beq.n	80094a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	891b      	ldrh	r3, [r3, #8]
 8009468:	461a      	mov	r2, r3
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <tcp_oos_insert_segment+0x10c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	441a      	add	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009478:	2b00      	cmp	r3, #0
 800947a:	dd12      	ble.n	80094a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	b29a      	uxth	r2, r3
 8009484:	4b0d      	ldr	r3, [pc, #52]	; (80094bc <tcp_oos_insert_segment+0x10c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	b29a      	uxth	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	891b      	ldrh	r3, [r3, #8]
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7fc fd83 	bl	8005fa8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	601a      	str	r2, [r3, #0]
}
 80094a8:	bf00      	nop
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd90      	pop	{r4, r7, pc}
 80094b0:	0801172c 	.word	0x0801172c
 80094b4:	080119ec 	.word	0x080119ec
 80094b8:	08011778 	.word	0x08011778
 80094bc:	2000a98c 	.word	0x2000a98c

080094c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80094c0:	b5b0      	push	{r4, r5, r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80094ce:	e03e      	b.n	800954e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fc ff70 	bl	80063c4 <pbuf_clen>
 80094e4:	4603      	mov	r3, r0
 80094e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80094ee:	8a7a      	ldrh	r2, [r7, #18]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d906      	bls.n	8009502 <tcp_free_acked_segments+0x42>
 80094f4:	4b2a      	ldr	r3, [pc, #168]	; (80095a0 <tcp_free_acked_segments+0xe0>)
 80094f6:	f240 4257 	movw	r2, #1111	; 0x457
 80094fa:	492a      	ldr	r1, [pc, #168]	; (80095a4 <tcp_free_acked_segments+0xe4>)
 80094fc:	482a      	ldr	r0, [pc, #168]	; (80095a8 <tcp_free_acked_segments+0xe8>)
 80094fe:	f005 fddd 	bl	800f0bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009508:	8a7b      	ldrh	r3, [r7, #18]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	891a      	ldrh	r2, [r3, #8]
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <tcp_free_acked_segments+0xec>)
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	4413      	add	r3, r2
 800951e:	b29a      	uxth	r2, r3
 8009520:	4b22      	ldr	r3, [pc, #136]	; (80095ac <tcp_free_acked_segments+0xec>)
 8009522:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009524:	6978      	ldr	r0, [r7, #20]
 8009526:	f7fe f9da 	bl	80078de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <tcp_free_acked_segments+0x8e>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <tcp_free_acked_segments+0x8e>
 8009540:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <tcp_free_acked_segments+0xe0>)
 8009542:	f240 4261 	movw	r2, #1121	; 0x461
 8009546:	491a      	ldr	r1, [pc, #104]	; (80095b0 <tcp_free_acked_segments+0xf0>)
 8009548:	4817      	ldr	r0, [pc, #92]	; (80095a8 <tcp_free_acked_segments+0xe8>)
 800954a:	f005 fdb7 	bl	800f0bc <iprintf>
  while (seg_list != NULL &&
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d020      	beq.n	8009596 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4618      	mov	r0, r3
 800955c:	f7fb fb61 	bl	8004c22 <lwip_htonl>
 8009560:	4604      	mov	r4, r0
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	461d      	mov	r5, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	899b      	ldrh	r3, [r3, #12]
 800956e:	b29b      	uxth	r3, r3
 8009570:	4618      	mov	r0, r3
 8009572:	f7fb fb41 	bl	8004bf8 <lwip_htons>
 8009576:	4603      	mov	r3, r0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <tcp_free_acked_segments+0xc6>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <tcp_free_acked_segments+0xc8>
 8009586:	2300      	movs	r3, #0
 8009588:	442b      	add	r3, r5
 800958a:	18e2      	adds	r2, r4, r3
 800958c:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <tcp_free_acked_segments+0xf4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009592:	2b00      	cmp	r3, #0
 8009594:	dd9c      	ble.n	80094d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009596:	68bb      	ldr	r3, [r7, #8]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bdb0      	pop	{r4, r5, r7, pc}
 80095a0:	0801172c 	.word	0x0801172c
 80095a4:	08011a14 	.word	0x08011a14
 80095a8:	08011778 	.word	0x08011778
 80095ac:	2000a994 	.word	0x2000a994
 80095b0:	08011a3c 	.word	0x08011a3c
 80095b4:	2000a990 	.word	0x2000a990

080095b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80095b8:	b5b0      	push	{r4, r5, r7, lr}
 80095ba:	b094      	sub	sp, #80	; 0x50
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <tcp_receive+0x20>
 80095ca:	4b91      	ldr	r3, [pc, #580]	; (8009810 <tcp_receive+0x258>)
 80095cc:	f240 427b 	movw	r2, #1147	; 0x47b
 80095d0:	4990      	ldr	r1, [pc, #576]	; (8009814 <tcp_receive+0x25c>)
 80095d2:	4891      	ldr	r0, [pc, #580]	; (8009818 <tcp_receive+0x260>)
 80095d4:	f005 fd72 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7d1b      	ldrb	r3, [r3, #20]
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d806      	bhi.n	80095ee <tcp_receive+0x36>
 80095e0:	4b8b      	ldr	r3, [pc, #556]	; (8009810 <tcp_receive+0x258>)
 80095e2:	f240 427c 	movw	r2, #1148	; 0x47c
 80095e6:	498d      	ldr	r1, [pc, #564]	; (800981c <tcp_receive+0x264>)
 80095e8:	488b      	ldr	r0, [pc, #556]	; (8009818 <tcp_receive+0x260>)
 80095ea:	f005 fd67 	bl	800f0bc <iprintf>

  if (flags & TCP_ACK) {
 80095ee:	4b8c      	ldr	r3, [pc, #560]	; (8009820 <tcp_receive+0x268>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 8264 	beq.w	8009ac4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009608:	4413      	add	r3, r2
 800960a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009610:	4b84      	ldr	r3, [pc, #528]	; (8009824 <tcp_receive+0x26c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	db1b      	blt.n	8009652 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800961e:	4b81      	ldr	r3, [pc, #516]	; (8009824 <tcp_receive+0x26c>)
 8009620:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009622:	429a      	cmp	r2, r3
 8009624:	d106      	bne.n	8009634 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800962a:	4b7f      	ldr	r3, [pc, #508]	; (8009828 <tcp_receive+0x270>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	db0e      	blt.n	8009652 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009638:	4b7b      	ldr	r3, [pc, #492]	; (8009828 <tcp_receive+0x270>)
 800963a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800963c:	429a      	cmp	r2, r3
 800963e:	d125      	bne.n	800968c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009640:	4b7a      	ldr	r3, [pc, #488]	; (800982c <tcp_receive+0x274>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	89db      	ldrh	r3, [r3, #14]
 8009646:	b29a      	uxth	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800964e:	429a      	cmp	r2, r3
 8009650:	d91c      	bls.n	800968c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009652:	4b76      	ldr	r3, [pc, #472]	; (800982c <tcp_receive+0x274>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	89db      	ldrh	r3, [r3, #14]
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800966c:	429a      	cmp	r2, r3
 800966e:	d205      	bcs.n	800967c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800967c:	4b69      	ldr	r3, [pc, #420]	; (8009824 <tcp_receive+0x26c>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009684:	4b68      	ldr	r3, [pc, #416]	; (8009828 <tcp_receive+0x270>)
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800968c:	4b66      	ldr	r3, [pc, #408]	; (8009828 <tcp_receive+0x270>)
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	dc58      	bgt.n	800974c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800969a:	4b65      	ldr	r3, [pc, #404]	; (8009830 <tcp_receive+0x278>)
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d14b      	bne.n	800973a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80096ac:	4413      	add	r3, r2
 80096ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d142      	bne.n	800973a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	db3d      	blt.n	800973a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096c2:	4b59      	ldr	r3, [pc, #356]	; (8009828 <tcp_receive+0x270>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d137      	bne.n	800973a <tcp_receive+0x182>
              found_dupack = 1;
 80096ca:	2301      	movs	r3, #1
 80096cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096d4:	2bff      	cmp	r3, #255	; 0xff
 80096d6:	d007      	beq.n	80096e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096de:	3301      	adds	r3, #1
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d91b      	bls.n	800972a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096fc:	4413      	add	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009706:	429a      	cmp	r2, r3
 8009708:	d30a      	bcc.n	8009720 <tcp_receive+0x168>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009714:	4413      	add	r3, r2
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800971e:	e004      	b.n	800972a <tcp_receive+0x172>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009730:	2b02      	cmp	r3, #2
 8009732:	d902      	bls.n	800973a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 feeb 	bl	800b510 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800973a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 8161 	bne.w	8009a04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800974a:	e15b      	b.n	8009a04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800974c:	4b36      	ldr	r3, [pc, #216]	; (8009828 <tcp_receive+0x270>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	f2c0 814e 	blt.w	80099fa <tcp_receive+0x442>
 800975e:	4b32      	ldr	r3, [pc, #200]	; (8009828 <tcp_receive+0x270>)
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	f300 8146 	bgt.w	80099fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8b5b      	ldrh	r3, [r3, #26]
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	d010      	beq.n	800979c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8b5b      	ldrh	r3, [r3, #26]
 800977e:	f023 0304 	bic.w	r3, r3, #4
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80097aa:	10db      	asrs	r3, r3, #3
 80097ac:	b21b      	sxth	r3, r3
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	b21a      	sxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80097c4:	4b18      	ldr	r3, [pc, #96]	; (8009828 <tcp_receive+0x270>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80097dc:	4b12      	ldr	r3, [pc, #72]	; (8009828 <tcp_receive+0x270>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7d1b      	ldrb	r3, [r3, #20]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	f240 8097 	bls.w	800991c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d245      	bcs.n	800988a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	8b5b      	ldrh	r3, [r3, #26]
 8009802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009806:	2b00      	cmp	r3, #0
 8009808:	d014      	beq.n	8009834 <tcp_receive+0x27c>
 800980a:	2301      	movs	r3, #1
 800980c:	e013      	b.n	8009836 <tcp_receive+0x27e>
 800980e:	bf00      	nop
 8009810:	0801172c 	.word	0x0801172c
 8009814:	08011a5c 	.word	0x08011a5c
 8009818:	08011778 	.word	0x08011778
 800981c:	08011a78 	.word	0x08011a78
 8009820:	2000a998 	.word	0x2000a998
 8009824:	2000a98c 	.word	0x2000a98c
 8009828:	2000a990 	.word	0x2000a990
 800982c:	2000a97c 	.word	0x2000a97c
 8009830:	2000a996 	.word	0x2000a996
 8009834:	2302      	movs	r3, #2
 8009836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800983a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009844:	fb12 f303 	smulbb	r3, r2, r3
 8009848:	b29b      	uxth	r3, r3
 800984a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800984c:	4293      	cmp	r3, r2
 800984e:	bf28      	it	cs
 8009850:	4613      	movcs	r3, r2
 8009852:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800985a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800985c:	4413      	add	r3, r2
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009866:	429a      	cmp	r2, r3
 8009868:	d309      	bcc.n	800987e <tcp_receive+0x2c6>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009872:	4413      	add	r3, r2
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800987c:	e04e      	b.n	800991c <tcp_receive+0x364>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009884:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009888:	e048      	b.n	800991c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009892:	4413      	add	r3, r2
 8009894:	b29a      	uxth	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800989c:	429a      	cmp	r2, r3
 800989e:	d309      	bcc.n	80098b4 <tcp_receive+0x2fc>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80098a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098a8:	4413      	add	r3, r2
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80098b2:	e004      	b.n	80098be <tcp_receive+0x306>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d326      	bcc.n	800991c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098ee:	4413      	add	r3, r2
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d30a      	bcc.n	8009912 <tcp_receive+0x35a>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009906:	4413      	add	r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009910:	e004      	b.n	800991c <tcp_receive+0x364>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009924:	4a98      	ldr	r2, [pc, #608]	; (8009b88 <tcp_receive+0x5d0>)
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff fdca 	bl	80094c0 <tcp_free_acked_segments>
 800992c:	4602      	mov	r2, r0
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	4a94      	ldr	r2, [pc, #592]	; (8009b8c <tcp_receive+0x5d4>)
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fdbf 	bl	80094c0 <tcp_free_acked_segments>
 8009942:	4602      	mov	r2, r0
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009956:	861a      	strh	r2, [r3, #48]	; 0x30
 8009958:	e002      	b.n	8009960 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d103      	bne.n	8009976 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800997c:	4b84      	ldr	r3, [pc, #528]	; (8009b90 <tcp_receive+0x5d8>)
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	4413      	add	r3, r2
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8b5b      	ldrh	r3, [r3, #26]
 800998e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009992:	2b00      	cmp	r3, #0
 8009994:	d035      	beq.n	8009a02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999a:	2b00      	cmp	r3, #0
 800999c:	d118      	bne.n	80099d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fb f935 	bl	8004c22 <lwip_htonl>
 80099b8:	4603      	mov	r3, r0
 80099ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dc20      	bgt.n	8009a02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8b5b      	ldrh	r3, [r3, #26]
 80099c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099ce:	e018      	b.n	8009a02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fb f920 	bl	8004c22 <lwip_htonl>
 80099e2:	4603      	mov	r3, r0
 80099e4:	1ae3      	subs	r3, r4, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	dc0b      	bgt.n	8009a02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	8b5b      	ldrh	r3, [r3, #26]
 80099ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099f8:	e003      	b.n	8009a02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 ff76 	bl	800b8ec <tcp_send_empty_ack>
 8009a00:	e000      	b.n	8009a04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d05b      	beq.n	8009ac4 <tcp_receive+0x50c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a10:	4b60      	ldr	r3, [pc, #384]	; (8009b94 <tcp_receive+0x5dc>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	da54      	bge.n	8009ac4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009a1a:	4b5f      	ldr	r3, [pc, #380]	; (8009b98 <tcp_receive+0x5e0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009a2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a38:	10db      	asrs	r3, r3, #3
 8009a3a:	b21b      	sxth	r3, r3
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009a52:	4413      	add	r3, r2
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	b21a      	sxth	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009a5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da05      	bge.n	8009a70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009a64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009a68:	425b      	negs	r3, r3
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009a70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a7a:	109b      	asrs	r3, r3, #2
 8009a7c:	b21b      	sxth	r3, r3
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009a94:	4413      	add	r3, r2
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	b21a      	sxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009aa4:	10db      	asrs	r3, r3, #3
 8009aa6:	b21b      	sxth	r3, r3
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	b21a      	sxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009ac4:	4b35      	ldr	r3, [pc, #212]	; (8009b9c <tcp_receive+0x5e4>)
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 84e2 	beq.w	800a492 <tcp_receive+0xeda>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	7d1b      	ldrb	r3, [r3, #20]
 8009ad2:	2b06      	cmp	r3, #6
 8009ad4:	f200 84dd 	bhi.w	800a492 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009adc:	4b30      	ldr	r3, [pc, #192]	; (8009ba0 <tcp_receive+0x5e8>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f2c0 808f 	blt.w	8009c08 <tcp_receive+0x650>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aee:	4b2b      	ldr	r3, [pc, #172]	; (8009b9c <tcp_receive+0x5e4>)
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	4b2a      	ldr	r3, [pc, #168]	; (8009ba0 <tcp_receive+0x5e8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	440b      	add	r3, r1
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	3301      	adds	r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f300 8082 	bgt.w	8009c08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009b04:	4b27      	ldr	r3, [pc, #156]	; (8009ba4 <tcp_receive+0x5ec>)
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <tcp_receive+0x5e8>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009b16:	4b23      	ldr	r3, [pc, #140]	; (8009ba4 <tcp_receive+0x5ec>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <tcp_receive+0x574>
 8009b1e:	4b22      	ldr	r3, [pc, #136]	; (8009ba8 <tcp_receive+0x5f0>)
 8009b20:	f240 5294 	movw	r2, #1428	; 0x594
 8009b24:	4921      	ldr	r1, [pc, #132]	; (8009bac <tcp_receive+0x5f4>)
 8009b26:	4822      	ldr	r0, [pc, #136]	; (8009bb0 <tcp_receive+0x5f8>)
 8009b28:	f005 fac8 	bl	800f0bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d906      	bls.n	8009b44 <tcp_receive+0x58c>
 8009b36:	4b1c      	ldr	r3, [pc, #112]	; (8009ba8 <tcp_receive+0x5f0>)
 8009b38:	f240 5295 	movw	r2, #1429	; 0x595
 8009b3c:	491d      	ldr	r1, [pc, #116]	; (8009bb4 <tcp_receive+0x5fc>)
 8009b3e:	481c      	ldr	r0, [pc, #112]	; (8009bb0 <tcp_receive+0x5f8>)
 8009b40:	f005 fabc 	bl	800f0bc <iprintf>
      off = (u16_t)off32;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009b4a:	4b16      	ldr	r3, [pc, #88]	; (8009ba4 <tcp_receive+0x5ec>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	891b      	ldrh	r3, [r3, #8]
 8009b50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d906      	bls.n	8009b66 <tcp_receive+0x5ae>
 8009b58:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <tcp_receive+0x5f0>)
 8009b5a:	f240 5297 	movw	r2, #1431	; 0x597
 8009b5e:	4916      	ldr	r1, [pc, #88]	; (8009bb8 <tcp_receive+0x600>)
 8009b60:	4813      	ldr	r0, [pc, #76]	; (8009bb0 <tcp_receive+0x5f8>)
 8009b62:	f005 faab 	bl	800f0bc <iprintf>
      inseg.len -= off;
 8009b66:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <tcp_receive+0x5ec>)
 8009b68:	891a      	ldrh	r2, [r3, #8]
 8009b6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <tcp_receive+0x5ec>)
 8009b74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <tcp_receive+0x5ec>)
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	891a      	ldrh	r2, [r3, #8]
 8009b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009b84:	e02a      	b.n	8009bdc <tcp_receive+0x624>
 8009b86:	bf00      	nop
 8009b88:	08011a94 	.word	0x08011a94
 8009b8c:	08011a9c 	.word	0x08011a9c
 8009b90:	2000a994 	.word	0x2000a994
 8009b94:	2000a990 	.word	0x2000a990
 8009b98:	2000a954 	.word	0x2000a954
 8009b9c:	2000a996 	.word	0x2000a996
 8009ba0:	2000a98c 	.word	0x2000a98c
 8009ba4:	2000a96c 	.word	0x2000a96c
 8009ba8:	0801172c 	.word	0x0801172c
 8009bac:	08011aa4 	.word	0x08011aa4
 8009bb0:	08011778 	.word	0x08011778
 8009bb4:	08011ab4 	.word	0x08011ab4
 8009bb8:	08011ac4 	.word	0x08011ac4
        off -= p->len;
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bbe:	895b      	ldrh	r3, [r3, #10]
 8009bc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009bce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bde:	895b      	ldrh	r3, [r3, #10]
 8009be0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d8e9      	bhi.n	8009bbc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009be8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009bec:	4619      	mov	r1, r3
 8009bee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009bf0:	f7fc fada 	bl	80061a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	4a91      	ldr	r2, [pc, #580]	; (8009e40 <tcp_receive+0x888>)
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	4b91      	ldr	r3, [pc, #580]	; (8009e44 <tcp_receive+0x88c>)
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4a8f      	ldr	r2, [pc, #572]	; (8009e40 <tcp_receive+0x888>)
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009c06:	e00d      	b.n	8009c24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009c08:	4b8d      	ldr	r3, [pc, #564]	; (8009e40 <tcp_receive+0x888>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	da06      	bge.n	8009c24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	8b5b      	ldrh	r3, [r3, #26]
 8009c1a:	f043 0302 	orr.w	r3, r3, #2
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009c24:	4b86      	ldr	r3, [pc, #536]	; (8009e40 <tcp_receive+0x888>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f2c0 842a 	blt.w	800a488 <tcp_receive+0xed0>
 8009c34:	4b82      	ldr	r3, [pc, #520]	; (8009e40 <tcp_receive+0x888>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c40:	440b      	add	r3, r1
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	3301      	adds	r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f300 841e 	bgt.w	800a488 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c50:	4b7b      	ldr	r3, [pc, #492]	; (8009e40 <tcp_receive+0x888>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	f040 829a 	bne.w	800a18e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009c5a:	4b7a      	ldr	r3, [pc, #488]	; (8009e44 <tcp_receive+0x88c>)
 8009c5c:	891c      	ldrh	r4, [r3, #8]
 8009c5e:	4b79      	ldr	r3, [pc, #484]	; (8009e44 <tcp_receive+0x88c>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	899b      	ldrh	r3, [r3, #12]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fa ffc6 	bl	8004bf8 <lwip_htons>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0303 	and.w	r3, r3, #3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <tcp_receive+0x6c4>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e000      	b.n	8009c7e <tcp_receive+0x6c6>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4423      	add	r3, r4
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	4b71      	ldr	r3, [pc, #452]	; (8009e48 <tcp_receive+0x890>)
 8009c84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c8a:	4b6f      	ldr	r3, [pc, #444]	; (8009e48 <tcp_receive+0x890>)
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d275      	bcs.n	8009d7e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c92:	4b6c      	ldr	r3, [pc, #432]	; (8009e44 <tcp_receive+0x88c>)
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	899b      	ldrh	r3, [r3, #12]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fa ffac 	bl	8004bf8 <lwip_htons>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01f      	beq.n	8009cec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009cac:	4b65      	ldr	r3, [pc, #404]	; (8009e44 <tcp_receive+0x88c>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	899b      	ldrh	r3, [r3, #12]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	b21b      	sxth	r3, r3
 8009cb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009cba:	b21c      	sxth	r4, r3
 8009cbc:	4b61      	ldr	r3, [pc, #388]	; (8009e44 <tcp_receive+0x88c>)
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	899b      	ldrh	r3, [r3, #12]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fa ff97 	bl	8004bf8 <lwip_htons>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fa ff8e 	bl	8004bf8 <lwip_htons>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	b21b      	sxth	r3, r3
 8009ce0:	4323      	orrs	r3, r4
 8009ce2:	b21a      	sxth	r2, r3
 8009ce4:	4b57      	ldr	r3, [pc, #348]	; (8009e44 <tcp_receive+0x88c>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	b292      	uxth	r2, r2
 8009cea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009cf0:	4b54      	ldr	r3, [pc, #336]	; (8009e44 <tcp_receive+0x88c>)
 8009cf2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009cf4:	4b53      	ldr	r3, [pc, #332]	; (8009e44 <tcp_receive+0x88c>)
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	899b      	ldrh	r3, [r3, #12]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fa ff7b 	bl	8004bf8 <lwip_htons>
 8009d02:	4603      	mov	r3, r0
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <tcp_receive+0x762>
            inseg.len -= 1;
 8009d0e:	4b4d      	ldr	r3, [pc, #308]	; (8009e44 <tcp_receive+0x88c>)
 8009d10:	891b      	ldrh	r3, [r3, #8]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	4b4b      	ldr	r3, [pc, #300]	; (8009e44 <tcp_receive+0x88c>)
 8009d18:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009d1a:	4b4a      	ldr	r3, [pc, #296]	; (8009e44 <tcp_receive+0x88c>)
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	4a49      	ldr	r2, [pc, #292]	; (8009e44 <tcp_receive+0x88c>)
 8009d20:	8912      	ldrh	r2, [r2, #8]
 8009d22:	4611      	mov	r1, r2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fc f93f 	bl	8005fa8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009d2a:	4b46      	ldr	r3, [pc, #280]	; (8009e44 <tcp_receive+0x88c>)
 8009d2c:	891c      	ldrh	r4, [r3, #8]
 8009d2e:	4b45      	ldr	r3, [pc, #276]	; (8009e44 <tcp_receive+0x88c>)
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	899b      	ldrh	r3, [r3, #12]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fa ff5e 	bl	8004bf8 <lwip_htons>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <tcp_receive+0x794>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e000      	b.n	8009d4e <tcp_receive+0x796>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4423      	add	r3, r4
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	4b3d      	ldr	r3, [pc, #244]	; (8009e48 <tcp_receive+0x890>)
 8009d54:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009d56:	4b3c      	ldr	r3, [pc, #240]	; (8009e48 <tcp_receive+0x890>)
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4b38      	ldr	r3, [pc, #224]	; (8009e40 <tcp_receive+0x888>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	441a      	add	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d6a:	440b      	add	r3, r1
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d006      	beq.n	8009d7e <tcp_receive+0x7c6>
 8009d70:	4b36      	ldr	r3, [pc, #216]	; (8009e4c <tcp_receive+0x894>)
 8009d72:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009d76:	4936      	ldr	r1, [pc, #216]	; (8009e50 <tcp_receive+0x898>)
 8009d78:	4836      	ldr	r0, [pc, #216]	; (8009e54 <tcp_receive+0x89c>)
 8009d7a:	f005 f99f 	bl	800f0bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 80e7 	beq.w	8009f56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d88:	4b2e      	ldr	r3, [pc, #184]	; (8009e44 <tcp_receive+0x88c>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	899b      	ldrh	r3, [r3, #12]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fa ff31 	bl	8004bf8 <lwip_htons>
 8009d96:	4603      	mov	r3, r0
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d010      	beq.n	8009dc4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009da2:	e00a      	b.n	8009dba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f7fd fd92 	bl	80078de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f0      	bne.n	8009da4 <tcp_receive+0x7ec>
 8009dc2:	e0c8      	b.n	8009f56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009dca:	e052      	b.n	8009e72 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	899b      	ldrh	r3, [r3, #12]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fa ff0f 	bl	8004bf8 <lwip_htons>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d03d      	beq.n	8009e62 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009de6:	4b17      	ldr	r3, [pc, #92]	; (8009e44 <tcp_receive+0x88c>)
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	899b      	ldrh	r3, [r3, #12]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fa ff02 	bl	8004bf8 <lwip_htons>
 8009df4:	4603      	mov	r3, r0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d130      	bne.n	8009e62 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009e00:	4b10      	ldr	r3, [pc, #64]	; (8009e44 <tcp_receive+0x88c>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	899b      	ldrh	r3, [r3, #12]
 8009e06:	b29c      	uxth	r4, r3
 8009e08:	2001      	movs	r0, #1
 8009e0a:	f7fa fef5 	bl	8004bf8 <lwip_htons>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	461a      	mov	r2, r3
 8009e12:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <tcp_receive+0x88c>)
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	4322      	orrs	r2, r4
 8009e18:	b292      	uxth	r2, r2
 8009e1a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009e1c:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <tcp_receive+0x88c>)
 8009e1e:	891c      	ldrh	r4, [r3, #8]
 8009e20:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <tcp_receive+0x88c>)
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	899b      	ldrh	r3, [r3, #12]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fa fee5 	bl	8004bf8 <lwip_htons>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <tcp_receive+0x8a0>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e00d      	b.n	8009e5a <tcp_receive+0x8a2>
 8009e3e:	bf00      	nop
 8009e40:	2000a98c 	.word	0x2000a98c
 8009e44:	2000a96c 	.word	0x2000a96c
 8009e48:	2000a996 	.word	0x2000a996
 8009e4c:	0801172c 	.word	0x0801172c
 8009e50:	08011ad4 	.word	0x08011ad4
 8009e54:	08011778 	.word	0x08011778
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4423      	add	r3, r4
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	4b98      	ldr	r3, [pc, #608]	; (800a0c0 <tcp_receive+0xb08>)
 8009e60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e64:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009e6c:	6938      	ldr	r0, [r7, #16]
 8009e6e:	f7fd fd36 	bl	80078de <tcp_seg_free>
            while (next &&
 8009e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00e      	beq.n	8009e96 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009e78:	4b91      	ldr	r3, [pc, #580]	; (800a0c0 <tcp_receive+0xb08>)
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4b91      	ldr	r3, [pc, #580]	; (800a0c4 <tcp_receive+0xb0c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	441a      	add	r2, r3
 8009e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e8c:	8909      	ldrh	r1, [r1, #8]
 8009e8e:	440b      	add	r3, r1
 8009e90:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da9a      	bge.n	8009dcc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d059      	beq.n	8009f50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009e9c:	4b88      	ldr	r3, [pc, #544]	; (800a0c0 <tcp_receive+0xb08>)
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4b88      	ldr	r3, [pc, #544]	; (800a0c4 <tcp_receive+0xb0c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	441a      	add	r2, r3
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd4d      	ble.n	8009f50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	4b81      	ldr	r3, [pc, #516]	; (800a0c4 <tcp_receive+0xb0c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	4b80      	ldr	r3, [pc, #512]	; (800a0c8 <tcp_receive+0xb10>)
 8009ec8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009eca:	4b7f      	ldr	r3, [pc, #508]	; (800a0c8 <tcp_receive+0xb10>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	899b      	ldrh	r3, [r3, #12]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fa fe90 	bl	8004bf8 <lwip_htons>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <tcp_receive+0x938>
                inseg.len -= 1;
 8009ee4:	4b78      	ldr	r3, [pc, #480]	; (800a0c8 <tcp_receive+0xb10>)
 8009ee6:	891b      	ldrh	r3, [r3, #8]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	4b76      	ldr	r3, [pc, #472]	; (800a0c8 <tcp_receive+0xb10>)
 8009eee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009ef0:	4b75      	ldr	r3, [pc, #468]	; (800a0c8 <tcp_receive+0xb10>)
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4a74      	ldr	r2, [pc, #464]	; (800a0c8 <tcp_receive+0xb10>)
 8009ef6:	8912      	ldrh	r2, [r2, #8]
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fc f854 	bl	8005fa8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009f00:	4b71      	ldr	r3, [pc, #452]	; (800a0c8 <tcp_receive+0xb10>)
 8009f02:	891c      	ldrh	r4, [r3, #8]
 8009f04:	4b70      	ldr	r3, [pc, #448]	; (800a0c8 <tcp_receive+0xb10>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	899b      	ldrh	r3, [r3, #12]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fa fe73 	bl	8004bf8 <lwip_htons>
 8009f12:	4603      	mov	r3, r0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <tcp_receive+0x96a>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e000      	b.n	8009f24 <tcp_receive+0x96c>
 8009f22:	2300      	movs	r3, #0
 8009f24:	4423      	add	r3, r4
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	4b65      	ldr	r3, [pc, #404]	; (800a0c0 <tcp_receive+0xb08>)
 8009f2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009f2c:	4b64      	ldr	r3, [pc, #400]	; (800a0c0 <tcp_receive+0xb08>)
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	461a      	mov	r2, r3
 8009f32:	4b64      	ldr	r3, [pc, #400]	; (800a0c4 <tcp_receive+0xb0c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	441a      	add	r2, r3
 8009f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d006      	beq.n	8009f50 <tcp_receive+0x998>
 8009f42:	4b62      	ldr	r3, [pc, #392]	; (800a0cc <tcp_receive+0xb14>)
 8009f44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009f48:	4961      	ldr	r1, [pc, #388]	; (800a0d0 <tcp_receive+0xb18>)
 8009f4a:	4862      	ldr	r0, [pc, #392]	; (800a0d4 <tcp_receive+0xb1c>)
 8009f4c:	f005 f8b6 	bl	800f0bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009f56:	4b5a      	ldr	r3, [pc, #360]	; (800a0c0 <tcp_receive+0xb08>)
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4b59      	ldr	r3, [pc, #356]	; (800a0c4 <tcp_receive+0xb0c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	441a      	add	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f6a:	4b55      	ldr	r3, [pc, #340]	; (800a0c0 <tcp_receive+0xb08>)
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d206      	bcs.n	8009f80 <tcp_receive+0x9c8>
 8009f72:	4b56      	ldr	r3, [pc, #344]	; (800a0cc <tcp_receive+0xb14>)
 8009f74:	f240 6207 	movw	r2, #1543	; 0x607
 8009f78:	4957      	ldr	r1, [pc, #348]	; (800a0d8 <tcp_receive+0xb20>)
 8009f7a:	4856      	ldr	r0, [pc, #344]	; (800a0d4 <tcp_receive+0xb1c>)
 8009f7c:	f005 f89e 	bl	800f0bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f84:	4b4e      	ldr	r3, [pc, #312]	; (800a0c0 <tcp_receive+0xb08>)
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7fc ffc5 	bl	8006f20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009f96:	4b4c      	ldr	r3, [pc, #304]	; (800a0c8 <tcp_receive+0xb10>)
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	891b      	ldrh	r3, [r3, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d006      	beq.n	8009fae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009fa0:	4b49      	ldr	r3, [pc, #292]	; (800a0c8 <tcp_receive+0xb10>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	4a4d      	ldr	r2, [pc, #308]	; (800a0dc <tcp_receive+0xb24>)
 8009fa6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009fa8:	4b47      	ldr	r3, [pc, #284]	; (800a0c8 <tcp_receive+0xb10>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009fae:	4b46      	ldr	r3, [pc, #280]	; (800a0c8 <tcp_receive+0xb10>)
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	899b      	ldrh	r3, [r3, #12]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fa fe1e 	bl	8004bf8 <lwip_htons>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 80b8 	beq.w	800a13a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009fca:	4b45      	ldr	r3, [pc, #276]	; (800a0e0 <tcp_receive+0xb28>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	f043 0320 	orr.w	r3, r3, #32
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	4b42      	ldr	r3, [pc, #264]	; (800a0e0 <tcp_receive+0xb28>)
 8009fd6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009fd8:	e0af      	b.n	800a13a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fde:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4a36      	ldr	r2, [pc, #216]	; (800a0c4 <tcp_receive+0xb0c>)
 8009fea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	891b      	ldrh	r3, [r3, #8]
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	899b      	ldrh	r3, [r3, #12]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fa fdfc 	bl	8004bf8 <lwip_htons>
 800a000:	4603      	mov	r3, r0
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <tcp_receive+0xa58>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <tcp_receive+0xa5a>
 800a010:	2300      	movs	r3, #0
 800a012:	191a      	adds	r2, r3, r4
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	441a      	add	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a022:	461c      	mov	r4, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	891b      	ldrh	r3, [r3, #8]
 800a028:	461d      	mov	r5, r3
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	899b      	ldrh	r3, [r3, #12]
 800a030:	b29b      	uxth	r3, r3
 800a032:	4618      	mov	r0, r3
 800a034:	f7fa fde0 	bl	8004bf8 <lwip_htons>
 800a038:	4603      	mov	r3, r0
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <tcp_receive+0xa90>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <tcp_receive+0xa92>
 800a048:	2300      	movs	r3, #0
 800a04a:	442b      	add	r3, r5
 800a04c:	429c      	cmp	r4, r3
 800a04e:	d206      	bcs.n	800a05e <tcp_receive+0xaa6>
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <tcp_receive+0xb14>)
 800a052:	f240 622b 	movw	r2, #1579	; 0x62b
 800a056:	4923      	ldr	r1, [pc, #140]	; (800a0e4 <tcp_receive+0xb2c>)
 800a058:	481e      	ldr	r0, [pc, #120]	; (800a0d4 <tcp_receive+0xb1c>)
 800a05a:	f005 f82f 	bl	800f0bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	891b      	ldrh	r3, [r3, #8]
 800a062:	461c      	mov	r4, r3
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	899b      	ldrh	r3, [r3, #12]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fa fdc3 	bl	8004bf8 <lwip_htons>
 800a072:	4603      	mov	r3, r0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <tcp_receive+0xaca>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <tcp_receive+0xacc>
 800a082:	2300      	movs	r3, #0
 800a084:	1919      	adds	r1, r3, r4
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a08a:	b28b      	uxth	r3, r1
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	b29a      	uxth	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7fc ff43 	bl	8006f20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	891b      	ldrh	r3, [r3, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d028      	beq.n	800a0f6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a0a4:	4b0d      	ldr	r3, [pc, #52]	; (800a0dc <tcp_receive+0xb24>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01d      	beq.n	800a0e8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <tcp_receive+0xb24>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	f7fc f9be 	bl	8006438 <pbuf_cat>
 800a0bc:	e018      	b.n	800a0f0 <tcp_receive+0xb38>
 800a0be:	bf00      	nop
 800a0c0:	2000a996 	.word	0x2000a996
 800a0c4:	2000a98c 	.word	0x2000a98c
 800a0c8:	2000a96c 	.word	0x2000a96c
 800a0cc:	0801172c 	.word	0x0801172c
 800a0d0:	08011b0c 	.word	0x08011b0c
 800a0d4:	08011778 	.word	0x08011778
 800a0d8:	08011b48 	.word	0x08011b48
 800a0dc:	2000a99c 	.word	0x2000a99c
 800a0e0:	2000a999 	.word	0x2000a999
 800a0e4:	08011b68 	.word	0x08011b68
            } else {
              recv_data = cseg->p;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	4a70      	ldr	r2, [pc, #448]	; (800a2b0 <tcp_receive+0xcf8>)
 800a0ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	899b      	ldrh	r3, [r3, #12]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fa fd7a 	bl	8004bf8 <lwip_htons>
 800a104:	4603      	mov	r3, r0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00d      	beq.n	800a12c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a110:	4b68      	ldr	r3, [pc, #416]	; (800a2b4 <tcp_receive+0xcfc>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f043 0320 	orr.w	r3, r3, #32
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	4b66      	ldr	r3, [pc, #408]	; (800a2b4 <tcp_receive+0xcfc>)
 800a11c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7d1b      	ldrb	r3, [r3, #20]
 800a122:	2b04      	cmp	r3, #4
 800a124:	d102      	bne.n	800a12c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2207      	movs	r2, #7
 800a12a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a134:	68b8      	ldr	r0, [r7, #8]
 800a136:	f7fd fbd2 	bl	80078de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d008      	beq.n	800a154 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a14e:	429a      	cmp	r2, r3
 800a150:	f43f af43 	beq.w	8009fda <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	8b5b      	ldrh	r3, [r3, #26]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00e      	beq.n	800a17e <tcp_receive+0xbc6>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	8b5b      	ldrh	r3, [r3, #26]
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	b29a      	uxth	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	835a      	strh	r2, [r3, #26]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	8b5b      	ldrh	r3, [r3, #26]
 800a172:	f043 0302 	orr.w	r3, r3, #2
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a17c:	e188      	b.n	800a490 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8b5b      	ldrh	r3, [r3, #26]
 800a182:	f043 0301 	orr.w	r3, r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a18c:	e180      	b.n	800a490 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a192:	2b00      	cmp	r3, #0
 800a194:	d106      	bne.n	800a1a4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a196:	4848      	ldr	r0, [pc, #288]	; (800a2b8 <tcp_receive+0xd00>)
 800a198:	f7fd fbba 	bl	8007910 <tcp_seg_copy>
 800a19c:	4602      	mov	r2, r0
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	675a      	str	r2, [r3, #116]	; 0x74
 800a1a2:	e16d      	b.n	800a480 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1ae:	e157      	b.n	800a460 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	4b41      	ldr	r3, [pc, #260]	; (800a2bc <tcp_receive+0xd04>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d11d      	bne.n	800a1fa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a1be:	4b3e      	ldr	r3, [pc, #248]	; (800a2b8 <tcp_receive+0xd00>)
 800a1c0:	891a      	ldrh	r2, [r3, #8]
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	891b      	ldrh	r3, [r3, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	f240 814f 	bls.w	800a46a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1cc:	483a      	ldr	r0, [pc, #232]	; (800a2b8 <tcp_receive+0xd00>)
 800a1ce:	f7fd fb9f 	bl	8007910 <tcp_seg_copy>
 800a1d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8149 	beq.w	800a46e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <tcp_receive+0xc32>
                    prev->next = cseg;
 800a1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	e002      	b.n	800a1f0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a1f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	f7ff f8dc 	bl	80093b0 <tcp_oos_insert_segment>
                }
                break;
 800a1f8:	e139      	b.n	800a46e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d117      	bne.n	800a230 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a200:	4b2e      	ldr	r3, [pc, #184]	; (800a2bc <tcp_receive+0xd04>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	da57      	bge.n	800a2c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a210:	4829      	ldr	r0, [pc, #164]	; (800a2b8 <tcp_receive+0xd00>)
 800a212:	f7fd fb7d 	bl	8007910 <tcp_seg_copy>
 800a216:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8129 	beq.w	800a472 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a228:	69b8      	ldr	r0, [r7, #24]
 800a22a:	f7ff f8c1 	bl	80093b0 <tcp_oos_insert_segment>
                  }
                  break;
 800a22e:	e120      	b.n	800a472 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a230:	4b22      	ldr	r3, [pc, #136]	; (800a2bc <tcp_receive+0xd04>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	3b01      	subs	r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	db3e      	blt.n	800a2c0 <tcp_receive+0xd08>
 800a242:	4b1e      	ldr	r3, [pc, #120]	; (800a2bc <tcp_receive+0xd04>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	3301      	adds	r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	dc35      	bgt.n	800a2c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a254:	4818      	ldr	r0, [pc, #96]	; (800a2b8 <tcp_receive+0xd00>)
 800a256:	f7fd fb5b 	bl	8007910 <tcp_seg_copy>
 800a25a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 8109 	beq.w	800a476 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a26c:	8912      	ldrh	r2, [r2, #8]
 800a26e:	441a      	add	r2, r3
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <tcp_receive+0xd04>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	dd12      	ble.n	800a2a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a27a:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <tcp_receive+0xd04>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	b29a      	uxth	r2, r3
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b29b      	uxth	r3, r3
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a296:	891b      	ldrh	r3, [r3, #8]
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f7fb fe84 	bl	8005fa8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a2a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2a8:	69f8      	ldr	r0, [r7, #28]
 800a2aa:	f7ff f881 	bl	80093b0 <tcp_oos_insert_segment>
                  }
                  break;
 800a2ae:	e0e2      	b.n	800a476 <tcp_receive+0xebe>
 800a2b0:	2000a99c 	.word	0x2000a99c
 800a2b4:	2000a999 	.word	0x2000a999
 800a2b8:	2000a96c 	.word	0x2000a96c
 800a2bc:	2000a98c 	.word	0x2000a98c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f040 80c6 	bne.w	800a45a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a2ce:	4b80      	ldr	r3, [pc, #512]	; (800a4d0 <tcp_receive+0xf18>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f340 80bd 	ble.w	800a45a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	899b      	ldrh	r3, [r3, #12]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fa fc85 	bl	8004bf8 <lwip_htons>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f040 80bf 	bne.w	800a47a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a2fc:	4875      	ldr	r0, [pc, #468]	; (800a4d4 <tcp_receive+0xf1c>)
 800a2fe:	f7fd fb07 	bl	8007910 <tcp_seg_copy>
 800a302:	4602      	mov	r2, r0
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 80b6 	beq.w	800a47e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a31a:	8912      	ldrh	r2, [r2, #8]
 800a31c:	441a      	add	r2, r3
 800a31e:	4b6c      	ldr	r3, [pc, #432]	; (800a4d0 <tcp_receive+0xf18>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	dd12      	ble.n	800a34e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a328:	4b69      	ldr	r3, [pc, #420]	; (800a4d0 <tcp_receive+0xf18>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	b29b      	uxth	r3, r3
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	b29a      	uxth	r2, r3
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	891b      	ldrh	r3, [r3, #8]
 800a346:	4619      	mov	r1, r3
 800a348:	4610      	mov	r0, r2
 800a34a:	f7fb fe2d 	bl	8005fa8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a34e:	4b62      	ldr	r3, [pc, #392]	; (800a4d8 <tcp_receive+0xf20>)
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	4b5e      	ldr	r3, [pc, #376]	; (800a4d0 <tcp_receive+0xf18>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	441a      	add	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a362:	440b      	add	r3, r1
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	f340 8089 	ble.w	800a47e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	899b      	ldrh	r3, [r3, #12]
 800a374:	b29b      	uxth	r3, r3
 800a376:	4618      	mov	r0, r3
 800a378:	f7fa fc3e 	bl	8004bf8 <lwip_htons>
 800a37c:	4603      	mov	r3, r0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	2b00      	cmp	r3, #0
 800a386:	d022      	beq.n	800a3ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	899b      	ldrh	r3, [r3, #12]
 800a390:	b29b      	uxth	r3, r3
 800a392:	b21b      	sxth	r3, r3
 800a394:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a398:	b21c      	sxth	r4, r3
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	899b      	ldrh	r3, [r3, #12]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fa fc27 	bl	8004bf8 <lwip_htons>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fa fc1e 	bl	8004bf8 <lwip_htons>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	b21b      	sxth	r3, r3
 800a3c0:	4323      	orrs	r3, r4
 800a3c2:	b21a      	sxth	r2, r3
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d8:	4413      	add	r3, r2
 800a3da:	b299      	uxth	r1, r3
 800a3dc:	4b3c      	ldr	r3, [pc, #240]	; (800a4d0 <tcp_receive+0xf18>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	1a8a      	subs	r2, r1, r2
 800a3e8:	b292      	uxth	r2, r2
 800a3ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	891b      	ldrh	r3, [r3, #8]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7fb fdd4 	bl	8005fa8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	891c      	ldrh	r4, [r3, #8]
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	899b      	ldrh	r3, [r3, #12]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	4618      	mov	r0, r3
 800a412:	f7fa fbf1 	bl	8004bf8 <lwip_htons>
 800a416:	4603      	mov	r3, r0
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <tcp_receive+0xe6e>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <tcp_receive+0xe70>
 800a426:	2300      	movs	r3, #0
 800a428:	4423      	add	r3, r4
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	4b2a      	ldr	r3, [pc, #168]	; (800a4d8 <tcp_receive+0xf20>)
 800a42e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a430:	4b29      	ldr	r3, [pc, #164]	; (800a4d8 <tcp_receive+0xf20>)
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	4b26      	ldr	r3, [pc, #152]	; (800a4d0 <tcp_receive+0xf18>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	441a      	add	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a444:	440b      	add	r3, r1
 800a446:	429a      	cmp	r2, r3
 800a448:	d019      	beq.n	800a47e <tcp_receive+0xec6>
 800a44a:	4b24      	ldr	r3, [pc, #144]	; (800a4dc <tcp_receive+0xf24>)
 800a44c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a450:	4923      	ldr	r1, [pc, #140]	; (800a4e0 <tcp_receive+0xf28>)
 800a452:	4824      	ldr	r0, [pc, #144]	; (800a4e4 <tcp_receive+0xf2c>)
 800a454:	f004 fe32 	bl	800f0bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a458:	e011      	b.n	800a47e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	f47f aea4 	bne.w	800a1b0 <tcp_receive+0xbf8>
 800a468:	e00a      	b.n	800a480 <tcp_receive+0xec8>
                break;
 800a46a:	bf00      	nop
 800a46c:	e008      	b.n	800a480 <tcp_receive+0xec8>
                break;
 800a46e:	bf00      	nop
 800a470:	e006      	b.n	800a480 <tcp_receive+0xec8>
                  break;
 800a472:	bf00      	nop
 800a474:	e004      	b.n	800a480 <tcp_receive+0xec8>
                  break;
 800a476:	bf00      	nop
 800a478:	e002      	b.n	800a480 <tcp_receive+0xec8>
                  break;
 800a47a:	bf00      	nop
 800a47c:	e000      	b.n	800a480 <tcp_receive+0xec8>
                break;
 800a47e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 fa33 	bl	800b8ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a486:	e003      	b.n	800a490 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fa2f 	bl	800b8ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a48e:	e01a      	b.n	800a4c6 <tcp_receive+0xf0e>
 800a490:	e019      	b.n	800a4c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <tcp_receive+0xf18>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	db0a      	blt.n	800a4b6 <tcp_receive+0xefe>
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <tcp_receive+0xf18>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a4ac:	440b      	add	r3, r1
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	dd07      	ble.n	800a4c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	8b5b      	ldrh	r3, [r3, #26]
 800a4ba:	f043 0302 	orr.w	r3, r3, #2
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a4c4:	e7ff      	b.n	800a4c6 <tcp_receive+0xf0e>
 800a4c6:	bf00      	nop
 800a4c8:	3750      	adds	r7, #80	; 0x50
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	2000a98c 	.word	0x2000a98c
 800a4d4:	2000a96c 	.word	0x2000a96c
 800a4d8:	2000a996 	.word	0x2000a996
 800a4dc:	0801172c 	.word	0x0801172c
 800a4e0:	08011ad4 	.word	0x08011ad4
 800a4e4:	08011778 	.word	0x08011778

0800a4e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a4ee:	4b15      	ldr	r3, [pc, #84]	; (800a544 <tcp_get_next_optbyte+0x5c>)
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	b291      	uxth	r1, r2
 800a4f6:	4a13      	ldr	r2, [pc, #76]	; (800a544 <tcp_get_next_optbyte+0x5c>)
 800a4f8:	8011      	strh	r1, [r2, #0]
 800a4fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a4fc:	4b12      	ldr	r3, [pc, #72]	; (800a548 <tcp_get_next_optbyte+0x60>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <tcp_get_next_optbyte+0x26>
 800a504:	4b11      	ldr	r3, [pc, #68]	; (800a54c <tcp_get_next_optbyte+0x64>)
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	88fa      	ldrh	r2, [r7, #6]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d208      	bcs.n	800a520 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a50e:	4b10      	ldr	r3, [pc, #64]	; (800a550 <tcp_get_next_optbyte+0x68>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3314      	adds	r3, #20
 800a514:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	4413      	add	r3, r2
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	e00b      	b.n	800a538 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	b2da      	uxtb	r2, r3
 800a524:	4b09      	ldr	r3, [pc, #36]	; (800a54c <tcp_get_next_optbyte+0x64>)
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a52e:	4b06      	ldr	r3, [pc, #24]	; (800a548 <tcp_get_next_optbyte+0x60>)
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	797b      	ldrb	r3, [r7, #5]
 800a534:	4413      	add	r3, r2
 800a536:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	2000a988 	.word	0x2000a988
 800a548:	2000a984 	.word	0x2000a984
 800a54c:	2000a982 	.word	0x2000a982
 800a550:	2000a97c 	.word	0x2000a97c

0800a554 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <tcp_parseopt+0x1c>
 800a562:	4b32      	ldr	r3, [pc, #200]	; (800a62c <tcp_parseopt+0xd8>)
 800a564:	f240 727d 	movw	r2, #1917	; 0x77d
 800a568:	4931      	ldr	r1, [pc, #196]	; (800a630 <tcp_parseopt+0xdc>)
 800a56a:	4832      	ldr	r0, [pc, #200]	; (800a634 <tcp_parseopt+0xe0>)
 800a56c:	f004 fda6 	bl	800f0bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a570:	4b31      	ldr	r3, [pc, #196]	; (800a638 <tcp_parseopt+0xe4>)
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d055      	beq.n	800a624 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a578:	4b30      	ldr	r3, [pc, #192]	; (800a63c <tcp_parseopt+0xe8>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e045      	b.n	800a60c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a580:	f7ff ffb2 	bl	800a4e8 <tcp_get_next_optbyte>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d006      	beq.n	800a59c <tcp_parseopt+0x48>
 800a58e:	2b02      	cmp	r3, #2
 800a590:	dc2b      	bgt.n	800a5ea <tcp_parseopt+0x96>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d041      	beq.n	800a61a <tcp_parseopt+0xc6>
 800a596:	2b01      	cmp	r3, #1
 800a598:	d127      	bne.n	800a5ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a59a:	e037      	b.n	800a60c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a59c:	f7ff ffa4 	bl	800a4e8 <tcp_get_next_optbyte>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d13b      	bne.n	800a61e <tcp_parseopt+0xca>
 800a5a6:	4b25      	ldr	r3, [pc, #148]	; (800a63c <tcp_parseopt+0xe8>)
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	4a22      	ldr	r2, [pc, #136]	; (800a638 <tcp_parseopt+0xe4>)
 800a5ae:	8812      	ldrh	r2, [r2, #0]
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	da34      	bge.n	800a61e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a5b4:	f7ff ff98 	bl	800a4e8 <tcp_get_next_optbyte>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a5c0:	f7ff ff92 	bl	800a4e8 <tcp_get_next_optbyte>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	89bb      	ldrh	r3, [r7, #12]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a5ce:	89bb      	ldrh	r3, [r7, #12]
 800a5d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a5d4:	d804      	bhi.n	800a5e0 <tcp_parseopt+0x8c>
 800a5d6:	89bb      	ldrh	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <tcp_parseopt+0x8c>
 800a5dc:	89ba      	ldrh	r2, [r7, #12]
 800a5de:	e001      	b.n	800a5e4 <tcp_parseopt+0x90>
 800a5e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a5e8:	e010      	b.n	800a60c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a5ea:	f7ff ff7d 	bl	800a4e8 <tcp_get_next_optbyte>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a5f2:	7afb      	ldrb	r3, [r7, #11]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d914      	bls.n	800a622 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a5f8:	7afb      	ldrb	r3, [r7, #11]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <tcp_parseopt+0xe8>)
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	4413      	add	r3, r2
 800a602:	b29b      	uxth	r3, r3
 800a604:	3b02      	subs	r3, #2
 800a606:	b29a      	uxth	r2, r3
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <tcp_parseopt+0xe8>)
 800a60a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a60c:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <tcp_parseopt+0xe8>)
 800a60e:	881a      	ldrh	r2, [r3, #0]
 800a610:	4b09      	ldr	r3, [pc, #36]	; (800a638 <tcp_parseopt+0xe4>)
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d3b3      	bcc.n	800a580 <tcp_parseopt+0x2c>
 800a618:	e004      	b.n	800a624 <tcp_parseopt+0xd0>
          return;
 800a61a:	bf00      	nop
 800a61c:	e002      	b.n	800a624 <tcp_parseopt+0xd0>
            return;
 800a61e:	bf00      	nop
 800a620:	e000      	b.n	800a624 <tcp_parseopt+0xd0>
            return;
 800a622:	bf00      	nop
      }
    }
  }
}
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	0801172c 	.word	0x0801172c
 800a630:	08011b90 	.word	0x08011b90
 800a634:	08011778 	.word	0x08011778
 800a638:	2000a980 	.word	0x2000a980
 800a63c:	2000a988 	.word	0x2000a988

0800a640 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <tcp_trigger_input_pcb_close+0x1c>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	f043 0310 	orr.w	r3, r3, #16
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	4b03      	ldr	r3, [pc, #12]	; (800a65c <tcp_trigger_input_pcb_close+0x1c>)
 800a650:	701a      	strb	r2, [r3, #0]
}
 800a652:	bf00      	nop
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	2000a999 	.word	0x2000a999

0800a660 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <tcp_route+0x28>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	7a1b      	ldrb	r3, [r3, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d006      	beq.n	800a688 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	7a1b      	ldrb	r3, [r3, #8]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fb fab8 	bl	8005bf4 <netif_get_by_index>
 800a684:	4603      	mov	r3, r0
 800a686:	e003      	b.n	800a690 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f003 fa37 	bl	800dafc <ip4_route>
 800a68e:	4603      	mov	r3, r0
  }
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d105      	bne.n	800a6ba <tcp_create_segment+0x22>
 800a6ae:	4b44      	ldr	r3, [pc, #272]	; (800a7c0 <tcp_create_segment+0x128>)
 800a6b0:	22a3      	movs	r2, #163	; 0xa3
 800a6b2:	4944      	ldr	r1, [pc, #272]	; (800a7c4 <tcp_create_segment+0x12c>)
 800a6b4:	4844      	ldr	r0, [pc, #272]	; (800a7c8 <tcp_create_segment+0x130>)
 800a6b6:	f004 fd01 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d105      	bne.n	800a6cc <tcp_create_segment+0x34>
 800a6c0:	4b3f      	ldr	r3, [pc, #252]	; (800a7c0 <tcp_create_segment+0x128>)
 800a6c2:	22a4      	movs	r2, #164	; 0xa4
 800a6c4:	4941      	ldr	r1, [pc, #260]	; (800a7cc <tcp_create_segment+0x134>)
 800a6c6:	4840      	ldr	r0, [pc, #256]	; (800a7c8 <tcp_create_segment+0x130>)
 800a6c8:	f004 fcf8 	bl	800f0bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a6cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a6da:	2003      	movs	r0, #3
 800a6dc:	f7fa ff04 	bl	80054e8 <memp_malloc>
 800a6e0:	6138      	str	r0, [r7, #16]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d104      	bne.n	800a6f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a6e8:	68b8      	ldr	r0, [r7, #8]
 800a6ea:	f7fb fde3 	bl	80062b4 <pbuf_free>
    return NULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e061      	b.n	800a7b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a6f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	891a      	ldrh	r2, [r3, #8]
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	429a      	cmp	r2, r3
 800a710:	d205      	bcs.n	800a71e <tcp_create_segment+0x86>
 800a712:	4b2b      	ldr	r3, [pc, #172]	; (800a7c0 <tcp_create_segment+0x128>)
 800a714:	22b0      	movs	r2, #176	; 0xb0
 800a716:	492e      	ldr	r1, [pc, #184]	; (800a7d0 <tcp_create_segment+0x138>)
 800a718:	482b      	ldr	r0, [pc, #172]	; (800a7c8 <tcp_create_segment+0x130>)
 800a71a:	f004 fccf 	bl	800f0bc <iprintf>
  seg->len = p->tot_len - optlen;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	891a      	ldrh	r2, [r3, #8]
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	b29b      	uxth	r3, r3
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	b29a      	uxth	r2, r3
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a72e:	2114      	movs	r1, #20
 800a730:	68b8      	ldr	r0, [r7, #8]
 800a732:	f7fb fd29 	bl	8006188 <pbuf_add_header>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d004      	beq.n	800a746 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a73c:	6938      	ldr	r0, [r7, #16]
 800a73e:	f7fd f8ce 	bl	80078de <tcp_seg_free>
    return NULL;
 800a742:	2300      	movs	r3, #0
 800a744:	e037      	b.n	800a7b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8ada      	ldrh	r2, [r3, #22]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	68dc      	ldr	r4, [r3, #12]
 800a758:	4610      	mov	r0, r2
 800a75a:	f7fa fa4d 	bl	8004bf8 <lwip_htons>
 800a75e:	4603      	mov	r3, r0
 800a760:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	8b1a      	ldrh	r2, [r3, #24]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	68dc      	ldr	r4, [r3, #12]
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7fa fa44 	bl	8004bf8 <lwip_htons>
 800a770:	4603      	mov	r3, r0
 800a772:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	68dc      	ldr	r4, [r3, #12]
 800a778:	6838      	ldr	r0, [r7, #0]
 800a77a:	f7fa fa52 	bl	8004c22 <lwip_htonl>
 800a77e:	4603      	mov	r3, r0
 800a780:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	089b      	lsrs	r3, r3, #2
 800a786:	b2db      	uxtb	r3, r3
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3305      	adds	r3, #5
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	031b      	lsls	r3, r3, #12
 800a790:	b29a      	uxth	r2, r3
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	68dc      	ldr	r4, [r3, #12]
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fa fa2a 	bl	8004bf8 <lwip_htons>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	749a      	strb	r2, [r3, #18]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a7b4:	693b      	ldr	r3, [r7, #16]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	371c      	adds	r7, #28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd90      	pop	{r4, r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	08011bac 	.word	0x08011bac
 800a7c4:	08011be0 	.word	0x08011be0
 800a7c8:	08011c00 	.word	0x08011c00
 800a7cc:	08011c28 	.word	0x08011c28
 800a7d0:	08011c4c 	.word	0x08011c4c

0800a7d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b08b      	sub	sp, #44	; 0x2c
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61fb      	str	r3, [r7, #28]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <tcp_split_unsent_seg+0x2c>
 800a7f2:	4b95      	ldr	r3, [pc, #596]	; (800aa48 <tcp_split_unsent_seg+0x274>)
 800a7f4:	f240 324b 	movw	r2, #843	; 0x34b
 800a7f8:	4994      	ldr	r1, [pc, #592]	; (800aa4c <tcp_split_unsent_seg+0x278>)
 800a7fa:	4895      	ldr	r0, [pc, #596]	; (800aa50 <tcp_split_unsent_seg+0x27c>)
 800a7fc:	f004 fc5e 	bl	800f0bc <iprintf>

  useg = pcb->unsent;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a80c:	f04f 33ff 	mov.w	r3, #4294967295
 800a810:	e116      	b.n	800aa40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a812:	887b      	ldrh	r3, [r7, #2]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d109      	bne.n	800a82c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a818:	4b8b      	ldr	r3, [pc, #556]	; (800aa48 <tcp_split_unsent_seg+0x274>)
 800a81a:	f240 3253 	movw	r2, #851	; 0x353
 800a81e:	498d      	ldr	r1, [pc, #564]	; (800aa54 <tcp_split_unsent_seg+0x280>)
 800a820:	488b      	ldr	r0, [pc, #556]	; (800aa50 <tcp_split_unsent_seg+0x27c>)
 800a822:	f004 fc4b 	bl	800f0bc <iprintf>
    return ERR_VAL;
 800a826:	f06f 0305 	mvn.w	r3, #5
 800a82a:	e109      	b.n	800aa40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	891b      	ldrh	r3, [r3, #8]
 800a830:	887a      	ldrh	r2, [r7, #2]
 800a832:	429a      	cmp	r2, r3
 800a834:	d301      	bcc.n	800a83a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	e102      	b.n	800aa40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a83e:	887a      	ldrh	r2, [r7, #2]
 800a840:	429a      	cmp	r2, r3
 800a842:	d906      	bls.n	800a852 <tcp_split_unsent_seg+0x7e>
 800a844:	4b80      	ldr	r3, [pc, #512]	; (800aa48 <tcp_split_unsent_seg+0x274>)
 800a846:	f240 325b 	movw	r2, #859	; 0x35b
 800a84a:	4983      	ldr	r1, [pc, #524]	; (800aa58 <tcp_split_unsent_seg+0x284>)
 800a84c:	4880      	ldr	r0, [pc, #512]	; (800aa50 <tcp_split_unsent_seg+0x27c>)
 800a84e:	f004 fc35 	bl	800f0bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	891b      	ldrh	r3, [r3, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <tcp_split_unsent_seg+0x94>
 800a85a:	4b7b      	ldr	r3, [pc, #492]	; (800aa48 <tcp_split_unsent_seg+0x274>)
 800a85c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a860:	497e      	ldr	r1, [pc, #504]	; (800aa5c <tcp_split_unsent_seg+0x288>)
 800a862:	487b      	ldr	r0, [pc, #492]	; (800aa50 <tcp_split_unsent_seg+0x27c>)
 800a864:	f004 fc2a 	bl	800f0bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	7a9b      	ldrb	r3, [r3, #10]
 800a86c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	891a      	ldrh	r2, [r3, #8]
 800a87e:	887b      	ldrh	r3, [r7, #2]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a884:	7bbb      	ldrb	r3, [r7, #14]
 800a886:	b29a      	uxth	r2, r3
 800a888:	89bb      	ldrh	r3, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a892:	4619      	mov	r1, r3
 800a894:	2036      	movs	r0, #54	; 0x36
 800a896:	f7fb fa29 	bl	8005cec <pbuf_alloc>
 800a89a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 80b7 	beq.w	800aa12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	891a      	ldrh	r2, [r3, #8]
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	891b      	ldrh	r3, [r3, #8]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	887b      	ldrh	r3, [r7, #2]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	6858      	ldr	r0, [r3, #4]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	18d1      	adds	r1, r2, r3
 800a8c4:	897b      	ldrh	r3, [r7, #10]
 800a8c6:	89ba      	ldrh	r2, [r7, #12]
 800a8c8:	f7fb feee 	bl	80066a8 <pbuf_copy_partial>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	89bb      	ldrh	r3, [r7, #12]
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	f040 809f 	bne.w	800aa16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	899b      	ldrh	r3, [r3, #12]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fa f989 	bl	8004bf8 <lwip_htons>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a8f4:	7efb      	ldrb	r3, [r7, #27]
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d007      	beq.n	800a90e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a8fe:	7efb      	ldrb	r3, [r7, #27]
 800a900:	f023 0308 	bic.w	r3, r3, #8
 800a904:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a906:	7ebb      	ldrb	r3, [r7, #26]
 800a908:	f043 0308 	orr.w	r3, r3, #8
 800a90c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a90e:	7efb      	ldrb	r3, [r7, #27]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a918:	7efb      	ldrb	r3, [r7, #27]
 800a91a:	f023 0301 	bic.w	r3, r3, #1
 800a91e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a920:	7ebb      	ldrb	r3, [r7, #26]
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fa f977 	bl	8004c22 <lwip_htonl>
 800a934:	4602      	mov	r2, r0
 800a936:	887b      	ldrh	r3, [r7, #2]
 800a938:	18d1      	adds	r1, r2, r3
 800a93a:	7eba      	ldrb	r2, [r7, #26]
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	460b      	mov	r3, r1
 800a942:	6939      	ldr	r1, [r7, #16]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff fea7 	bl	800a698 <tcp_create_segment>
 800a94a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d063      	beq.n	800aa1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	4618      	mov	r0, r3
 800a958:	f7fb fd34 	bl	80063c4 <pbuf_clen>
 800a95c:	4603      	mov	r3, r0
 800a95e:	461a      	mov	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a966:	1a9b      	subs	r3, r3, r2
 800a968:	b29a      	uxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	6858      	ldr	r0, [r3, #4]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	891a      	ldrh	r2, [r3, #8]
 800a97a:	89bb      	ldrh	r3, [r7, #12]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	b29b      	uxth	r3, r3
 800a980:	4619      	mov	r1, r3
 800a982:	f7fb fb11 	bl	8005fa8 <pbuf_realloc>
  useg->len -= remainder;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	891a      	ldrh	r2, [r3, #8]
 800a98a:	89bb      	ldrh	r3, [r7, #12]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	b29a      	uxth	r2, r3
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	899b      	ldrh	r3, [r3, #12]
 800a99a:	b29c      	uxth	r4, r3
 800a99c:	7efb      	ldrb	r3, [r7, #27]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fa f929 	bl	8004bf8 <lwip_htons>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	4322      	orrs	r2, r4
 800a9b0:	b292      	uxth	r2, r2
 800a9b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fb fd03 	bl	80063c4 <pbuf_clen>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fb fcf4 	bl	80063c4 <pbuf_clen>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	461a      	mov	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9e6:	4413      	add	r3, r2
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e016      	b.n	800aa40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800aa12:	bf00      	nop
 800aa14:	e002      	b.n	800aa1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aa16:	bf00      	nop
 800aa18:	e000      	b.n	800aa1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aa1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <tcp_split_unsent_seg+0x25c>
 800aa22:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <tcp_split_unsent_seg+0x274>)
 800aa24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800aa28:	490d      	ldr	r1, [pc, #52]	; (800aa60 <tcp_split_unsent_seg+0x28c>)
 800aa2a:	4809      	ldr	r0, [pc, #36]	; (800aa50 <tcp_split_unsent_seg+0x27c>)
 800aa2c:	f004 fb46 	bl	800f0bc <iprintf>
  if (p != NULL) {
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f7fb fc3c 	bl	80062b4 <pbuf_free>
  }

  return ERR_MEM;
 800aa3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3724      	adds	r7, #36	; 0x24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd90      	pop	{r4, r7, pc}
 800aa48:	08011bac 	.word	0x08011bac
 800aa4c:	08011f40 	.word	0x08011f40
 800aa50:	08011c00 	.word	0x08011c00
 800aa54:	08011f64 	.word	0x08011f64
 800aa58:	08011f88 	.word	0x08011f88
 800aa5c:	08011f98 	.word	0x08011f98
 800aa60:	08011fa8 	.word	0x08011fa8

0800aa64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aa64:	b590      	push	{r4, r7, lr}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d106      	bne.n	800aa80 <tcp_send_fin+0x1c>
 800aa72:	4b21      	ldr	r3, [pc, #132]	; (800aaf8 <tcp_send_fin+0x94>)
 800aa74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aa78:	4920      	ldr	r1, [pc, #128]	; (800aafc <tcp_send_fin+0x98>)
 800aa7a:	4821      	ldr	r0, [pc, #132]	; (800ab00 <tcp_send_fin+0x9c>)
 800aa7c:	f004 fb1e 	bl	800f0bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d02e      	beq.n	800aae6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e002      	b.n	800aa96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f8      	bne.n	800aa90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	899b      	ldrh	r3, [r3, #12]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fa f8a6 	bl	8004bf8 <lwip_htons>
 800aaac:	4603      	mov	r3, r0
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d116      	bne.n	800aae6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	899b      	ldrh	r3, [r3, #12]
 800aabe:	b29c      	uxth	r4, r3
 800aac0:	2001      	movs	r0, #1
 800aac2:	f7fa f899 	bl	8004bf8 <lwip_htons>
 800aac6:	4603      	mov	r3, r0
 800aac8:	461a      	mov	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	4322      	orrs	r2, r4
 800aad0:	b292      	uxth	r2, r2
 800aad2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8b5b      	ldrh	r3, [r3, #26]
 800aad8:	f043 0320 	orr.w	r3, r3, #32
 800aadc:	b29a      	uxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	e004      	b.n	800aaf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aae6:	2101      	movs	r1, #1
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f80b 	bl	800ab04 <tcp_enqueue_flags>
 800aaee:	4603      	mov	r3, r0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd90      	pop	{r4, r7, pc}
 800aaf8:	08011bac 	.word	0x08011bac
 800aafc:	08011fb4 	.word	0x08011fb4
 800ab00:	08011c00 	.word	0x08011c00

0800ab04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	; 0x28
 800ab08:	af02      	add	r7, sp, #8
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <tcp_enqueue_flags+0x2c>
 800ab22:	4b67      	ldr	r3, [pc, #412]	; (800acc0 <tcp_enqueue_flags+0x1bc>)
 800ab24:	f240 4211 	movw	r2, #1041	; 0x411
 800ab28:	4966      	ldr	r1, [pc, #408]	; (800acc4 <tcp_enqueue_flags+0x1c0>)
 800ab2a:	4867      	ldr	r0, [pc, #412]	; (800acc8 <tcp_enqueue_flags+0x1c4>)
 800ab2c:	f004 fac6 	bl	800f0bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <tcp_enqueue_flags+0x40>
 800ab36:	4b62      	ldr	r3, [pc, #392]	; (800acc0 <tcp_enqueue_flags+0x1bc>)
 800ab38:	f240 4213 	movw	r2, #1043	; 0x413
 800ab3c:	4963      	ldr	r1, [pc, #396]	; (800accc <tcp_enqueue_flags+0x1c8>)
 800ab3e:	4862      	ldr	r0, [pc, #392]	; (800acc8 <tcp_enqueue_flags+0x1c4>)
 800ab40:	f004 fabc 	bl	800f0bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab52:	7ffb      	ldrb	r3, [r7, #31]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab66:	4619      	mov	r1, r3
 800ab68:	2036      	movs	r0, #54	; 0x36
 800ab6a:	f7fb f8bf 	bl	8005cec <pbuf_alloc>
 800ab6e:	6138      	str	r0, [r7, #16]
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	8b5b      	ldrh	r3, [r3, #26]
 800ab7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295
 800ab88:	e095      	b.n	800acb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	895a      	ldrh	r2, [r3, #10]
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d206      	bcs.n	800aba4 <tcp_enqueue_flags+0xa0>
 800ab96:	4b4a      	ldr	r3, [pc, #296]	; (800acc0 <tcp_enqueue_flags+0x1bc>)
 800ab98:	f240 4239 	movw	r2, #1081	; 0x439
 800ab9c:	494c      	ldr	r1, [pc, #304]	; (800acd0 <tcp_enqueue_flags+0x1cc>)
 800ab9e:	484a      	ldr	r0, [pc, #296]	; (800acc8 <tcp_enqueue_flags+0x1c4>)
 800aba0:	f004 fa8c 	bl	800f0bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aba8:	78fa      	ldrb	r2, [r7, #3]
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	460b      	mov	r3, r1
 800abb0:	6939      	ldr	r1, [r7, #16]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fd70 	bl	800a698 <tcp_create_segment>
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	8b5b      	ldrh	r3, [r3, #26]
 800abc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc8:	b29a      	uxth	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800abce:	f04f 33ff 	mov.w	r3, #4294967295
 800abd2:	e070      	b.n	800acb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f003 0303 	and.w	r3, r3, #3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d006      	beq.n	800abee <tcp_enqueue_flags+0xea>
 800abe0:	4b37      	ldr	r3, [pc, #220]	; (800acc0 <tcp_enqueue_flags+0x1bc>)
 800abe2:	f240 4242 	movw	r2, #1090	; 0x442
 800abe6:	493b      	ldr	r1, [pc, #236]	; (800acd4 <tcp_enqueue_flags+0x1d0>)
 800abe8:	4837      	ldr	r0, [pc, #220]	; (800acc8 <tcp_enqueue_flags+0x1c4>)
 800abea:	f004 fa67 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	891b      	ldrh	r3, [r3, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d006      	beq.n	800ac04 <tcp_enqueue_flags+0x100>
 800abf6:	4b32      	ldr	r3, [pc, #200]	; (800acc0 <tcp_enqueue_flags+0x1bc>)
 800abf8:	f240 4243 	movw	r2, #1091	; 0x443
 800abfc:	4936      	ldr	r1, [pc, #216]	; (800acd8 <tcp_enqueue_flags+0x1d4>)
 800abfe:	4832      	ldr	r0, [pc, #200]	; (800acc8 <tcp_enqueue_flags+0x1c4>)
 800ac00:	f004 fa5c 	bl	800f0bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d103      	bne.n	800ac14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	66da      	str	r2, [r3, #108]	; 0x6c
 800ac12:	e00d      	b.n	800ac30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac18:	61bb      	str	r3, [r7, #24]
 800ac1a:	e002      	b.n	800ac22 <tcp_enqueue_flags+0x11e>
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1f8      	bne.n	800ac1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <tcp_enqueue_flags+0x148>
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d006      	beq.n	800ac6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	8b5b      	ldrh	r3, [r3, #26]
 800ac64:	f043 0320 	orr.w	r3, r3, #32
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fb fba6 	bl	80063c4 <pbuf_clen>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac82:	4413      	add	r3, r2
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00e      	beq.n	800acb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <tcp_enqueue_flags+0x1b0>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d106      	bne.n	800acb4 <tcp_enqueue_flags+0x1b0>
 800aca6:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <tcp_enqueue_flags+0x1bc>)
 800aca8:	f240 4265 	movw	r2, #1125	; 0x465
 800acac:	490b      	ldr	r1, [pc, #44]	; (800acdc <tcp_enqueue_flags+0x1d8>)
 800acae:	4806      	ldr	r0, [pc, #24]	; (800acc8 <tcp_enqueue_flags+0x1c4>)
 800acb0:	f004 fa04 	bl	800f0bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	08011bac 	.word	0x08011bac
 800acc4:	08011fd0 	.word	0x08011fd0
 800acc8:	08011c00 	.word	0x08011c00
 800accc:	08012028 	.word	0x08012028
 800acd0:	08012048 	.word	0x08012048
 800acd4:	08012084 	.word	0x08012084
 800acd8:	0801209c 	.word	0x0801209c
 800acdc:	080120c8 	.word	0x080120c8

0800ace0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ace0:	b5b0      	push	{r4, r5, r7, lr}
 800ace2:	b08a      	sub	sp, #40	; 0x28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <tcp_output+0x1c>
 800acee:	4b8a      	ldr	r3, [pc, #552]	; (800af18 <tcp_output+0x238>)
 800acf0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800acf4:	4989      	ldr	r1, [pc, #548]	; (800af1c <tcp_output+0x23c>)
 800acf6:	488a      	ldr	r0, [pc, #552]	; (800af20 <tcp_output+0x240>)
 800acf8:	f004 f9e0 	bl	800f0bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	7d1b      	ldrb	r3, [r3, #20]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d106      	bne.n	800ad12 <tcp_output+0x32>
 800ad04:	4b84      	ldr	r3, [pc, #528]	; (800af18 <tcp_output+0x238>)
 800ad06:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ad0a:	4986      	ldr	r1, [pc, #536]	; (800af24 <tcp_output+0x244>)
 800ad0c:	4884      	ldr	r0, [pc, #528]	; (800af20 <tcp_output+0x240>)
 800ad0e:	f004 f9d5 	bl	800f0bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ad12:	4b85      	ldr	r3, [pc, #532]	; (800af28 <tcp_output+0x248>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d101      	bne.n	800ad20 <tcp_output+0x40>
    return ERR_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e1ce      	b.n	800b0be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	bf28      	it	cs
 800ad30:	4613      	movcs	r3, r2
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10b      	bne.n	800ad5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	8b5b      	ldrh	r3, [r3, #26]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 81aa 	beq.w	800b0a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fdcb 	bl	800b8ec <tcp_send_empty_ack>
 800ad56:	4603      	mov	r3, r0
 800ad58:	e1b1      	b.n	800b0be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	461a      	mov	r2, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7ff fc7c 	bl	800a660 <tcp_route>
 800ad68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <tcp_output+0x96>
    return ERR_RTE;
 800ad70:	f06f 0303 	mvn.w	r3, #3
 800ad74:	e1a3      	b.n	800b0be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <tcp_output+0xa4>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d111      	bne.n	800ada8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <tcp_output+0xb0>
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	e000      	b.n	800ad92 <tcp_output+0xb2>
 800ad90:	2300      	movs	r3, #0
 800ad92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <tcp_output+0xc0>
      return ERR_RTE;
 800ad9a:	f06f 0303 	mvn.w	r3, #3
 800ad9e:	e18e      	b.n	800b0be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f9 ff37 	bl	8004c22 <lwip_htonl>
 800adb4:	4602      	mov	r2, r0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbe:	8912      	ldrh	r2, [r2, #8]
 800adc0:	4413      	add	r3, r2
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d227      	bcs.n	800ae18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adce:	461a      	mov	r2, r3
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	4293      	cmp	r3, r2
 800add4:	d114      	bne.n	800ae00 <tcp_output+0x120>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adda:	2b00      	cmp	r3, #0
 800addc:	d110      	bne.n	800ae00 <tcp_output+0x120>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10b      	bne.n	800ae00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	8b5b      	ldrh	r3, [r3, #26]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 814d 	beq.w	800b0a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fd6c 	bl	800b8ec <tcp_send_empty_ack>
 800ae14:	4603      	mov	r3, r0
 800ae16:	e152      	b.n	800b0be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 811c 	beq.w	800b066 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ae2e:	e002      	b.n	800ae36 <tcp_output+0x156>
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	623b      	str	r3, [r7, #32]
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1f8      	bne.n	800ae30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ae3e:	e112      	b.n	800b066 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	899b      	ldrh	r3, [r3, #12]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f9 fed5 	bl	8004bf8 <lwip_htons>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	f003 0304 	and.w	r3, r3, #4
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d006      	beq.n	800ae68 <tcp_output+0x188>
 800ae5a:	4b2f      	ldr	r3, [pc, #188]	; (800af18 <tcp_output+0x238>)
 800ae5c:	f240 5236 	movw	r2, #1334	; 0x536
 800ae60:	4932      	ldr	r1, [pc, #200]	; (800af2c <tcp_output+0x24c>)
 800ae62:	482f      	ldr	r0, [pc, #188]	; (800af20 <tcp_output+0x240>)
 800ae64:	f004 f92a 	bl	800f0bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d01f      	beq.n	800aeb0 <tcp_output+0x1d0>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	8b5b      	ldrh	r3, [r3, #26]
 800ae74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d119      	bne.n	800aeb0 <tcp_output+0x1d0>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <tcp_output+0x1bc>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d110      	bne.n	800aeb0 <tcp_output+0x1d0>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae92:	891a      	ldrh	r2, [r3, #8]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d209      	bcs.n	800aeb0 <tcp_output+0x1d0>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d004      	beq.n	800aeb0 <tcp_output+0x1d0>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d901      	bls.n	800aeb4 <tcp_output+0x1d4>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e000      	b.n	800aeb6 <tcp_output+0x1d6>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d106      	bne.n	800aec8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	8b5b      	ldrh	r3, [r3, #26]
 800aebe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80e4 	beq.w	800b090 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	7d1b      	ldrb	r3, [r3, #20]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d00d      	beq.n	800aeec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	899b      	ldrh	r3, [r3, #12]
 800aed6:	b29c      	uxth	r4, r3
 800aed8:	2010      	movs	r0, #16
 800aeda:	f7f9 fe8d 	bl	8004bf8 <lwip_htons>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	4322      	orrs	r2, r4
 800aee8:	b292      	uxth	r2, r2
 800aeea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	6879      	ldr	r1, [r7, #4]
 800aef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aef2:	f000 f909 	bl	800b108 <tcp_output_segment>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aefa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d016      	beq.n	800af30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8b5b      	ldrh	r3, [r3, #26]
 800af06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	835a      	strh	r2, [r3, #26]
      return err;
 800af10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af14:	e0d3      	b.n	800b0be <tcp_output+0x3de>
 800af16:	bf00      	nop
 800af18:	08011bac 	.word	0x08011bac
 800af1c:	080120f0 	.word	0x080120f0
 800af20:	08011c00 	.word	0x08011c00
 800af24:	08012108 	.word	0x08012108
 800af28:	2000a9a0 	.word	0x2000a9a0
 800af2c:	08012130 	.word	0x08012130
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7d1b      	ldrb	r3, [r3, #20]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d006      	beq.n	800af4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	8b5b      	ldrh	r3, [r3, #26]
 800af44:	f023 0303 	bic.w	r3, r3, #3
 800af48:	b29a      	uxth	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	4618      	mov	r0, r3
 800af56:	f7f9 fe64 	bl	8004c22 <lwip_htonl>
 800af5a:	4604      	mov	r4, r0
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	891b      	ldrh	r3, [r3, #8]
 800af60:	461d      	mov	r5, r3
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	899b      	ldrh	r3, [r3, #12]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f9 fe44 	bl	8004bf8 <lwip_htons>
 800af70:	4603      	mov	r3, r0
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 0303 	and.w	r3, r3, #3
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <tcp_output+0x2a0>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e000      	b.n	800af82 <tcp_output+0x2a2>
 800af80:	2300      	movs	r3, #0
 800af82:	442b      	add	r3, r5
 800af84:	4423      	add	r3, r4
 800af86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	da02      	bge.n	800af9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	891b      	ldrh	r3, [r3, #8]
 800af9e:	461c      	mov	r4, r3
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	899b      	ldrh	r3, [r3, #12]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f9 fe25 	bl	8004bf8 <lwip_htons>
 800afae:	4603      	mov	r3, r0
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <tcp_output+0x2de>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <tcp_output+0x2e0>
 800afbe:	2300      	movs	r3, #0
 800afc0:	4423      	add	r3, r4
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d049      	beq.n	800b05a <tcp_output+0x37a>
      seg->next = NULL;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d105      	bne.n	800afe0 <tcp_output+0x300>
        pcb->unacked = seg;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	623b      	str	r3, [r7, #32]
 800afde:	e03f      	b.n	800b060 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f9 fe1b 	bl	8004c22 <lwip_htonl>
 800afec:	4604      	mov	r4, r0
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f9 fe14 	bl	8004c22 <lwip_htonl>
 800affa:	4603      	mov	r3, r0
 800affc:	1ae3      	subs	r3, r4, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	da24      	bge.n	800b04c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3370      	adds	r3, #112	; 0x70
 800b006:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b008:	e002      	b.n	800b010 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d011      	beq.n	800b03c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	4618      	mov	r0, r3
 800b022:	f7f9 fdfe 	bl	8004c22 <lwip_htonl>
 800b026:	4604      	mov	r4, r0
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f9 fdf7 	bl	8004c22 <lwip_htonl>
 800b034:	4603      	mov	r3, r0
 800b036:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b038:	2b00      	cmp	r3, #0
 800b03a:	dbe6      	blt.n	800b00a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	e009      	b.n	800b060 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b050:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	623b      	str	r3, [r7, #32]
 800b058:	e002      	b.n	800b060 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b05a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b05c:	f7fc fc3f 	bl	80078de <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d012      	beq.n	800b092 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	4618      	mov	r0, r3
 800b074:	f7f9 fdd5 	bl	8004c22 <lwip_htonl>
 800b078:	4602      	mov	r2, r0
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b082:	8912      	ldrh	r2, [r2, #8]
 800b084:	4413      	add	r3, r2
  while (seg != NULL &&
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	f4bf aed9 	bcs.w	800ae40 <tcp_output+0x160>
 800b08e:	e000      	b.n	800b092 <tcp_output+0x3b2>
      break;
 800b090:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	2b00      	cmp	r3, #0
 800b098:	d108      	bne.n	800b0ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b0a2:	e004      	b.n	800b0ae <tcp_output+0x3ce>
    goto output_done;
 800b0a4:	bf00      	nop
 800b0a6:	e002      	b.n	800b0ae <tcp_output+0x3ce>
    goto output_done;
 800b0a8:	bf00      	nop
 800b0aa:	e000      	b.n	800b0ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b0ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	8b5b      	ldrh	r3, [r3, #26]
 800b0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3728      	adds	r7, #40	; 0x28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b0c6:	bf00      	nop

0800b0c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <tcp_output_segment_busy+0x1c>
 800b0d6:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <tcp_output_segment_busy+0x34>)
 800b0d8:	f240 529a 	movw	r2, #1434	; 0x59a
 800b0dc:	4908      	ldr	r1, [pc, #32]	; (800b100 <tcp_output_segment_busy+0x38>)
 800b0de:	4809      	ldr	r0, [pc, #36]	; (800b104 <tcp_output_segment_busy+0x3c>)
 800b0e0:	f003 ffec 	bl	800f0bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	7b9b      	ldrb	r3, [r3, #14]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d001      	beq.n	800b0f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e000      	b.n	800b0f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	08011bac 	.word	0x08011bac
 800b100:	08012148 	.word	0x08012148
 800b104:	08011c00 	.word	0x08011c00

0800b108 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b108:	b5b0      	push	{r4, r5, r7, lr}
 800b10a:	b08c      	sub	sp, #48	; 0x30
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <tcp_output_segment+0x20>
 800b11a:	4b63      	ldr	r3, [pc, #396]	; (800b2a8 <tcp_output_segment+0x1a0>)
 800b11c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b120:	4962      	ldr	r1, [pc, #392]	; (800b2ac <tcp_output_segment+0x1a4>)
 800b122:	4863      	ldr	r0, [pc, #396]	; (800b2b0 <tcp_output_segment+0x1a8>)
 800b124:	f003 ffca 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <tcp_output_segment+0x34>
 800b12e:	4b5e      	ldr	r3, [pc, #376]	; (800b2a8 <tcp_output_segment+0x1a0>)
 800b130:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b134:	495f      	ldr	r1, [pc, #380]	; (800b2b4 <tcp_output_segment+0x1ac>)
 800b136:	485e      	ldr	r0, [pc, #376]	; (800b2b0 <tcp_output_segment+0x1a8>)
 800b138:	f003 ffc0 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <tcp_output_segment+0x48>
 800b142:	4b59      	ldr	r3, [pc, #356]	; (800b2a8 <tcp_output_segment+0x1a0>)
 800b144:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b148:	495b      	ldr	r1, [pc, #364]	; (800b2b8 <tcp_output_segment+0x1b0>)
 800b14a:	4859      	ldr	r0, [pc, #356]	; (800b2b0 <tcp_output_segment+0x1a8>)
 800b14c:	f003 ffb6 	bl	800f0bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff ffb9 	bl	800b0c8 <tcp_output_segment_busy>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e09f      	b.n	800b2a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68dc      	ldr	r4, [r3, #12]
 800b168:	4610      	mov	r0, r2
 800b16a:	f7f9 fd5a 	bl	8004c22 <lwip_htonl>
 800b16e:	4603      	mov	r3, r0
 800b170:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	68dc      	ldr	r4, [r3, #12]
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7f9 fd3c 	bl	8004bf8 <lwip_htons>
 800b180:	4603      	mov	r3, r0
 800b182:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b18c:	441a      	add	r2, r3
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	3314      	adds	r3, #20
 800b198:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	7a9b      	ldrb	r3, [r3, #10]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d015      	beq.n	800b1d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b1b2:	f7fc fe8b 	bl	8007ecc <tcp_eff_send_mss_netif>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b1ba:	8b7b      	ldrh	r3, [r7, #26]
 800b1bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7f9 fd2e 	bl	8004c22 <lwip_htonl>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da02      	bge.n	800b1e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10c      	bne.n	800b204 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b1ea:	4b34      	ldr	r3, [pc, #208]	; (800b2bc <tcp_output_segment+0x1b4>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7f9 fd12 	bl	8004c22 <lwip_htonl>
 800b1fe:	4602      	mov	r2, r0
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	8959      	ldrh	r1, [r3, #10]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	8b3a      	ldrh	r2, [r7, #24]
 800b21e:	1a8a      	subs	r2, r1, r2
 800b220:	b292      	uxth	r2, r2
 800b222:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	8919      	ldrh	r1, [r3, #8]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	8b3a      	ldrh	r2, [r7, #24]
 800b230:	1a8a      	subs	r2, r1, r2
 800b232:	b292      	uxth	r2, r2
 800b234:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	68d2      	ldr	r2, [r2, #12]
 800b23e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	741a      	strb	r2, [r3, #16]
 800b248:	2200      	movs	r2, #0
 800b24a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f103 0214 	add.w	r2, r3, #20
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	7a9b      	ldrb	r3, [r3, #10]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	f003 0304 	and.w	r3, r3, #4
 800b25e:	4413      	add	r3, r2
 800b260:	69fa      	ldr	r2, [r7, #28]
 800b262:	429a      	cmp	r2, r3
 800b264:	d006      	beq.n	800b274 <tcp_output_segment+0x16c>
 800b266:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <tcp_output_segment+0x1a0>)
 800b268:	f240 621c 	movw	r2, #1564	; 0x61c
 800b26c:	4914      	ldr	r1, [pc, #80]	; (800b2c0 <tcp_output_segment+0x1b8>)
 800b26e:	4810      	ldr	r0, [pc, #64]	; (800b2b0 <tcp_output_segment+0x1a8>)
 800b270:	f003 ff24 	bl	800f0bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6858      	ldr	r0, [r3, #4]
 800b278:	68b9      	ldr	r1, [r7, #8]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	1d1c      	adds	r4, r3, #4
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	7add      	ldrb	r5, [r3, #11]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	7a9b      	ldrb	r3, [r3, #10]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	9202      	str	r2, [sp, #8]
 800b28a:	2206      	movs	r2, #6
 800b28c:	9201      	str	r2, [sp, #4]
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	462b      	mov	r3, r5
 800b292:	4622      	mov	r2, r4
 800b294:	f002 fdf0 	bl	800de78 <ip4_output_if>
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b29c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bdb0      	pop	{r4, r5, r7, pc}
 800b2a8:	08011bac 	.word	0x08011bac
 800b2ac:	08012170 	.word	0x08012170
 800b2b0:	08011c00 	.word	0x08011c00
 800b2b4:	08012190 	.word	0x08012190
 800b2b8:	080121b0 	.word	0x080121b0
 800b2bc:	2000a954 	.word	0x2000a954
 800b2c0:	080121d4 	.word	0x080121d4

0800b2c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b2c4:	b5b0      	push	{r4, r5, r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <tcp_rexmit_rto_prepare+0x1c>
 800b2d2:	4b31      	ldr	r3, [pc, #196]	; (800b398 <tcp_rexmit_rto_prepare+0xd4>)
 800b2d4:	f240 6263 	movw	r2, #1635	; 0x663
 800b2d8:	4930      	ldr	r1, [pc, #192]	; (800b39c <tcp_rexmit_rto_prepare+0xd8>)
 800b2da:	4831      	ldr	r0, [pc, #196]	; (800b3a0 <tcp_rexmit_rto_prepare+0xdc>)
 800b2dc:	f003 feee 	bl	800f0bc <iprintf>

  if (pcb->unacked == NULL) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b2e8:	f06f 0305 	mvn.w	r3, #5
 800b2ec:	e050      	b.n	800b390 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e00b      	b.n	800b30e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7ff fee6 	bl	800b0c8 <tcp_output_segment_busy>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b302:	f06f 0305 	mvn.w	r3, #5
 800b306:	e043      	b.n	800b390 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1ef      	bne.n	800b2f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff fed6 	bl	800b0c8 <tcp_output_segment_busy>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b322:	f06f 0305 	mvn.w	r3, #5
 800b326:	e033      	b.n	800b390 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	4618      	mov	r0, r3
 800b354:	f7f9 fc65 	bl	8004c22 <lwip_htonl>
 800b358:	4604      	mov	r4, r0
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	891b      	ldrh	r3, [r3, #8]
 800b35e:	461d      	mov	r5, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	899b      	ldrh	r3, [r3, #12]
 800b366:	b29b      	uxth	r3, r3
 800b368:	4618      	mov	r0, r3
 800b36a:	f7f9 fc45 	bl	8004bf8 <lwip_htons>
 800b36e:	4603      	mov	r3, r0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <tcp_rexmit_rto_prepare+0xba>
 800b37a:	2301      	movs	r3, #1
 800b37c:	e000      	b.n	800b380 <tcp_rexmit_rto_prepare+0xbc>
 800b37e:	2300      	movs	r3, #0
 800b380:	442b      	add	r3, r5
 800b382:	18e2      	adds	r2, r4, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bdb0      	pop	{r4, r5, r7, pc}
 800b398:	08011bac 	.word	0x08011bac
 800b39c:	080121e8 	.word	0x080121e8
 800b3a0:	08011c00 	.word	0x08011c00

0800b3a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <tcp_rexmit_rto_commit+0x1c>
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	; (800b3e8 <tcp_rexmit_rto_commit+0x44>)
 800b3b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b3b8:	490c      	ldr	r1, [pc, #48]	; (800b3ec <tcp_rexmit_rto_commit+0x48>)
 800b3ba:	480d      	ldr	r0, [pc, #52]	; (800b3f0 <tcp_rexmit_rto_commit+0x4c>)
 800b3bc:	f003 fe7e 	bl	800f0bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3c6:	2bff      	cmp	r3, #255	; 0xff
 800b3c8:	d007      	beq.n	800b3da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fc80 	bl	800ace0 <tcp_output>
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	08011bac 	.word	0x08011bac
 800b3ec:	0801220c 	.word	0x0801220c
 800b3f0:	08011c00 	.word	0x08011c00

0800b3f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d106      	bne.n	800b410 <tcp_rexmit_rto+0x1c>
 800b402:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <tcp_rexmit_rto+0x38>)
 800b404:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b408:	4909      	ldr	r1, [pc, #36]	; (800b430 <tcp_rexmit_rto+0x3c>)
 800b40a:	480a      	ldr	r0, [pc, #40]	; (800b434 <tcp_rexmit_rto+0x40>)
 800b40c:	f003 fe56 	bl	800f0bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff ff57 	bl	800b2c4 <tcp_rexmit_rto_prepare>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff ffc1 	bl	800b3a4 <tcp_rexmit_rto_commit>
  }
}
 800b422:	bf00      	nop
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	08011bac 	.word	0x08011bac
 800b430:	08012230 	.word	0x08012230
 800b434:	08011c00 	.word	0x08011c00

0800b438 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b438:	b590      	push	{r4, r7, lr}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <tcp_rexmit+0x1c>
 800b446:	4b2f      	ldr	r3, [pc, #188]	; (800b504 <tcp_rexmit+0xcc>)
 800b448:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b44c:	492e      	ldr	r1, [pc, #184]	; (800b508 <tcp_rexmit+0xd0>)
 800b44e:	482f      	ldr	r0, [pc, #188]	; (800b50c <tcp_rexmit+0xd4>)
 800b450:	f003 fe34 	bl	800f0bc <iprintf>

  if (pcb->unacked == NULL) {
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b45c:	f06f 0305 	mvn.w	r3, #5
 800b460:	e04c      	b.n	800b4fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b466:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b468:	68b8      	ldr	r0, [r7, #8]
 800b46a:	f7ff fe2d 	bl	800b0c8 <tcp_output_segment_busy>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b474:	f06f 0305 	mvn.w	r3, #5
 800b478:	e040      	b.n	800b4fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	336c      	adds	r3, #108	; 0x6c
 800b486:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b488:	e002      	b.n	800b490 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d011      	beq.n	800b4bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f9 fbbe 	bl	8004c22 <lwip_htonl>
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f9 fbb7 	bl	8004c22 <lwip_htonl>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	dbe6      	blt.n	800b48a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d103      	bne.n	800b4da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4e0:	2bff      	cmp	r3, #255	; 0xff
 800b4e2:	d007      	beq.n	800b4f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}
 800b504:	08011bac 	.word	0x08011bac
 800b508:	0801224c 	.word	0x0801224c
 800b50c:	08011c00 	.word	0x08011c00

0800b510 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <tcp_rexmit_fast+0x1c>
 800b51e:	4b2a      	ldr	r3, [pc, #168]	; (800b5c8 <tcp_rexmit_fast+0xb8>)
 800b520:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b524:	4929      	ldr	r1, [pc, #164]	; (800b5cc <tcp_rexmit_fast+0xbc>)
 800b526:	482a      	ldr	r0, [pc, #168]	; (800b5d0 <tcp_rexmit_fast+0xc0>)
 800b528:	f003 fdc8 	bl	800f0bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b530:	2b00      	cmp	r3, #0
 800b532:	d044      	beq.n	800b5be <tcp_rexmit_fast+0xae>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8b5b      	ldrh	r3, [r3, #26]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d13e      	bne.n	800b5be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff ff79 	bl	800b438 <tcp_rexmit>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d138      	bne.n	800b5be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b558:	4293      	cmp	r3, r2
 800b55a:	bf28      	it	cs
 800b55c:	4613      	movcs	r3, r2
 800b55e:	b29b      	uxth	r3, r3
 800b560:	0fda      	lsrs	r2, r3, #31
 800b562:	4413      	add	r3, r2
 800b564:	105b      	asrs	r3, r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b574:	461a      	mov	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b57a:	005b      	lsls	r3, r3, #1
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d206      	bcs.n	800b58e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b598:	4619      	mov	r1, r3
 800b59a:	0049      	lsls	r1, r1, #1
 800b59c:	440b      	add	r3, r1
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	8b5b      	ldrh	r3, [r3, #26]
 800b5ae:	f043 0304 	orr.w	r3, r3, #4
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	08011bac 	.word	0x08011bac
 800b5cc:	08012264 	.word	0x08012264
 800b5d0:	08011c00 	.word	0x08011c00

0800b5d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	607b      	str	r3, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	817b      	strh	r3, [r7, #10]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b5e6:	897a      	ldrh	r2, [r7, #10]
 800b5e8:	893b      	ldrh	r3, [r7, #8]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	3314      	adds	r3, #20
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	2022      	movs	r0, #34	; 0x22
 800b5fa:	f7fa fb77 	bl	8005cec <pbuf_alloc>
 800b5fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d04d      	beq.n	800b6a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b606:	897b      	ldrh	r3, [r7, #10]
 800b608:	3313      	adds	r3, #19
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	8952      	ldrh	r2, [r2, #10]
 800b60e:	4293      	cmp	r3, r2
 800b610:	db06      	blt.n	800b620 <tcp_output_alloc_header_common+0x4c>
 800b612:	4b26      	ldr	r3, [pc, #152]	; (800b6ac <tcp_output_alloc_header_common+0xd8>)
 800b614:	f240 7223 	movw	r2, #1827	; 0x723
 800b618:	4925      	ldr	r1, [pc, #148]	; (800b6b0 <tcp_output_alloc_header_common+0xdc>)
 800b61a:	4826      	ldr	r0, [pc, #152]	; (800b6b4 <tcp_output_alloc_header_common+0xe0>)
 800b61c:	f003 fd4e 	bl	800f0bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b626:	8c3b      	ldrh	r3, [r7, #32]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f9 fae5 	bl	8004bf8 <lwip_htons>
 800b62e:	4603      	mov	r3, r0
 800b630:	461a      	mov	r2, r3
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f9 fadd 	bl	8004bf8 <lwip_htons>
 800b63e:	4603      	mov	r3, r0
 800b640:	461a      	mov	r2, r3
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f7f9 fae8 	bl	8004c22 <lwip_htonl>
 800b652:	4602      	mov	r2, r0
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b658:	897b      	ldrh	r3, [r7, #10]
 800b65a:	089b      	lsrs	r3, r3, #2
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3305      	adds	r3, #5
 800b660:	b29b      	uxth	r3, r3
 800b662:	031b      	lsls	r3, r3, #12
 800b664:	b29a      	uxth	r2, r3
 800b666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	4313      	orrs	r3, r2
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4618      	mov	r0, r3
 800b672:	f7f9 fac1 	bl	8004bf8 <lwip_htons>
 800b676:	4603      	mov	r3, r0
 800b678:	461a      	mov	r2, r3
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b67e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b680:	4618      	mov	r0, r3
 800b682:	f7f9 fab9 	bl	8004bf8 <lwip_htons>
 800b686:	4603      	mov	r3, r0
 800b688:	461a      	mov	r2, r3
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2200      	movs	r2, #0
 800b692:	741a      	strb	r2, [r3, #16]
 800b694:	2200      	movs	r2, #0
 800b696:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2200      	movs	r2, #0
 800b69c:	749a      	strb	r2, [r3, #18]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b6a2:	697b      	ldr	r3, [r7, #20]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	08011bac 	.word	0x08011bac
 800b6b0:	08012284 	.word	0x08012284
 800b6b4:	08011c00 	.word	0x08011c00

0800b6b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b6b8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ba:	b08a      	sub	sp, #40	; 0x28
 800b6bc:	af04      	add	r7, sp, #16
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	607b      	str	r3, [r7, #4]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	817b      	strh	r3, [r7, #10]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <tcp_output_alloc_header+0x26>
 800b6d0:	4b15      	ldr	r3, [pc, #84]	; (800b728 <tcp_output_alloc_header+0x70>)
 800b6d2:	f240 7242 	movw	r2, #1858	; 0x742
 800b6d6:	4915      	ldr	r1, [pc, #84]	; (800b72c <tcp_output_alloc_header+0x74>)
 800b6d8:	4815      	ldr	r0, [pc, #84]	; (800b730 <tcp_output_alloc_header+0x78>)
 800b6da:	f003 fcef 	bl	800f0bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	8adb      	ldrh	r3, [r3, #22]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	8b12      	ldrh	r2, [r2, #24]
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b6ee:	893d      	ldrh	r5, [r7, #8]
 800b6f0:	897c      	ldrh	r4, [r7, #10]
 800b6f2:	9103      	str	r1, [sp, #12]
 800b6f4:	2110      	movs	r1, #16
 800b6f6:	9102      	str	r1, [sp, #8]
 800b6f8:	9201      	str	r2, [sp, #4]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	462a      	mov	r2, r5
 800b700:	4621      	mov	r1, r4
 800b702:	f7ff ff67 	bl	800b5d4 <tcp_output_alloc_header_common>
 800b706:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d006      	beq.n	800b71c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b716:	441a      	add	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b71c:	697b      	ldr	r3, [r7, #20]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bdb0      	pop	{r4, r5, r7, pc}
 800b726:	bf00      	nop
 800b728:	08011bac 	.word	0x08011bac
 800b72c:	080122b4 	.word	0x080122b4
 800b730:	08011c00 	.word	0x08011c00

0800b734 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4611      	mov	r1, r2
 800b740:	461a      	mov	r2, r3
 800b742:	460b      	mov	r3, r1
 800b744:	71fb      	strb	r3, [r7, #7]
 800b746:	4613      	mov	r3, r2
 800b748:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <tcp_output_fill_options+0x2e>
 800b754:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <tcp_output_fill_options+0x70>)
 800b756:	f240 7256 	movw	r2, #1878	; 0x756
 800b75a:	4913      	ldr	r1, [pc, #76]	; (800b7a8 <tcp_output_fill_options+0x74>)
 800b75c:	4813      	ldr	r0, [pc, #76]	; (800b7ac <tcp_output_fill_options+0x78>)
 800b75e:	f003 fcad 	bl	800f0bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	3314      	adds	r3, #20
 800b76c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	f103 0214 	add.w	r2, r3, #20
 800b774:	8bfb      	ldrh	r3, [r7, #30]
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4619      	mov	r1, r3
 800b77a:	79fb      	ldrb	r3, [r7, #7]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	f003 0304 	and.w	r3, r3, #4
 800b782:	440b      	add	r3, r1
 800b784:	4413      	add	r3, r2
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d006      	beq.n	800b79a <tcp_output_fill_options+0x66>
 800b78c:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <tcp_output_fill_options+0x70>)
 800b78e:	f240 7275 	movw	r2, #1909	; 0x775
 800b792:	4907      	ldr	r1, [pc, #28]	; (800b7b0 <tcp_output_fill_options+0x7c>)
 800b794:	4805      	ldr	r0, [pc, #20]	; (800b7ac <tcp_output_fill_options+0x78>)
 800b796:	f003 fc91 	bl	800f0bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b79a:	bf00      	nop
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	08011bac 	.word	0x08011bac
 800b7a8:	080122dc 	.word	0x080122dc
 800b7ac:	08011c00 	.word	0x08011c00
 800b7b0:	080121d4 	.word	0x080121d4

0800b7b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <tcp_output_control_segment+0x22>
 800b7c8:	4b1c      	ldr	r3, [pc, #112]	; (800b83c <tcp_output_control_segment+0x88>)
 800b7ca:	f240 7287 	movw	r2, #1927	; 0x787
 800b7ce:	491c      	ldr	r1, [pc, #112]	; (800b840 <tcp_output_control_segment+0x8c>)
 800b7d0:	481c      	ldr	r0, [pc, #112]	; (800b844 <tcp_output_control_segment+0x90>)
 800b7d2:	f003 fc73 	bl	800f0bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f7fe ff40 	bl	800a660 <tcp_route>
 800b7e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b7e8:	23fc      	movs	r3, #252	; 0xfc
 800b7ea:	75fb      	strb	r3, [r7, #23]
 800b7ec:	e01c      	b.n	800b828 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	7adb      	ldrb	r3, [r3, #11]
 800b7f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	7a9b      	ldrb	r3, [r3, #10]
 800b7fe:	757b      	strb	r3, [r7, #21]
 800b800:	e003      	b.n	800b80a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b802:	23ff      	movs	r3, #255	; 0xff
 800b804:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b80a:	7dba      	ldrb	r2, [r7, #22]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	9302      	str	r3, [sp, #8]
 800b810:	2306      	movs	r3, #6
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	7d7b      	ldrb	r3, [r7, #21]
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	4613      	mov	r3, r2
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	6879      	ldr	r1, [r7, #4]
 800b81e:	68b8      	ldr	r0, [r7, #8]
 800b820:	f002 fb2a 	bl	800de78 <ip4_output_if>
 800b824:	4603      	mov	r3, r0
 800b826:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b828:	68b8      	ldr	r0, [r7, #8]
 800b82a:	f7fa fd43 	bl	80062b4 <pbuf_free>
  return err;
 800b82e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	08011bac 	.word	0x08011bac
 800b840:	08012304 	.word	0x08012304
 800b844:	08011c00 	.word	0x08011c00

0800b848 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b08b      	sub	sp, #44	; 0x2c
 800b84c:	af04      	add	r7, sp, #16
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <tcp_rst+0x22>
 800b85c:	4b1f      	ldr	r3, [pc, #124]	; (800b8dc <tcp_rst+0x94>)
 800b85e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b862:	491f      	ldr	r1, [pc, #124]	; (800b8e0 <tcp_rst+0x98>)
 800b864:	481f      	ldr	r0, [pc, #124]	; (800b8e4 <tcp_rst+0x9c>)
 800b866:	f003 fc29 	bl	800f0bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d106      	bne.n	800b87e <tcp_rst+0x36>
 800b870:	4b1a      	ldr	r3, [pc, #104]	; (800b8dc <tcp_rst+0x94>)
 800b872:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b876:	491c      	ldr	r1, [pc, #112]	; (800b8e8 <tcp_rst+0xa0>)
 800b878:	481a      	ldr	r0, [pc, #104]	; (800b8e4 <tcp_rst+0x9c>)
 800b87a:	f003 fc1f 	bl	800f0bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b87e:	2300      	movs	r3, #0
 800b880:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b882:	f246 0308 	movw	r3, #24584	; 0x6008
 800b886:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	b29c      	uxth	r4, r3
 800b88c:	68b8      	ldr	r0, [r7, #8]
 800b88e:	f7f9 f9c8 	bl	8004c22 <lwip_htonl>
 800b892:	4602      	mov	r2, r0
 800b894:	8abb      	ldrh	r3, [r7, #20]
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	2314      	movs	r3, #20
 800b89a:	9302      	str	r3, [sp, #8]
 800b89c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff fe92 	bl	800b5d4 <tcp_output_alloc_header_common>
 800b8b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00c      	beq.n	800b8d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	6939      	ldr	r1, [r7, #16]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff ff38 	bl	800b734 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	6939      	ldr	r1, [r7, #16]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7ff ff72 	bl	800b7b4 <tcp_output_control_segment>
 800b8d0:	e000      	b.n	800b8d4 <tcp_rst+0x8c>
    return;
 800b8d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd90      	pop	{r4, r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	08011bac 	.word	0x08011bac
 800b8e0:	08012330 	.word	0x08012330
 800b8e4:	08011c00 	.word	0x08011c00
 800b8e8:	0801234c 	.word	0x0801234c

0800b8ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <tcp_send_empty_ack+0x24>
 800b902:	4b28      	ldr	r3, [pc, #160]	; (800b9a4 <tcp_send_empty_ack+0xb8>)
 800b904:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b908:	4927      	ldr	r1, [pc, #156]	; (800b9a8 <tcp_send_empty_ack+0xbc>)
 800b90a:	4828      	ldr	r0, [pc, #160]	; (800b9ac <tcp_send_empty_ack+0xc0>)
 800b90c:	f003 fbd6 	bl	800f0bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	b2db      	uxtb	r3, r3
 800b916:	f003 0304 	and.w	r3, r3, #4
 800b91a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b91c:	7d7b      	ldrb	r3, [r7, #21]
 800b91e:	b29c      	uxth	r4, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b924:	4618      	mov	r0, r3
 800b926:	f7f9 f97c 	bl	8004c22 <lwip_htonl>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2200      	movs	r2, #0
 800b92e:	4621      	mov	r1, r4
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7ff fec1 	bl	800b6b8 <tcp_output_alloc_header>
 800b936:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d109      	bne.n	800b952 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	8b5b      	ldrh	r3, [r3, #26]
 800b942:	f043 0303 	orr.w	r3, r3, #3
 800b946:	b29a      	uxth	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b94c:	f06f 0301 	mvn.w	r3, #1
 800b950:	e023      	b.n	800b99a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b952:	7dbb      	ldrb	r3, [r7, #22]
 800b954:	7dfa      	ldrb	r2, [r7, #23]
 800b956:	6939      	ldr	r1, [r7, #16]
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7ff feeb 	bl	800b734 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3304      	adds	r3, #4
 800b964:	6939      	ldr	r1, [r7, #16]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff ff24 	bl	800b7b4 <tcp_output_control_segment>
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d007      	beq.n	800b988 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	8b5b      	ldrh	r3, [r3, #26]
 800b97c:	f043 0303 	orr.w	r3, r3, #3
 800b980:	b29a      	uxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	835a      	strh	r2, [r3, #26]
 800b986:	e006      	b.n	800b996 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	8b5b      	ldrh	r3, [r3, #26]
 800b98c:	f023 0303 	bic.w	r3, r3, #3
 800b990:	b29a      	uxth	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd90      	pop	{r4, r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	08011bac 	.word	0x08011bac
 800b9a8:	08012368 	.word	0x08012368
 800b9ac:	08011c00 	.word	0x08011c00

0800b9b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b9b0:	b590      	push	{r4, r7, lr}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d106      	bne.n	800b9d0 <tcp_keepalive+0x20>
 800b9c2:	4b18      	ldr	r3, [pc, #96]	; (800ba24 <tcp_keepalive+0x74>)
 800b9c4:	f640 0224 	movw	r2, #2084	; 0x824
 800b9c8:	4917      	ldr	r1, [pc, #92]	; (800ba28 <tcp_keepalive+0x78>)
 800b9ca:	4818      	ldr	r0, [pc, #96]	; (800ba2c <tcp_keepalive+0x7c>)
 800b9cc:	f003 fb76 	bl	800f0bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
 800b9d2:	b29c      	uxth	r4, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7f9 f921 	bl	8004c22 <lwip_htonl>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff fe66 	bl	800b6b8 <tcp_output_alloc_header>
 800b9ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d102      	bne.n	800b9fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f8:	e010      	b.n	800ba1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	6939      	ldr	r1, [r7, #16]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff fe97 	bl	800b734 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	6939      	ldr	r1, [r7, #16]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fed0 	bl	800b7b4 <tcp_output_control_segment>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ba18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd90      	pop	{r4, r7, pc}
 800ba24:	08011bac 	.word	0x08011bac
 800ba28:	08012388 	.word	0x08012388
 800ba2c:	08011c00 	.word	0x08011c00

0800ba30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	b08b      	sub	sp, #44	; 0x2c
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d106      	bne.n	800ba52 <tcp_zero_window_probe+0x22>
 800ba44:	4b4c      	ldr	r3, [pc, #304]	; (800bb78 <tcp_zero_window_probe+0x148>)
 800ba46:	f640 024f 	movw	r2, #2127	; 0x84f
 800ba4a:	494c      	ldr	r1, [pc, #304]	; (800bb7c <tcp_zero_window_probe+0x14c>)
 800ba4c:	484c      	ldr	r0, [pc, #304]	; (800bb80 <tcp_zero_window_probe+0x150>)
 800ba4e:	f003 fb35 	bl	800f0bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e086      	b.n	800bb70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba68:	2bff      	cmp	r3, #255	; 0xff
 800ba6a:	d007      	beq.n	800ba7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba72:	3301      	adds	r3, #1
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	899b      	ldrh	r3, [r3, #12]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 f8b7 	bl	8004bf8 <lwip_htons>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d005      	beq.n	800baa2 <tcp_zero_window_probe+0x72>
 800ba96:	6a3b      	ldr	r3, [r7, #32]
 800ba98:	891b      	ldrh	r3, [r3, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <tcp_zero_window_probe+0x72>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e000      	b.n	800baa4 <tcp_zero_window_probe+0x74>
 800baa2:	2300      	movs	r3, #0
 800baa4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800baa6:	7ffb      	ldrb	r3, [r7, #31]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	bf0c      	ite	eq
 800baac:	2301      	moveq	r3, #1
 800baae:	2300      	movne	r3, #0
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab8:	b299      	uxth	r1, r3
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	8bba      	ldrh	r2, [r7, #28]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fdf8 	bl	800b6b8 <tcp_output_alloc_header>
 800bac8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bad0:	f04f 33ff 	mov.w	r3, #4294967295
 800bad4:	e04c      	b.n	800bb70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800badc:	7ffb      	ldrb	r3, [r7, #31]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d011      	beq.n	800bb06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	899b      	ldrh	r3, [r3, #12]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	b21b      	sxth	r3, r3
 800baea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800baee:	b21c      	sxth	r4, r3
 800baf0:	2011      	movs	r0, #17
 800baf2:	f7f9 f881 	bl	8004bf8 <lwip_htons>
 800baf6:	4603      	mov	r3, r0
 800baf8:	b21b      	sxth	r3, r3
 800bafa:	4323      	orrs	r3, r4
 800bafc:	b21b      	sxth	r3, r3
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	819a      	strh	r2, [r3, #12]
 800bb04:	e010      	b.n	800bb28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	3314      	adds	r3, #20
 800bb0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	6858      	ldr	r0, [r3, #4]
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	891a      	ldrh	r2, [r3, #8]
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	891b      	ldrh	r3, [r3, #8]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	2201      	movs	r2, #1
 800bb22:	6939      	ldr	r1, [r7, #16]
 800bb24:	f7fa fdc0 	bl	80066a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f9 f877 	bl	8004c22 <lwip_htonl>
 800bb34:	4603      	mov	r3, r0
 800bb36:	3301      	adds	r3, #1
 800bb38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	da02      	bge.n	800bb4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb50:	2200      	movs	r2, #0
 800bb52:	69b9      	ldr	r1, [r7, #24]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7ff fded 	bl	800b734 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	69b9      	ldr	r1, [r7, #24]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7ff fe26 	bl	800b7b4 <tcp_output_control_segment>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	372c      	adds	r7, #44	; 0x2c
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd90      	pop	{r4, r7, pc}
 800bb78:	08011bac 	.word	0x08011bac
 800bb7c:	080123a4 	.word	0x080123a4
 800bb80:	08011c00 	.word	0x08011c00

0800bb84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bb8c:	f7fa ff0c 	bl	80069a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bb90:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <tcpip_tcp_timer+0x38>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d103      	bne.n	800bba0 <tcpip_tcp_timer+0x1c>
 800bb98:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <tcpip_tcp_timer+0x3c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bba0:	2200      	movs	r2, #0
 800bba2:	4908      	ldr	r1, [pc, #32]	; (800bbc4 <tcpip_tcp_timer+0x40>)
 800bba4:	20fa      	movs	r0, #250	; 0xfa
 800bba6:	f000 f8f3 	bl	800bd90 <sys_timeout>
 800bbaa:	e003      	b.n	800bbb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bbac:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <tcpip_tcp_timer+0x44>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
  }
}
 800bbb2:	bf00      	nop
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	2000a960 	.word	0x2000a960
 800bbc0:	2000a964 	.word	0x2000a964
 800bbc4:	0800bb85 	.word	0x0800bb85
 800bbc8:	2000a9ac 	.word	0x2000a9ac

0800bbcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <tcp_timer_needed+0x30>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10f      	bne.n	800bbf8 <tcp_timer_needed+0x2c>
 800bbd8:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <tcp_timer_needed+0x34>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d103      	bne.n	800bbe8 <tcp_timer_needed+0x1c>
 800bbe0:	4b08      	ldr	r3, [pc, #32]	; (800bc04 <tcp_timer_needed+0x38>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d007      	beq.n	800bbf8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bbe8:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <tcp_timer_needed+0x30>)
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4905      	ldr	r1, [pc, #20]	; (800bc08 <tcp_timer_needed+0x3c>)
 800bbf2:	20fa      	movs	r0, #250	; 0xfa
 800bbf4:	f000 f8cc 	bl	800bd90 <sys_timeout>
  }
}
 800bbf8:	bf00      	nop
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	2000a9ac 	.word	0x2000a9ac
 800bc00:	2000a960 	.word	0x2000a960
 800bc04:	2000a964 	.word	0x2000a964
 800bc08:	0800bb85 	.word	0x0800bb85

0800bc0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bc18:	2006      	movs	r0, #6
 800bc1a:	f7f9 fc65 	bl	80054e8 <memp_malloc>
 800bc1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d109      	bne.n	800bc3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d151      	bne.n	800bcd0 <sys_timeout_abs+0xc4>
 800bc2c:	4b2a      	ldr	r3, [pc, #168]	; (800bcd8 <sys_timeout_abs+0xcc>)
 800bc2e:	22be      	movs	r2, #190	; 0xbe
 800bc30:	492a      	ldr	r1, [pc, #168]	; (800bcdc <sys_timeout_abs+0xd0>)
 800bc32:	482b      	ldr	r0, [pc, #172]	; (800bce0 <sys_timeout_abs+0xd4>)
 800bc34:	f003 fa42 	bl	800f0bc <iprintf>
    return;
 800bc38:	e04a      	b.n	800bcd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bc52:	4b24      	ldr	r3, [pc, #144]	; (800bce4 <sys_timeout_abs+0xd8>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d103      	bne.n	800bc62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bc5a:	4a22      	ldr	r2, [pc, #136]	; (800bce4 <sys_timeout_abs+0xd8>)
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	6013      	str	r3, [r2, #0]
    return;
 800bc60:	e037      	b.n	800bcd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	4b1f      	ldr	r3, [pc, #124]	; (800bce4 <sys_timeout_abs+0xd8>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	0fdb      	lsrs	r3, r3, #31
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bc7a:	4b1a      	ldr	r3, [pc, #104]	; (800bce4 <sys_timeout_abs+0xd8>)
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bc82:	4a18      	ldr	r2, [pc, #96]	; (800bce4 <sys_timeout_abs+0xd8>)
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	e023      	b.n	800bcd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc8a:	4b16      	ldr	r3, [pc, #88]	; (800bce4 <sys_timeout_abs+0xd8>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e01a      	b.n	800bcc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00b      	beq.n	800bcb2 <sys_timeout_abs+0xa6>
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	0fdb      	lsrs	r3, r3, #31
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d007      	beq.n	800bcc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	601a      	str	r2, [r3, #0]
        break;
 800bcc0:	e007      	b.n	800bcd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e1      	bne.n	800bc92 <sys_timeout_abs+0x86>
 800bcce:	e000      	b.n	800bcd2 <sys_timeout_abs+0xc6>
    return;
 800bcd0:	bf00      	nop
      }
    }
  }
}
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	080123c8 	.word	0x080123c8
 800bcdc:	080123fc 	.word	0x080123fc
 800bce0:	0801243c 	.word	0x0801243c
 800bce4:	2000a9a4 	.word	0x2000a9a4

0800bce8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	4798      	blx	r3

  now = sys_now();
 800bcfa:	f7f8 fd55 	bl	80047a8 <sys_now>
 800bcfe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	4b0f      	ldr	r3, [pc, #60]	; (800bd44 <lwip_cyclic_timer+0x5c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4413      	add	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	0fdb      	lsrs	r3, r3, #31
 800bd14:	f003 0301 	and.w	r3, r3, #1
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d009      	beq.n	800bd32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	4413      	add	r3, r2
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	4907      	ldr	r1, [pc, #28]	; (800bd48 <lwip_cyclic_timer+0x60>)
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff ff6e 	bl	800bc0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bd30:	e004      	b.n	800bd3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	4904      	ldr	r1, [pc, #16]	; (800bd48 <lwip_cyclic_timer+0x60>)
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff ff68 	bl	800bc0c <sys_timeout_abs>
}
 800bd3c:	bf00      	nop
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	2000a9a8 	.word	0x2000a9a8
 800bd48:	0800bce9 	.word	0x0800bce9

0800bd4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd52:	2301      	movs	r3, #1
 800bd54:	607b      	str	r3, [r7, #4]
 800bd56:	e00e      	b.n	800bd76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bd58:	4a0b      	ldr	r2, [pc, #44]	; (800bd88 <sys_timeouts_init+0x3c>)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <sys_timeouts_init+0x3c>)
 800bd66:	4413      	add	r3, r2
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4908      	ldr	r1, [pc, #32]	; (800bd8c <sys_timeouts_init+0x40>)
 800bd6c:	f000 f810 	bl	800bd90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3301      	adds	r3, #1
 800bd74:	607b      	str	r3, [r7, #4]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d9ed      	bls.n	800bd58 <sys_timeouts_init+0xc>
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	08012fb4 	.word	0x08012fb4
 800bd8c:	0800bce9 	.word	0x0800bce9

0800bd90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda2:	d306      	bcc.n	800bdb2 <sys_timeout+0x22>
 800bda4:	4b0a      	ldr	r3, [pc, #40]	; (800bdd0 <sys_timeout+0x40>)
 800bda6:	f240 1229 	movw	r2, #297	; 0x129
 800bdaa:	490a      	ldr	r1, [pc, #40]	; (800bdd4 <sys_timeout+0x44>)
 800bdac:	480a      	ldr	r0, [pc, #40]	; (800bdd8 <sys_timeout+0x48>)
 800bdae:	f003 f985 	bl	800f0bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bdb2:	f7f8 fcf9 	bl	80047a8 <sys_now>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	68b9      	ldr	r1, [r7, #8]
 800bdc2:	6978      	ldr	r0, [r7, #20]
 800bdc4:	f7ff ff22 	bl	800bc0c <sys_timeout_abs>
#endif
}
 800bdc8:	bf00      	nop
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	080123c8 	.word	0x080123c8
 800bdd4:	08012464 	.word	0x08012464
 800bdd8:	0801243c 	.word	0x0801243c

0800bddc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bde2:	f7f8 fce1 	bl	80047a8 <sys_now>
 800bde6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bde8:	4b1a      	ldr	r3, [pc, #104]	; (800be54 <sys_check_timeouts+0x78>)
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <sys_check_timeouts+0x1a>
 800bdf2:	f7f9 ff25 	bl	8005c40 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bdf6:	4b18      	ldr	r3, [pc, #96]	; (800be58 <sys_check_timeouts+0x7c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d022      	beq.n	800be48 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	0fdb      	lsrs	r3, r3, #31
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d11a      	bne.n	800be4c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a0f      	ldr	r2, [pc, #60]	; (800be58 <sys_check_timeouts+0x7c>)
 800be1c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	4a0b      	ldr	r2, [pc, #44]	; (800be5c <sys_check_timeouts+0x80>)
 800be30:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800be32:	68b9      	ldr	r1, [r7, #8]
 800be34:	2006      	movs	r0, #6
 800be36:	f7f9 fbc7 	bl	80055c8 <memp_free>
    if (handler != NULL) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d0d3      	beq.n	800bde8 <sys_check_timeouts+0xc>
      handler(arg);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6838      	ldr	r0, [r7, #0]
 800be44:	4798      	blx	r3
  do {
 800be46:	e7cf      	b.n	800bde8 <sys_check_timeouts+0xc>
      return;
 800be48:	bf00      	nop
 800be4a:	e000      	b.n	800be4e <sys_check_timeouts+0x72>
      return;
 800be4c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	2000a951 	.word	0x2000a951
 800be58:	2000a9a4 	.word	0x2000a9a4
 800be5c:	2000a9a8 	.word	0x2000a9a8

0800be60 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be64:	f003 f942 	bl	800f0ec <rand>
 800be68:	4603      	mov	r3, r0
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be70:	b29b      	uxth	r3, r3
 800be72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be76:	b29a      	uxth	r2, r3
 800be78:	4b01      	ldr	r3, [pc, #4]	; (800be80 <udp_init+0x20>)
 800be7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be7c:	bf00      	nop
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000028 	.word	0x20000028

0800be84 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800be8e:	4b17      	ldr	r3, [pc, #92]	; (800beec <udp_new_port+0x68>)
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	b291      	uxth	r1, r2
 800be96:	4a15      	ldr	r2, [pc, #84]	; (800beec <udp_new_port+0x68>)
 800be98:	8011      	strh	r1, [r2, #0]
 800be9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d103      	bne.n	800beaa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bea2:	4b12      	ldr	r3, [pc, #72]	; (800beec <udp_new_port+0x68>)
 800bea4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bea8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800beaa:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <udp_new_port+0x6c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	e011      	b.n	800bed6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	8a5a      	ldrh	r2, [r3, #18]
 800beb6:	4b0d      	ldr	r3, [pc, #52]	; (800beec <udp_new_port+0x68>)
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d108      	bne.n	800bed0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bebe:	88fb      	ldrh	r3, [r7, #6]
 800bec0:	3301      	adds	r3, #1
 800bec2:	80fb      	strh	r3, [r7, #6]
 800bec4:	88fb      	ldrh	r3, [r7, #6]
 800bec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800beca:	d3e0      	bcc.n	800be8e <udp_new_port+0xa>
        return 0;
 800becc:	2300      	movs	r3, #0
 800bece:	e007      	b.n	800bee0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	603b      	str	r3, [r7, #0]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1ea      	bne.n	800beb2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bedc:	4b03      	ldr	r3, [pc, #12]	; (800beec <udp_new_port+0x68>)
 800bede:	881b      	ldrh	r3, [r3, #0]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000028 	.word	0x20000028
 800bef0:	2000a9b0 	.word	0x2000a9b0

0800bef4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	4613      	mov	r3, r2
 800bf00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d105      	bne.n	800bf14 <udp_input_local_match+0x20>
 800bf08:	4b27      	ldr	r3, [pc, #156]	; (800bfa8 <udp_input_local_match+0xb4>)
 800bf0a:	2287      	movs	r2, #135	; 0x87
 800bf0c:	4927      	ldr	r1, [pc, #156]	; (800bfac <udp_input_local_match+0xb8>)
 800bf0e:	4828      	ldr	r0, [pc, #160]	; (800bfb0 <udp_input_local_match+0xbc>)
 800bf10:	f003 f8d4 	bl	800f0bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <udp_input_local_match+0x32>
 800bf1a:	4b23      	ldr	r3, [pc, #140]	; (800bfa8 <udp_input_local_match+0xb4>)
 800bf1c:	2288      	movs	r2, #136	; 0x88
 800bf1e:	4925      	ldr	r1, [pc, #148]	; (800bfb4 <udp_input_local_match+0xc0>)
 800bf20:	4823      	ldr	r0, [pc, #140]	; (800bfb0 <udp_input_local_match+0xbc>)
 800bf22:	f003 f8cb 	bl	800f0bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	7a1b      	ldrb	r3, [r3, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	7a1a      	ldrb	r2, [r3, #8]
 800bf32:	4b21      	ldr	r3, [pc, #132]	; (800bfb8 <udp_input_local_match+0xc4>)
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d001      	beq.n	800bf46 <udp_input_local_match+0x52>
    return 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e02b      	b.n	800bf9e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bf46:	79fb      	ldrb	r3, [r7, #7]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d018      	beq.n	800bf7e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d013      	beq.n	800bf7a <udp_input_local_match+0x86>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00f      	beq.n	800bf7a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf5a:	4b17      	ldr	r3, [pc, #92]	; (800bfb8 <udp_input_local_match+0xc4>)
 800bf5c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d00a      	beq.n	800bf7a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	4b13      	ldr	r3, [pc, #76]	; (800bfb8 <udp_input_local_match+0xc4>)
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	405a      	eors	r2, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	3308      	adds	r3, #8
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d110      	bne.n	800bf9c <udp_input_local_match+0xa8>
          return 1;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e00f      	b.n	800bf9e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <udp_input_local_match+0xa4>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d005      	beq.n	800bf98 <udp_input_local_match+0xa4>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <udp_input_local_match+0xc4>)
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d101      	bne.n	800bf9c <udp_input_local_match+0xa8>
        return 1;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e000      	b.n	800bf9e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	080124b0 	.word	0x080124b0
 800bfac:	080124e0 	.word	0x080124e0
 800bfb0:	08012504 	.word	0x08012504
 800bfb4:	0801252c 	.word	0x0801252c
 800bfb8:	20005224 	.word	0x20005224

0800bfbc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bfbc:	b590      	push	{r4, r7, lr}
 800bfbe:	b08d      	sub	sp, #52	; 0x34
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d105      	bne.n	800bfdc <udp_input+0x20>
 800bfd0:	4b7c      	ldr	r3, [pc, #496]	; (800c1c4 <udp_input+0x208>)
 800bfd2:	22cf      	movs	r2, #207	; 0xcf
 800bfd4:	497c      	ldr	r1, [pc, #496]	; (800c1c8 <udp_input+0x20c>)
 800bfd6:	487d      	ldr	r0, [pc, #500]	; (800c1cc <udp_input+0x210>)
 800bfd8:	f003 f870 	bl	800f0bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d105      	bne.n	800bfee <udp_input+0x32>
 800bfe2:	4b78      	ldr	r3, [pc, #480]	; (800c1c4 <udp_input+0x208>)
 800bfe4:	22d0      	movs	r2, #208	; 0xd0
 800bfe6:	497a      	ldr	r1, [pc, #488]	; (800c1d0 <udp_input+0x214>)
 800bfe8:	4878      	ldr	r0, [pc, #480]	; (800c1cc <udp_input+0x210>)
 800bfea:	f003 f867 	bl	800f0bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	895b      	ldrh	r3, [r3, #10]
 800bff2:	2b07      	cmp	r3, #7
 800bff4:	d803      	bhi.n	800bffe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7fa f95c 	bl	80062b4 <pbuf_free>
    goto end;
 800bffc:	e0de      	b.n	800c1bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c004:	4b73      	ldr	r3, [pc, #460]	; (800c1d4 <udp_input+0x218>)
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	4a72      	ldr	r2, [pc, #456]	; (800c1d4 <udp_input+0x218>)
 800c00a:	6812      	ldr	r2, [r2, #0]
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f002 f80a 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800c014:	4603      	mov	r3, r0
 800c016:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	4618      	mov	r0, r3
 800c020:	f7f8 fdea 	bl	8004bf8 <lwip_htons>
 800c024:	4603      	mov	r3, r0
 800c026:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	4618      	mov	r0, r3
 800c030:	f7f8 fde2 	bl	8004bf8 <lwip_htons>
 800c034:	4603      	mov	r3, r0
 800c036:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c038:	2300      	movs	r3, #0
 800c03a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c040:	2300      	movs	r3, #0
 800c042:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c044:	4b64      	ldr	r3, [pc, #400]	; (800c1d8 <udp_input+0x21c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
 800c04a:	e054      	b.n	800c0f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	8a5b      	ldrh	r3, [r3, #18]
 800c050:	89fa      	ldrh	r2, [r7, #14]
 800c052:	429a      	cmp	r2, r3
 800c054:	d14a      	bne.n	800c0ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c056:	7cfb      	ldrb	r3, [r7, #19]
 800c058:	461a      	mov	r2, r3
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c05e:	f7ff ff49 	bl	800bef4 <udp_input_local_match>
 800c062:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c064:	2b00      	cmp	r3, #0
 800c066:	d041      	beq.n	800c0ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	7c1b      	ldrb	r3, [r3, #16]
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d11d      	bne.n	800c0b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d102      	bne.n	800c080 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	61fb      	str	r3, [r7, #28]
 800c07e:	e017      	b.n	800c0b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c080:	7cfb      	ldrb	r3, [r7, #19]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d014      	beq.n	800c0b0 <udp_input+0xf4>
 800c086:	4b53      	ldr	r3, [pc, #332]	; (800c1d4 <udp_input+0x218>)
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08e:	d10f      	bne.n	800c0b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	3304      	adds	r3, #4
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d008      	beq.n	800c0b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d101      	bne.n	800c0b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	8a9b      	ldrh	r3, [r3, #20]
 800c0b4:	8a3a      	ldrh	r2, [r7, #16]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d118      	bne.n	800c0ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d005      	beq.n	800c0ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	4b43      	ldr	r3, [pc, #268]	; (800c1d4 <udp_input+0x218>)
 800c0c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d10e      	bne.n	800c0ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c0ce:	6a3b      	ldr	r3, [r7, #32]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d014      	beq.n	800c0fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	68da      	ldr	r2, [r3, #12]
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c0dc:	4b3e      	ldr	r3, [pc, #248]	; (800c1d8 <udp_input+0x21c>)
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c0e4:	4a3c      	ldr	r2, [pc, #240]	; (800c1d8 <udp_input+0x21c>)
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c0ea:	e008      	b.n	800c0fe <udp_input+0x142>
      }
    }

    prev = pcb;
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1a7      	bne.n	800c04c <udp_input+0x90>
 800c0fc:	e000      	b.n	800c100 <udp_input+0x144>
        break;
 800c0fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <udp_input+0x15a>
    for_us = 1;
 800c110:	2301      	movs	r3, #1
 800c112:	76fb      	strb	r3, [r7, #27]
 800c114:	e00a      	b.n	800c12c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	3304      	adds	r3, #4
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	4b2d      	ldr	r3, [pc, #180]	; (800c1d4 <udp_input+0x218>)
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	429a      	cmp	r2, r3
 800c122:	bf0c      	ite	eq
 800c124:	2301      	moveq	r3, #1
 800c126:	2300      	movne	r3, #0
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c12c:	7efb      	ldrb	r3, [r7, #27]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d041      	beq.n	800c1b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c132:	2108      	movs	r1, #8
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7fa f837 	bl	80061a8 <pbuf_remove_header>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00a      	beq.n	800c156 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c140:	4b20      	ldr	r3, [pc, #128]	; (800c1c4 <udp_input+0x208>)
 800c142:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c146:	4925      	ldr	r1, [pc, #148]	; (800c1dc <udp_input+0x220>)
 800c148:	4820      	ldr	r0, [pc, #128]	; (800c1cc <udp_input+0x210>)
 800c14a:	f002 ffb7 	bl	800f0bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7fa f8b0 	bl	80062b4 <pbuf_free>
      goto end;
 800c154:	e032      	b.n	800c1bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d012      	beq.n	800c182 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	699c      	ldr	r4, [r3, #24]
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	69d8      	ldr	r0, [r3, #28]
 800c16c:	8a3b      	ldrh	r3, [r7, #16]
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	4b1b      	ldr	r3, [pc, #108]	; (800c1e0 <udp_input+0x224>)
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c176:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c178:	e021      	b.n	800c1be <udp_input+0x202>
        pbuf_free(p);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7fa f89a 	bl	80062b4 <pbuf_free>
        goto end;
 800c180:	e01c      	b.n	800c1bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c182:	7cfb      	ldrb	r3, [r7, #19]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d112      	bne.n	800c1ae <udp_input+0x1f2>
 800c188:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <udp_input+0x218>)
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c190:	2be0      	cmp	r3, #224	; 0xe0
 800c192:	d00c      	beq.n	800c1ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c194:	4b0f      	ldr	r3, [pc, #60]	; (800c1d4 <udp_input+0x218>)
 800c196:	899b      	ldrh	r3, [r3, #12]
 800c198:	3308      	adds	r3, #8
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	b21b      	sxth	r3, r3
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7fa f874 	bl	800628e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c1a6:	2103      	movs	r1, #3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 fc1d 	bl	800d9e8 <icmp_dest_unreach>
      pbuf_free(p);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7fa f880 	bl	80062b4 <pbuf_free>
  return;
 800c1b4:	e003      	b.n	800c1be <udp_input+0x202>
    pbuf_free(p);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7fa f87c 	bl	80062b4 <pbuf_free>
  return;
 800c1bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c1be:	372c      	adds	r7, #44	; 0x2c
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd90      	pop	{r4, r7, pc}
 800c1c4:	080124b0 	.word	0x080124b0
 800c1c8:	08012554 	.word	0x08012554
 800c1cc:	08012504 	.word	0x08012504
 800c1d0:	0801256c 	.word	0x0801256c
 800c1d4:	20005224 	.word	0x20005224
 800c1d8:	2000a9b0 	.word	0x2000a9b0
 800c1dc:	08012588 	.word	0x08012588
 800c1e0:	20005234 	.word	0x20005234

0800c1e4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d109      	bne.n	800c208 <udp_send+0x24>
 800c1f4:	4b11      	ldr	r3, [pc, #68]	; (800c23c <udp_send+0x58>)
 800c1f6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c1fa:	4911      	ldr	r1, [pc, #68]	; (800c240 <udp_send+0x5c>)
 800c1fc:	4811      	ldr	r0, [pc, #68]	; (800c244 <udp_send+0x60>)
 800c1fe:	f002 ff5d 	bl	800f0bc <iprintf>
 800c202:	f06f 030f 	mvn.w	r3, #15
 800c206:	e015      	b.n	800c234 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d109      	bne.n	800c222 <udp_send+0x3e>
 800c20e:	4b0b      	ldr	r3, [pc, #44]	; (800c23c <udp_send+0x58>)
 800c210:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c214:	490c      	ldr	r1, [pc, #48]	; (800c248 <udp_send+0x64>)
 800c216:	480b      	ldr	r0, [pc, #44]	; (800c244 <udp_send+0x60>)
 800c218:	f002 ff50 	bl	800f0bc <iprintf>
 800c21c:	f06f 030f 	mvn.w	r3, #15
 800c220:	e008      	b.n	800c234 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	1d1a      	adds	r2, r3, #4
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	8a9b      	ldrh	r3, [r3, #20]
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f80d 	bl	800c24c <udp_sendto>
 800c232:	4603      	mov	r3, r0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	080124b0 	.word	0x080124b0
 800c240:	080125a4 	.word	0x080125a4
 800c244:	08012504 	.word	0x08012504
 800c248:	080125bc 	.word	0x080125bc

0800c24c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af02      	add	r7, sp, #8
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d109      	bne.n	800c274 <udp_sendto+0x28>
 800c260:	4b23      	ldr	r3, [pc, #140]	; (800c2f0 <udp_sendto+0xa4>)
 800c262:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c266:	4923      	ldr	r1, [pc, #140]	; (800c2f4 <udp_sendto+0xa8>)
 800c268:	4823      	ldr	r0, [pc, #140]	; (800c2f8 <udp_sendto+0xac>)
 800c26a:	f002 ff27 	bl	800f0bc <iprintf>
 800c26e:	f06f 030f 	mvn.w	r3, #15
 800c272:	e038      	b.n	800c2e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d109      	bne.n	800c28e <udp_sendto+0x42>
 800c27a:	4b1d      	ldr	r3, [pc, #116]	; (800c2f0 <udp_sendto+0xa4>)
 800c27c:	f240 2219 	movw	r2, #537	; 0x219
 800c280:	491e      	ldr	r1, [pc, #120]	; (800c2fc <udp_sendto+0xb0>)
 800c282:	481d      	ldr	r0, [pc, #116]	; (800c2f8 <udp_sendto+0xac>)
 800c284:	f002 ff1a 	bl	800f0bc <iprintf>
 800c288:	f06f 030f 	mvn.w	r3, #15
 800c28c:	e02b      	b.n	800c2e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d109      	bne.n	800c2a8 <udp_sendto+0x5c>
 800c294:	4b16      	ldr	r3, [pc, #88]	; (800c2f0 <udp_sendto+0xa4>)
 800c296:	f240 221a 	movw	r2, #538	; 0x21a
 800c29a:	4919      	ldr	r1, [pc, #100]	; (800c300 <udp_sendto+0xb4>)
 800c29c:	4816      	ldr	r0, [pc, #88]	; (800c2f8 <udp_sendto+0xac>)
 800c29e:	f002 ff0d 	bl	800f0bc <iprintf>
 800c2a2:	f06f 030f 	mvn.w	r3, #15
 800c2a6:	e01e      	b.n	800c2e6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	7a1b      	ldrb	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d006      	beq.n	800c2be <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	7a1b      	ldrb	r3, [r3, #8]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7f9 fc9d 	bl	8005bf4 <netif_get_by_index>
 800c2ba:	6178      	str	r0, [r7, #20]
 800c2bc:	e003      	b.n	800c2c6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f001 fc1c 	bl	800dafc <ip4_route>
 800c2c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d102      	bne.n	800c2d2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c2cc:	f06f 0303 	mvn.w	r3, #3
 800c2d0:	e009      	b.n	800c2e6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c2d2:	887a      	ldrh	r2, [r7, #2]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f000 f810 	bl	800c304 <udp_sendto_if>
 800c2e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	080124b0 	.word	0x080124b0
 800c2f4:	080125d4 	.word	0x080125d4
 800c2f8:	08012504 	.word	0x08012504
 800c2fc:	080125ec 	.word	0x080125ec
 800c300:	08012608 	.word	0x08012608

0800c304 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af02      	add	r7, sp, #8
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d109      	bne.n	800c32c <udp_sendto_if+0x28>
 800c318:	4b2e      	ldr	r3, [pc, #184]	; (800c3d4 <udp_sendto_if+0xd0>)
 800c31a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c31e:	492e      	ldr	r1, [pc, #184]	; (800c3d8 <udp_sendto_if+0xd4>)
 800c320:	482e      	ldr	r0, [pc, #184]	; (800c3dc <udp_sendto_if+0xd8>)
 800c322:	f002 fecb 	bl	800f0bc <iprintf>
 800c326:	f06f 030f 	mvn.w	r3, #15
 800c32a:	e04f      	b.n	800c3cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d109      	bne.n	800c346 <udp_sendto_if+0x42>
 800c332:	4b28      	ldr	r3, [pc, #160]	; (800c3d4 <udp_sendto_if+0xd0>)
 800c334:	f240 2281 	movw	r2, #641	; 0x281
 800c338:	4929      	ldr	r1, [pc, #164]	; (800c3e0 <udp_sendto_if+0xdc>)
 800c33a:	4828      	ldr	r0, [pc, #160]	; (800c3dc <udp_sendto_if+0xd8>)
 800c33c:	f002 febe 	bl	800f0bc <iprintf>
 800c340:	f06f 030f 	mvn.w	r3, #15
 800c344:	e042      	b.n	800c3cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d109      	bne.n	800c360 <udp_sendto_if+0x5c>
 800c34c:	4b21      	ldr	r3, [pc, #132]	; (800c3d4 <udp_sendto_if+0xd0>)
 800c34e:	f240 2282 	movw	r2, #642	; 0x282
 800c352:	4924      	ldr	r1, [pc, #144]	; (800c3e4 <udp_sendto_if+0xe0>)
 800c354:	4821      	ldr	r0, [pc, #132]	; (800c3dc <udp_sendto_if+0xd8>)
 800c356:	f002 feb1 	bl	800f0bc <iprintf>
 800c35a:	f06f 030f 	mvn.w	r3, #15
 800c35e:	e035      	b.n	800c3cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <udp_sendto_if+0x76>
 800c366:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <udp_sendto_if+0xd0>)
 800c368:	f240 2283 	movw	r2, #643	; 0x283
 800c36c:	491e      	ldr	r1, [pc, #120]	; (800c3e8 <udp_sendto_if+0xe4>)
 800c36e:	481b      	ldr	r0, [pc, #108]	; (800c3dc <udp_sendto_if+0xd8>)
 800c370:	f002 fea4 	bl	800f0bc <iprintf>
 800c374:	f06f 030f 	mvn.w	r3, #15
 800c378:	e028      	b.n	800c3cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <udp_sendto_if+0x90>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d005      	beq.n	800c394 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c390:	2be0      	cmp	r3, #224	; 0xe0
 800c392:	d103      	bne.n	800c39c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	3304      	adds	r3, #4
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	e00b      	b.n	800c3b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d002      	beq.n	800c3b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c3aa:	f06f 0303 	mvn.w	r3, #3
 800c3ae:	e00d      	b.n	800c3cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c3b4:	887a      	ldrh	r2, [r7, #2]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f000 f811 	bl	800c3ec <udp_sendto_if_src>
 800c3ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	080124b0 	.word	0x080124b0
 800c3d8:	08012624 	.word	0x08012624
 800c3dc:	08012504 	.word	0x08012504
 800c3e0:	08012640 	.word	0x08012640
 800c3e4:	0801265c 	.word	0x0801265c
 800c3e8:	0801267c 	.word	0x0801267c

0800c3ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08c      	sub	sp, #48	; 0x30
 800c3f0:	af04      	add	r7, sp, #16
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d109      	bne.n	800c414 <udp_sendto_if_src+0x28>
 800c400:	4b65      	ldr	r3, [pc, #404]	; (800c598 <udp_sendto_if_src+0x1ac>)
 800c402:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c406:	4965      	ldr	r1, [pc, #404]	; (800c59c <udp_sendto_if_src+0x1b0>)
 800c408:	4865      	ldr	r0, [pc, #404]	; (800c5a0 <udp_sendto_if_src+0x1b4>)
 800c40a:	f002 fe57 	bl	800f0bc <iprintf>
 800c40e:	f06f 030f 	mvn.w	r3, #15
 800c412:	e0bc      	b.n	800c58e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d109      	bne.n	800c42e <udp_sendto_if_src+0x42>
 800c41a:	4b5f      	ldr	r3, [pc, #380]	; (800c598 <udp_sendto_if_src+0x1ac>)
 800c41c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c420:	4960      	ldr	r1, [pc, #384]	; (800c5a4 <udp_sendto_if_src+0x1b8>)
 800c422:	485f      	ldr	r0, [pc, #380]	; (800c5a0 <udp_sendto_if_src+0x1b4>)
 800c424:	f002 fe4a 	bl	800f0bc <iprintf>
 800c428:	f06f 030f 	mvn.w	r3, #15
 800c42c:	e0af      	b.n	800c58e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <udp_sendto_if_src+0x5c>
 800c434:	4b58      	ldr	r3, [pc, #352]	; (800c598 <udp_sendto_if_src+0x1ac>)
 800c436:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c43a:	495b      	ldr	r1, [pc, #364]	; (800c5a8 <udp_sendto_if_src+0x1bc>)
 800c43c:	4858      	ldr	r0, [pc, #352]	; (800c5a0 <udp_sendto_if_src+0x1b4>)
 800c43e:	f002 fe3d 	bl	800f0bc <iprintf>
 800c442:	f06f 030f 	mvn.w	r3, #15
 800c446:	e0a2      	b.n	800c58e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <udp_sendto_if_src+0x76>
 800c44e:	4b52      	ldr	r3, [pc, #328]	; (800c598 <udp_sendto_if_src+0x1ac>)
 800c450:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c454:	4955      	ldr	r1, [pc, #340]	; (800c5ac <udp_sendto_if_src+0x1c0>)
 800c456:	4852      	ldr	r0, [pc, #328]	; (800c5a0 <udp_sendto_if_src+0x1b4>)
 800c458:	f002 fe30 	bl	800f0bc <iprintf>
 800c45c:	f06f 030f 	mvn.w	r3, #15
 800c460:	e095      	b.n	800c58e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <udp_sendto_if_src+0x90>
 800c468:	4b4b      	ldr	r3, [pc, #300]	; (800c598 <udp_sendto_if_src+0x1ac>)
 800c46a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c46e:	4950      	ldr	r1, [pc, #320]	; (800c5b0 <udp_sendto_if_src+0x1c4>)
 800c470:	484b      	ldr	r0, [pc, #300]	; (800c5a0 <udp_sendto_if_src+0x1b4>)
 800c472:	f002 fe23 	bl	800f0bc <iprintf>
 800c476:	f06f 030f 	mvn.w	r3, #15
 800c47a:	e088      	b.n	800c58e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	8a5b      	ldrh	r3, [r3, #18]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10f      	bne.n	800c4a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c484:	68f9      	ldr	r1, [r7, #12]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	8a5b      	ldrh	r3, [r3, #18]
 800c48a:	461a      	mov	r2, r3
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 f893 	bl	800c5b8 <udp_bind>
 800c492:	4603      	mov	r3, r0
 800c494:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c496:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c49e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4a2:	e074      	b.n	800c58e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	891b      	ldrh	r3, [r3, #8]
 800c4a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d902      	bls.n	800c4b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b4:	e06b      	b.n	800c58e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c4b6:	2108      	movs	r1, #8
 800c4b8:	68b8      	ldr	r0, [r7, #8]
 800c4ba:	f7f9 fe65 	bl	8006188 <pbuf_add_header>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d015      	beq.n	800c4f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c4c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c4c8:	2108      	movs	r1, #8
 800c4ca:	2022      	movs	r0, #34	; 0x22
 800c4cc:	f7f9 fc0e 	bl	8005cec <pbuf_alloc>
 800c4d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d102      	bne.n	800c4de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4dc:	e057      	b.n	800c58e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	891b      	ldrh	r3, [r3, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	69f8      	ldr	r0, [r7, #28]
 800c4ea:	f7f9 fffb 	bl	80064e4 <pbuf_chain>
 800c4ee:	e001      	b.n	800c4f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	895b      	ldrh	r3, [r3, #10]
 800c4f8:	2b07      	cmp	r3, #7
 800c4fa:	d806      	bhi.n	800c50a <udp_sendto_if_src+0x11e>
 800c4fc:	4b26      	ldr	r3, [pc, #152]	; (800c598 <udp_sendto_if_src+0x1ac>)
 800c4fe:	f240 320d 	movw	r2, #781	; 0x30d
 800c502:	492c      	ldr	r1, [pc, #176]	; (800c5b4 <udp_sendto_if_src+0x1c8>)
 800c504:	4826      	ldr	r0, [pc, #152]	; (800c5a0 <udp_sendto_if_src+0x1b4>)
 800c506:	f002 fdd9 	bl	800f0bc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	8a5b      	ldrh	r3, [r3, #18]
 800c514:	4618      	mov	r0, r3
 800c516:	f7f8 fb6f 	bl	8004bf8 <lwip_htons>
 800c51a:	4603      	mov	r3, r0
 800c51c:	461a      	mov	r2, r3
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c522:	887b      	ldrh	r3, [r7, #2]
 800c524:	4618      	mov	r0, r3
 800c526:	f7f8 fb67 	bl	8004bf8 <lwip_htons>
 800c52a:	4603      	mov	r3, r0
 800c52c:	461a      	mov	r2, r3
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2200      	movs	r2, #0
 800c536:	719a      	strb	r2, [r3, #6]
 800c538:	2200      	movs	r2, #0
 800c53a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	891b      	ldrh	r3, [r3, #8]
 800c540:	4618      	mov	r0, r3
 800c542:	f7f8 fb59 	bl	8004bf8 <lwip_htons>
 800c546:	4603      	mov	r3, r0
 800c548:	461a      	mov	r2, r3
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c54e:	2311      	movs	r3, #17
 800c550:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	7adb      	ldrb	r3, [r3, #11]
 800c556:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	7a9b      	ldrb	r3, [r3, #10]
 800c55c:	7cb9      	ldrb	r1, [r7, #18]
 800c55e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c560:	9202      	str	r2, [sp, #8]
 800c562:	7cfa      	ldrb	r2, [r7, #19]
 800c564:	9201      	str	r2, [sp, #4]
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	460b      	mov	r3, r1
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c56e:	69f8      	ldr	r0, [r7, #28]
 800c570:	f001 fcac 	bl	800decc <ip4_output_if_src>
 800c574:	4603      	mov	r3, r0
 800c576:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d004      	beq.n	800c58a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c580:	69f8      	ldr	r0, [r7, #28]
 800c582:	f7f9 fe97 	bl	80062b4 <pbuf_free>
    q = NULL;
 800c586:	2300      	movs	r3, #0
 800c588:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c58a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	080124b0 	.word	0x080124b0
 800c59c:	0801269c 	.word	0x0801269c
 800c5a0:	08012504 	.word	0x08012504
 800c5a4:	080126bc 	.word	0x080126bc
 800c5a8:	080126dc 	.word	0x080126dc
 800c5ac:	08012700 	.word	0x08012700
 800c5b0:	08012724 	.word	0x08012724
 800c5b4:	08012748 	.word	0x08012748

0800c5b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c5cc:	4b39      	ldr	r3, [pc, #228]	; (800c6b4 <udp_bind+0xfc>)
 800c5ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <udp_bind+0x32>
 800c5d6:	4b38      	ldr	r3, [pc, #224]	; (800c6b8 <udp_bind+0x100>)
 800c5d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c5dc:	4937      	ldr	r1, [pc, #220]	; (800c6bc <udp_bind+0x104>)
 800c5de:	4838      	ldr	r0, [pc, #224]	; (800c6c0 <udp_bind+0x108>)
 800c5e0:	f002 fd6c 	bl	800f0bc <iprintf>
 800c5e4:	f06f 030f 	mvn.w	r3, #15
 800c5e8:	e060      	b.n	800c6ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c5ee:	4b35      	ldr	r3, [pc, #212]	; (800c6c4 <udp_bind+0x10c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	e009      	b.n	800c60a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d102      	bne.n	800c604 <udp_bind+0x4c>
      rebind = 1;
 800c5fe:	2301      	movs	r3, #1
 800c600:	74fb      	strb	r3, [r7, #19]
      break;
 800c602:	e005      	b.n	800c610 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1f2      	bne.n	800c5f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d109      	bne.n	800c62a <udp_bind+0x72>
    port = udp_new_port();
 800c616:	f7ff fc35 	bl	800be84 <udp_new_port>
 800c61a:	4603      	mov	r3, r0
 800c61c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c61e:	88fb      	ldrh	r3, [r7, #6]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d12c      	bne.n	800c67e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c624:	f06f 0307 	mvn.w	r3, #7
 800c628:	e040      	b.n	800c6ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c62a:	4b26      	ldr	r3, [pc, #152]	; (800c6c4 <udp_bind+0x10c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e022      	b.n	800c678 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	429a      	cmp	r2, r3
 800c638:	d01b      	beq.n	800c672 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	8a5b      	ldrh	r3, [r3, #18]
 800c63e:	88fa      	ldrh	r2, [r7, #6]
 800c640:	429a      	cmp	r2, r3
 800c642:	d116      	bne.n	800c672 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d00d      	beq.n	800c66c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00a      	beq.n	800c66c <udp_bind+0xb4>
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d006      	beq.n	800c66c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c65e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d102      	bne.n	800c672 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c66c:	f06f 0307 	mvn.w	r3, #7
 800c670:	e01c      	b.n	800c6ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1d9      	bne.n	800c632 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <udp_bind+0xd2>
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	e000      	b.n	800c68c <udp_bind+0xd4>
 800c68a:	2300      	movs	r3, #0
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	88fa      	ldrh	r2, [r7, #6]
 800c694:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c696:	7cfb      	ldrb	r3, [r7, #19]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c69c:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <udp_bind+0x10c>)
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c6a4:	4a07      	ldr	r2, [pc, #28]	; (800c6c4 <udp_bind+0x10c>)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	08012fcc 	.word	0x08012fcc
 800c6b8:	080124b0 	.word	0x080124b0
 800c6bc:	08012778 	.word	0x08012778
 800c6c0:	08012504 	.word	0x08012504
 800c6c4:	2000a9b0 	.word	0x2000a9b0

0800c6c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d109      	bne.n	800c6f0 <udp_connect+0x28>
 800c6dc:	4b2c      	ldr	r3, [pc, #176]	; (800c790 <udp_connect+0xc8>)
 800c6de:	f240 4235 	movw	r2, #1077	; 0x435
 800c6e2:	492c      	ldr	r1, [pc, #176]	; (800c794 <udp_connect+0xcc>)
 800c6e4:	482c      	ldr	r0, [pc, #176]	; (800c798 <udp_connect+0xd0>)
 800c6e6:	f002 fce9 	bl	800f0bc <iprintf>
 800c6ea:	f06f 030f 	mvn.w	r3, #15
 800c6ee:	e04b      	b.n	800c788 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d109      	bne.n	800c70a <udp_connect+0x42>
 800c6f6:	4b26      	ldr	r3, [pc, #152]	; (800c790 <udp_connect+0xc8>)
 800c6f8:	f240 4236 	movw	r2, #1078	; 0x436
 800c6fc:	4927      	ldr	r1, [pc, #156]	; (800c79c <udp_connect+0xd4>)
 800c6fe:	4826      	ldr	r0, [pc, #152]	; (800c798 <udp_connect+0xd0>)
 800c700:	f002 fcdc 	bl	800f0bc <iprintf>
 800c704:	f06f 030f 	mvn.w	r3, #15
 800c708:	e03e      	b.n	800c788 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	8a5b      	ldrh	r3, [r3, #18]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10f      	bne.n	800c732 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c712:	68f9      	ldr	r1, [r7, #12]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	8a5b      	ldrh	r3, [r3, #18]
 800c718:	461a      	mov	r2, r3
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f7ff ff4c 	bl	800c5b8 <udp_bind>
 800c720:	4603      	mov	r3, r0
 800c722:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <udp_connect+0x6a>
      return err;
 800c72c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c730:	e02a      	b.n	800c788 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <udp_connect+0x76>
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	e000      	b.n	800c740 <udp_connect+0x78>
 800c73e:	2300      	movs	r3, #0
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	88fa      	ldrh	r2, [r7, #6]
 800c748:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	7c1b      	ldrb	r3, [r3, #16]
 800c74e:	f043 0304 	orr.w	r3, r3, #4
 800c752:	b2da      	uxtb	r2, r3
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c758:	4b11      	ldr	r3, [pc, #68]	; (800c7a0 <udp_connect+0xd8>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	617b      	str	r3, [r7, #20]
 800c75e:	e008      	b.n	800c772 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	429a      	cmp	r2, r3
 800c766:	d101      	bne.n	800c76c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	e00d      	b.n	800c788 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1f3      	bne.n	800c760 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c778:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <udp_connect+0xd8>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c780:	4a07      	ldr	r2, [pc, #28]	; (800c7a0 <udp_connect+0xd8>)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	080124b0 	.word	0x080124b0
 800c794:	08012790 	.word	0x08012790
 800c798:	08012504 	.word	0x08012504
 800c79c:	080127ac 	.word	0x080127ac
 800c7a0:	2000a9b0 	.word	0x2000a9b0

0800c7a4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d107      	bne.n	800c7c2 <udp_disconnect+0x1e>
 800c7b2:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <udp_disconnect+0x44>)
 800c7b4:	f240 426a 	movw	r2, #1130	; 0x46a
 800c7b8:	490c      	ldr	r1, [pc, #48]	; (800c7ec <udp_disconnect+0x48>)
 800c7ba:	480d      	ldr	r0, [pc, #52]	; (800c7f0 <udp_disconnect+0x4c>)
 800c7bc:	f002 fc7e 	bl	800f0bc <iprintf>
 800c7c0:	e00f      	b.n	800c7e2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	7c1b      	ldrb	r3, [r3, #16]
 800c7d8:	f023 0304 	bic.w	r3, r3, #4
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	741a      	strb	r2, [r3, #16]
}
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	080124b0 	.word	0x080124b0
 800c7ec:	080127c8 	.word	0x080127c8
 800c7f0:	08012504 	.word	0x08012504

0800c7f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d107      	bne.n	800c816 <udp_recv+0x22>
 800c806:	4b08      	ldr	r3, [pc, #32]	; (800c828 <udp_recv+0x34>)
 800c808:	f240 428a 	movw	r2, #1162	; 0x48a
 800c80c:	4907      	ldr	r1, [pc, #28]	; (800c82c <udp_recv+0x38>)
 800c80e:	4808      	ldr	r0, [pc, #32]	; (800c830 <udp_recv+0x3c>)
 800c810:	f002 fc54 	bl	800f0bc <iprintf>
 800c814:	e005      	b.n	800c822 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	61da      	str	r2, [r3, #28]
}
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	080124b0 	.word	0x080124b0
 800c82c:	080127e4 	.word	0x080127e4
 800c830:	08012504 	.word	0x08012504

0800c834 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d107      	bne.n	800c852 <udp_remove+0x1e>
 800c842:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <udp_remove+0x74>)
 800c844:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c848:	4918      	ldr	r1, [pc, #96]	; (800c8ac <udp_remove+0x78>)
 800c84a:	4819      	ldr	r0, [pc, #100]	; (800c8b0 <udp_remove+0x7c>)
 800c84c:	f002 fc36 	bl	800f0bc <iprintf>
 800c850:	e026      	b.n	800c8a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c852:	4b18      	ldr	r3, [pc, #96]	; (800c8b4 <udp_remove+0x80>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d105      	bne.n	800c868 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c85c:	4b15      	ldr	r3, [pc, #84]	; (800c8b4 <udp_remove+0x80>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	4a14      	ldr	r2, [pc, #80]	; (800c8b4 <udp_remove+0x80>)
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	e017      	b.n	800c898 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c868:	4b12      	ldr	r3, [pc, #72]	; (800c8b4 <udp_remove+0x80>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	60fb      	str	r3, [r7, #12]
 800c86e:	e010      	b.n	800c892 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <udp_remove+0x58>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d104      	bne.n	800c88c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	60da      	str	r2, [r3, #12]
        break;
 800c88a:	e005      	b.n	800c898 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1eb      	bne.n	800c870 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c898:	6879      	ldr	r1, [r7, #4]
 800c89a:	2000      	movs	r0, #0
 800c89c:	f7f8 fe94 	bl	80055c8 <memp_free>
}
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	080124b0 	.word	0x080124b0
 800c8ac:	080127fc 	.word	0x080127fc
 800c8b0:	08012504 	.word	0x08012504
 800c8b4:	2000a9b0 	.word	0x2000a9b0

0800c8b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c8be:	2000      	movs	r0, #0
 800c8c0:	f7f8 fe12 	bl	80054e8 <memp_malloc>
 800c8c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d007      	beq.n	800c8dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f002 fbeb 	bl	800f0ac <memset>
    pcb->ttl = UDP_TTL;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	22ff      	movs	r2, #255	; 0xff
 800c8da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c8dc:	687b      	ldr	r3, [r7, #4]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
	...

0800c8e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d01e      	beq.n	800c936 <udp_netif_ip_addr_changed+0x4e>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01a      	beq.n	800c936 <udp_netif_ip_addr_changed+0x4e>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d017      	beq.n	800c936 <udp_netif_ip_addr_changed+0x4e>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d013      	beq.n	800c936 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c90e:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <udp_netif_ip_addr_changed+0x5c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e00c      	b.n	800c930 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d103      	bne.n	800c92a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1ef      	bne.n	800c916 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c936:	bf00      	nop
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000a9b0 	.word	0x2000a9b0

0800c948 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c950:	4915      	ldr	r1, [pc, #84]	; (800c9a8 <etharp_free_entry+0x60>)
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	4613      	mov	r3, r2
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	4413      	add	r3, r2
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	440b      	add	r3, r1
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d013      	beq.n	800c98c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c964:	4910      	ldr	r1, [pc, #64]	; (800c9a8 <etharp_free_entry+0x60>)
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	4613      	mov	r3, r2
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	4413      	add	r3, r2
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	440b      	add	r3, r1
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4618      	mov	r0, r3
 800c976:	f7f9 fc9d 	bl	80062b4 <pbuf_free>
    arp_table[i].q = NULL;
 800c97a:	490b      	ldr	r1, [pc, #44]	; (800c9a8 <etharp_free_entry+0x60>)
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	4613      	mov	r3, r2
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	4413      	add	r3, r2
 800c984:	00db      	lsls	r3, r3, #3
 800c986:	440b      	add	r3, r1
 800c988:	2200      	movs	r2, #0
 800c98a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c98c:	4906      	ldr	r1, [pc, #24]	; (800c9a8 <etharp_free_entry+0x60>)
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	4613      	mov	r3, r2
 800c992:	005b      	lsls	r3, r3, #1
 800c994:	4413      	add	r3, r2
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	440b      	add	r3, r1
 800c99a:	3314      	adds	r3, #20
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	2000a9b4 	.word	0x2000a9b4

0800c9ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	607b      	str	r3, [r7, #4]
 800c9b6:	e096      	b.n	800cae6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c9b8:	494f      	ldr	r1, [pc, #316]	; (800caf8 <etharp_tmr+0x14c>)
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	4413      	add	r3, r2
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	440b      	add	r3, r1
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 8086 	beq.w	800cae0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c9d4:	4948      	ldr	r1, [pc, #288]	; (800caf8 <etharp_tmr+0x14c>)
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	4413      	add	r3, r2
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	440b      	add	r3, r1
 800c9e2:	3312      	adds	r3, #18
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	b298      	uxth	r0, r3
 800c9ea:	4943      	ldr	r1, [pc, #268]	; (800caf8 <etharp_tmr+0x14c>)
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	4413      	add	r3, r2
 800c9f4:	00db      	lsls	r3, r3, #3
 800c9f6:	440b      	add	r3, r1
 800c9f8:	3312      	adds	r3, #18
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9fe:	493e      	ldr	r1, [pc, #248]	; (800caf8 <etharp_tmr+0x14c>)
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	440b      	add	r3, r1
 800ca0c:	3312      	adds	r3, #18
 800ca0e:	881b      	ldrh	r3, [r3, #0]
 800ca10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ca14:	d215      	bcs.n	800ca42 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca16:	4938      	ldr	r1, [pc, #224]	; (800caf8 <etharp_tmr+0x14c>)
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	4413      	add	r3, r2
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	440b      	add	r3, r1
 800ca24:	3314      	adds	r3, #20
 800ca26:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d10e      	bne.n	800ca4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ca2c:	4932      	ldr	r1, [pc, #200]	; (800caf8 <etharp_tmr+0x14c>)
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	4613      	mov	r3, r2
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	3312      	adds	r3, #18
 800ca3c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d903      	bls.n	800ca4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7ff ff80 	bl	800c948 <etharp_free_entry>
 800ca48:	e04a      	b.n	800cae0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ca4a:	492b      	ldr	r1, [pc, #172]	; (800caf8 <etharp_tmr+0x14c>)
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	4413      	add	r3, r2
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	440b      	add	r3, r1
 800ca58:	3314      	adds	r3, #20
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d10a      	bne.n	800ca76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ca60:	4925      	ldr	r1, [pc, #148]	; (800caf8 <etharp_tmr+0x14c>)
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	4613      	mov	r3, r2
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4413      	add	r3, r2
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	440b      	add	r3, r1
 800ca6e:	3314      	adds	r3, #20
 800ca70:	2204      	movs	r2, #4
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	e034      	b.n	800cae0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ca76:	4920      	ldr	r1, [pc, #128]	; (800caf8 <etharp_tmr+0x14c>)
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	4413      	add	r3, r2
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	440b      	add	r3, r1
 800ca84:	3314      	adds	r3, #20
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d10a      	bne.n	800caa2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ca8c:	491a      	ldr	r1, [pc, #104]	; (800caf8 <etharp_tmr+0x14c>)
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	440b      	add	r3, r1
 800ca9a:	3314      	adds	r3, #20
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	701a      	strb	r2, [r3, #0]
 800caa0:	e01e      	b.n	800cae0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800caa2:	4915      	ldr	r1, [pc, #84]	; (800caf8 <etharp_tmr+0x14c>)
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	4613      	mov	r3, r2
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	4413      	add	r3, r2
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	440b      	add	r3, r1
 800cab0:	3314      	adds	r3, #20
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d113      	bne.n	800cae0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cab8:	490f      	ldr	r1, [pc, #60]	; (800caf8 <etharp_tmr+0x14c>)
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	4613      	mov	r3, r2
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	4413      	add	r3, r2
 800cac2:	00db      	lsls	r3, r3, #3
 800cac4:	440b      	add	r3, r1
 800cac6:	3308      	adds	r3, #8
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	4613      	mov	r3, r2
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	4413      	add	r3, r2
 800cad2:	00db      	lsls	r3, r3, #3
 800cad4:	4a08      	ldr	r2, [pc, #32]	; (800caf8 <etharp_tmr+0x14c>)
 800cad6:	4413      	add	r3, r2
 800cad8:	3304      	adds	r3, #4
 800cada:	4619      	mov	r1, r3
 800cadc:	f000 fe6e 	bl	800d7bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3301      	adds	r3, #1
 800cae4:	607b      	str	r3, [r7, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b09      	cmp	r3, #9
 800caea:	f77f af65 	ble.w	800c9b8 <etharp_tmr+0xc>
      }
    }
  }
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	2000a9b4 	.word	0x2000a9b4

0800cafc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	; 0x28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	460b      	mov	r3, r1
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cb0a:	230a      	movs	r3, #10
 800cb0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cb0e:	230a      	movs	r3, #10
 800cb10:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cb12:	230a      	movs	r3, #10
 800cb14:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cb1a:	230a      	movs	r3, #10
 800cb1c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	83bb      	strh	r3, [r7, #28]
 800cb22:	2300      	movs	r3, #0
 800cb24:	837b      	strh	r3, [r7, #26]
 800cb26:	2300      	movs	r3, #0
 800cb28:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	843b      	strh	r3, [r7, #32]
 800cb2e:	e0ae      	b.n	800cc8e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cb30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb34:	49a6      	ldr	r1, [pc, #664]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cb36:	4613      	mov	r3, r2
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	440b      	add	r3, r1
 800cb40:	3314      	adds	r3, #20
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cb46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cb4a:	2b0a      	cmp	r3, #10
 800cb4c:	d105      	bne.n	800cb5a <etharp_find_entry+0x5e>
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cb54:	8c3b      	ldrh	r3, [r7, #32]
 800cb56:	847b      	strh	r3, [r7, #34]	; 0x22
 800cb58:	e095      	b.n	800cc86 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f000 8092 	beq.w	800cc86 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d009      	beq.n	800cb7c <etharp_find_entry+0x80>
 800cb68:	7dfb      	ldrb	r3, [r7, #23]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d806      	bhi.n	800cb7c <etharp_find_entry+0x80>
 800cb6e:	4b99      	ldr	r3, [pc, #612]	; (800cdd4 <etharp_find_entry+0x2d8>)
 800cb70:	f240 1223 	movw	r2, #291	; 0x123
 800cb74:	4998      	ldr	r1, [pc, #608]	; (800cdd8 <etharp_find_entry+0x2dc>)
 800cb76:	4899      	ldr	r0, [pc, #612]	; (800cddc <etharp_find_entry+0x2e0>)
 800cb78:	f002 faa0 	bl	800f0bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d020      	beq.n	800cbc4 <etharp_find_entry+0xc8>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6819      	ldr	r1, [r3, #0]
 800cb86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb8a:	4891      	ldr	r0, [pc, #580]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	4403      	add	r3, r0
 800cb96:	3304      	adds	r3, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4299      	cmp	r1, r3
 800cb9c:	d112      	bne.n	800cbc4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00c      	beq.n	800cbbe <etharp_find_entry+0xc2>
 800cba4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cba8:	4989      	ldr	r1, [pc, #548]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cbaa:	4613      	mov	r3, r2
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	4413      	add	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	440b      	add	r3, r1
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d102      	bne.n	800cbc4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cbbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cbc2:	e100      	b.n	800cdc6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cbc4:	7dfb      	ldrb	r3, [r7, #23]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d140      	bne.n	800cc4c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cbca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbce:	4980      	ldr	r1, [pc, #512]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	4413      	add	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	440b      	add	r3, r1
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d01a      	beq.n	800cc16 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cbe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbe4:	497a      	ldr	r1, [pc, #488]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	00db      	lsls	r3, r3, #3
 800cbee:	440b      	add	r3, r1
 800cbf0:	3312      	adds	r3, #18
 800cbf2:	881b      	ldrh	r3, [r3, #0]
 800cbf4:	8bba      	ldrh	r2, [r7, #28]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d845      	bhi.n	800cc86 <etharp_find_entry+0x18a>
            old_queue = i;
 800cbfa:	8c3b      	ldrh	r3, [r7, #32]
 800cbfc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cbfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc02:	4973      	ldr	r1, [pc, #460]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cc04:	4613      	mov	r3, r2
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	4413      	add	r3, r2
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	440b      	add	r3, r1
 800cc0e:	3312      	adds	r3, #18
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	83bb      	strh	r3, [r7, #28]
 800cc14:	e037      	b.n	800cc86 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cc16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc1a:	496d      	ldr	r1, [pc, #436]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	4413      	add	r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	440b      	add	r3, r1
 800cc26:	3312      	adds	r3, #18
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	8b7a      	ldrh	r2, [r7, #26]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d82a      	bhi.n	800cc86 <etharp_find_entry+0x18a>
            old_pending = i;
 800cc30:	8c3b      	ldrh	r3, [r7, #32]
 800cc32:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cc34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc38:	4965      	ldr	r1, [pc, #404]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	4413      	add	r3, r2
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	440b      	add	r3, r1
 800cc44:	3312      	adds	r3, #18
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	837b      	strh	r3, [r7, #26]
 800cc4a:	e01c      	b.n	800cc86 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d919      	bls.n	800cc86 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cc52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc56:	495e      	ldr	r1, [pc, #376]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cc58:	4613      	mov	r3, r2
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	4413      	add	r3, r2
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	440b      	add	r3, r1
 800cc62:	3312      	adds	r3, #18
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	8b3a      	ldrh	r2, [r7, #24]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d80c      	bhi.n	800cc86 <etharp_find_entry+0x18a>
            old_stable = i;
 800cc6c:	8c3b      	ldrh	r3, [r7, #32]
 800cc6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cc70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc74:	4956      	ldr	r1, [pc, #344]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	440b      	add	r3, r1
 800cc80:	3312      	adds	r3, #18
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc86:	8c3b      	ldrh	r3, [r7, #32]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	843b      	strh	r3, [r7, #32]
 800cc8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc92:	2b09      	cmp	r3, #9
 800cc94:	f77f af4c 	ble.w	800cb30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cc98:	7afb      	ldrb	r3, [r7, #11]
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d108      	bne.n	800ccb4 <etharp_find_entry+0x1b8>
 800cca2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cca6:	2b0a      	cmp	r3, #10
 800cca8:	d107      	bne.n	800ccba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d102      	bne.n	800ccba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ccb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb8:	e085      	b.n	800cdc6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ccba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ccbe:	2b09      	cmp	r3, #9
 800ccc0:	dc02      	bgt.n	800ccc8 <etharp_find_entry+0x1cc>
    i = empty;
 800ccc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccc4:	843b      	strh	r3, [r7, #32]
 800ccc6:	e039      	b.n	800cd3c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ccc8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cccc:	2b09      	cmp	r3, #9
 800ccce:	dc14      	bgt.n	800ccfa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ccd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccd2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ccd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccd8:	493d      	ldr	r1, [pc, #244]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	440b      	add	r3, r1
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d018      	beq.n	800cd1c <etharp_find_entry+0x220>
 800ccea:	4b3a      	ldr	r3, [pc, #232]	; (800cdd4 <etharp_find_entry+0x2d8>)
 800ccec:	f240 126d 	movw	r2, #365	; 0x16d
 800ccf0:	493b      	ldr	r1, [pc, #236]	; (800cde0 <etharp_find_entry+0x2e4>)
 800ccf2:	483a      	ldr	r0, [pc, #232]	; (800cddc <etharp_find_entry+0x2e0>)
 800ccf4:	f002 f9e2 	bl	800f0bc <iprintf>
 800ccf8:	e010      	b.n	800cd1c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ccfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ccfe:	2b09      	cmp	r3, #9
 800cd00:	dc02      	bgt.n	800cd08 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cd02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd04:	843b      	strh	r3, [r7, #32]
 800cd06:	e009      	b.n	800cd1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cd08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cd0c:	2b09      	cmp	r3, #9
 800cd0e:	dc02      	bgt.n	800cd16 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cd10:	8bfb      	ldrh	r3, [r7, #30]
 800cd12:	843b      	strh	r3, [r7, #32]
 800cd14:	e002      	b.n	800cd1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cd16:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1a:	e054      	b.n	800cdc6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd20:	2b09      	cmp	r3, #9
 800cd22:	dd06      	ble.n	800cd32 <etharp_find_entry+0x236>
 800cd24:	4b2b      	ldr	r3, [pc, #172]	; (800cdd4 <etharp_find_entry+0x2d8>)
 800cd26:	f240 127f 	movw	r2, #383	; 0x17f
 800cd2a:	492e      	ldr	r1, [pc, #184]	; (800cde4 <etharp_find_entry+0x2e8>)
 800cd2c:	482b      	ldr	r0, [pc, #172]	; (800cddc <etharp_find_entry+0x2e0>)
 800cd2e:	f002 f9c5 	bl	800f0bc <iprintf>
    etharp_free_entry(i);
 800cd32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fe06 	bl	800c948 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd40:	2b09      	cmp	r3, #9
 800cd42:	dd06      	ble.n	800cd52 <etharp_find_entry+0x256>
 800cd44:	4b23      	ldr	r3, [pc, #140]	; (800cdd4 <etharp_find_entry+0x2d8>)
 800cd46:	f240 1283 	movw	r2, #387	; 0x183
 800cd4a:	4926      	ldr	r1, [pc, #152]	; (800cde4 <etharp_find_entry+0x2e8>)
 800cd4c:	4823      	ldr	r0, [pc, #140]	; (800cddc <etharp_find_entry+0x2e0>)
 800cd4e:	f002 f9b5 	bl	800f0bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cd52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd56:	491e      	ldr	r1, [pc, #120]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cd58:	4613      	mov	r3, r2
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	4413      	add	r3, r2
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	440b      	add	r3, r1
 800cd62:	3314      	adds	r3, #20
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d006      	beq.n	800cd78 <etharp_find_entry+0x27c>
 800cd6a:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <etharp_find_entry+0x2d8>)
 800cd6c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cd70:	491d      	ldr	r1, [pc, #116]	; (800cde8 <etharp_find_entry+0x2ec>)
 800cd72:	481a      	ldr	r0, [pc, #104]	; (800cddc <etharp_find_entry+0x2e0>)
 800cd74:	f002 f9a2 	bl	800f0bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cd7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6819      	ldr	r1, [r3, #0]
 800cd86:	4812      	ldr	r0, [pc, #72]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cd88:	4613      	mov	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	4413      	add	r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	4403      	add	r3, r0
 800cd92:	3304      	adds	r3, #4
 800cd94:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cd96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd9a:	490d      	ldr	r1, [pc, #52]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	4413      	add	r3, r2
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	440b      	add	r3, r1
 800cda6:	3312      	adds	r3, #18
 800cda8:	2200      	movs	r2, #0
 800cdaa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cdac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdb0:	4907      	ldr	r1, [pc, #28]	; (800cdd0 <etharp_find_entry+0x2d4>)
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4413      	add	r3, r2
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	440b      	add	r3, r1
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cdc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3728      	adds	r7, #40	; 0x28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	2000a9b4 	.word	0x2000a9b4
 800cdd4:	08012814 	.word	0x08012814
 800cdd8:	0801284c 	.word	0x0801284c
 800cddc:	0801288c 	.word	0x0801288c
 800cde0:	080128b4 	.word	0x080128b4
 800cde4:	080128cc 	.word	0x080128cc
 800cde8:	080128e0 	.word	0x080128e0

0800cdec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b088      	sub	sp, #32
 800cdf0:	af02      	add	r7, sp, #8
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce00:	2b06      	cmp	r3, #6
 800ce02:	d006      	beq.n	800ce12 <etharp_update_arp_entry+0x26>
 800ce04:	4b48      	ldr	r3, [pc, #288]	; (800cf28 <etharp_update_arp_entry+0x13c>)
 800ce06:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ce0a:	4948      	ldr	r1, [pc, #288]	; (800cf2c <etharp_update_arp_entry+0x140>)
 800ce0c:	4848      	ldr	r0, [pc, #288]	; (800cf30 <etharp_update_arp_entry+0x144>)
 800ce0e:	f002 f955 	bl	800f0bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d012      	beq.n	800ce3e <etharp_update_arp_entry+0x52>
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00e      	beq.n	800ce3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68f9      	ldr	r1, [r7, #12]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f001 f8fe 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800ce2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d105      	bne.n	800ce3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce3a:	2be0      	cmp	r3, #224	; 0xe0
 800ce3c:	d102      	bne.n	800ce44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce3e:	f06f 030f 	mvn.w	r3, #15
 800ce42:	e06c      	b.n	800cf1e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ce44:	78fb      	ldrb	r3, [r7, #3]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	68b8      	ldr	r0, [r7, #8]
 800ce4c:	f7ff fe56 	bl	800cafc <etharp_find_entry>
 800ce50:	4603      	mov	r3, r0
 800ce52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ce54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	da02      	bge.n	800ce62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ce5c:	8afb      	ldrh	r3, [r7, #22]
 800ce5e:	b25b      	sxtb	r3, r3
 800ce60:	e05d      	b.n	800cf1e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ce62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce66:	4933      	ldr	r1, [pc, #204]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800ce68:	4613      	mov	r3, r2
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	4413      	add	r3, r2
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	440b      	add	r3, r1
 800ce72:	3314      	adds	r3, #20
 800ce74:	2202      	movs	r2, #2
 800ce76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ce78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce7c:	492d      	ldr	r1, [pc, #180]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800ce7e:	4613      	mov	r3, r2
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	4413      	add	r3, r2
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	440b      	add	r3, r1
 800ce88:	3308      	adds	r3, #8
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ce8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce92:	4613      	mov	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4413      	add	r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	4a25      	ldr	r2, [pc, #148]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800ce9e:	4413      	add	r3, r2
 800cea0:	3304      	adds	r3, #4
 800cea2:	2206      	movs	r2, #6
 800cea4:	6879      	ldr	r1, [r7, #4]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f002 f8d8 	bl	800f05c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ceac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ceb0:	4920      	ldr	r1, [pc, #128]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	4413      	add	r3, r2
 800ceb8:	00db      	lsls	r3, r3, #3
 800ceba:	440b      	add	r3, r1
 800cebc:	3312      	adds	r3, #18
 800cebe:	2200      	movs	r2, #0
 800cec0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cec2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cec6:	491b      	ldr	r1, [pc, #108]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800cec8:	4613      	mov	r3, r2
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	4413      	add	r3, r2
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	440b      	add	r3, r1
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d021      	beq.n	800cf1c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ced8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cedc:	4915      	ldr	r1, [pc, #84]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800cede:	4613      	mov	r3, r2
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	4413      	add	r3, r2
 800cee4:	00db      	lsls	r3, r3, #3
 800cee6:	440b      	add	r3, r1
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ceec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cef0:	4910      	ldr	r1, [pc, #64]	; (800cf34 <etharp_update_arp_entry+0x148>)
 800cef2:	4613      	mov	r3, r2
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	4413      	add	r3, r2
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	440b      	add	r3, r1
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cf06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6939      	ldr	r1, [r7, #16]
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f002 f827 	bl	800ef64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cf16:	6938      	ldr	r0, [r7, #16]
 800cf18:	f7f9 f9cc 	bl	80062b4 <pbuf_free>
  }
  return ERR_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3718      	adds	r7, #24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	08012814 	.word	0x08012814
 800cf2c:	0801290c 	.word	0x0801290c
 800cf30:	0801288c 	.word	0x0801288c
 800cf34:	2000a9b4 	.word	0x2000a9b4

0800cf38 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	e01e      	b.n	800cf84 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cf46:	4913      	ldr	r1, [pc, #76]	; (800cf94 <etharp_cleanup_netif+0x5c>)
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	3314      	adds	r3, #20
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cf5a:	7afb      	ldrb	r3, [r7, #11]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00e      	beq.n	800cf7e <etharp_cleanup_netif+0x46>
 800cf60:	490c      	ldr	r1, [pc, #48]	; (800cf94 <etharp_cleanup_netif+0x5c>)
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	4613      	mov	r3, r2
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	4413      	add	r3, r2
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	440b      	add	r3, r1
 800cf6e:	3308      	adds	r3, #8
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d102      	bne.n	800cf7e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f7ff fce5 	bl	800c948 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3301      	adds	r3, #1
 800cf82:	60fb      	str	r3, [r7, #12]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b09      	cmp	r3, #9
 800cf88:	dddd      	ble.n	800cf46 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cf8a:	bf00      	nop
 800cf8c:	bf00      	nop
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	2000a9b4 	.word	0x2000a9b4

0800cf98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cf98:	b5b0      	push	{r4, r5, r7, lr}
 800cf9a:	b08a      	sub	sp, #40	; 0x28
 800cf9c:	af04      	add	r7, sp, #16
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d107      	bne.n	800cfb8 <etharp_input+0x20>
 800cfa8:	4b3d      	ldr	r3, [pc, #244]	; (800d0a0 <etharp_input+0x108>)
 800cfaa:	f240 228a 	movw	r2, #650	; 0x28a
 800cfae:	493d      	ldr	r1, [pc, #244]	; (800d0a4 <etharp_input+0x10c>)
 800cfb0:	483d      	ldr	r0, [pc, #244]	; (800d0a8 <etharp_input+0x110>)
 800cfb2:	f002 f883 	bl	800f0bc <iprintf>
 800cfb6:	e06f      	b.n	800d098 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfc8:	d10c      	bne.n	800cfe4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cfce:	2b06      	cmp	r3, #6
 800cfd0:	d108      	bne.n	800cfe4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	d104      	bne.n	800cfe4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	885b      	ldrh	r3, [r3, #2]
 800cfde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfe0:	2b08      	cmp	r3, #8
 800cfe2:	d003      	beq.n	800cfec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7f9 f965 	bl	80062b4 <pbuf_free>
    return;
 800cfea:	e055      	b.n	800d098 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	330e      	adds	r3, #14
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	3318      	adds	r3, #24
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	3304      	adds	r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <etharp_input+0x74>
    for_us = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	75fb      	strb	r3, [r7, #23]
 800d00a:	e009      	b.n	800d020 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	3304      	adds	r3, #4
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	429a      	cmp	r2, r3
 800d016:	bf0c      	ite	eq
 800d018:	2301      	moveq	r3, #1
 800d01a:	2300      	movne	r3, #0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	f103 0208 	add.w	r2, r3, #8
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <etharp_input+0x98>
 800d02c:	2301      	movs	r3, #1
 800d02e:	e000      	b.n	800d032 <etharp_input+0x9a>
 800d030:	2302      	movs	r3, #2
 800d032:	f107 010c 	add.w	r1, r7, #12
 800d036:	6838      	ldr	r0, [r7, #0]
 800d038:	f7ff fed8 	bl	800cdec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	88db      	ldrh	r3, [r3, #6]
 800d040:	b29b      	uxth	r3, r3
 800d042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d046:	d003      	beq.n	800d050 <etharp_input+0xb8>
 800d048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d04c:	d01e      	beq.n	800d08c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d04e:	e020      	b.n	800d092 <etharp_input+0xfa>
      if (for_us) {
 800d050:	7dfb      	ldrb	r3, [r7, #23]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d01c      	beq.n	800d090 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d070:	2102      	movs	r1, #2
 800d072:	9103      	str	r1, [sp, #12]
 800d074:	f107 010c 	add.w	r1, r7, #12
 800d078:	9102      	str	r1, [sp, #8]
 800d07a:	9201      	str	r2, [sp, #4]
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	462b      	mov	r3, r5
 800d080:	4622      	mov	r2, r4
 800d082:	4601      	mov	r1, r0
 800d084:	6838      	ldr	r0, [r7, #0]
 800d086:	f000 faeb 	bl	800d660 <etharp_raw>
      break;
 800d08a:	e001      	b.n	800d090 <etharp_input+0xf8>
      break;
 800d08c:	bf00      	nop
 800d08e:	e000      	b.n	800d092 <etharp_input+0xfa>
      break;
 800d090:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7f9 f90e 	bl	80062b4 <pbuf_free>
}
 800d098:	3718      	adds	r7, #24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bdb0      	pop	{r4, r5, r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08012814 	.word	0x08012814
 800d0a4:	08012964 	.word	0x08012964
 800d0a8:	0801288c 	.word	0x0801288c

0800d0ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af02      	add	r7, sp, #8
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d0ba:	79fa      	ldrb	r2, [r7, #7]
 800d0bc:	4944      	ldr	r1, [pc, #272]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d0be:	4613      	mov	r3, r2
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	4413      	add	r3, r2
 800d0c4:	00db      	lsls	r3, r3, #3
 800d0c6:	440b      	add	r3, r1
 800d0c8:	3314      	adds	r3, #20
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d806      	bhi.n	800d0de <etharp_output_to_arp_index+0x32>
 800d0d0:	4b40      	ldr	r3, [pc, #256]	; (800d1d4 <etharp_output_to_arp_index+0x128>)
 800d0d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d0d6:	4940      	ldr	r1, [pc, #256]	; (800d1d8 <etharp_output_to_arp_index+0x12c>)
 800d0d8:	4840      	ldr	r0, [pc, #256]	; (800d1dc <etharp_output_to_arp_index+0x130>)
 800d0da:	f001 ffef 	bl	800f0bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d0de:	79fa      	ldrb	r2, [r7, #7]
 800d0e0:	493b      	ldr	r1, [pc, #236]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	440b      	add	r3, r1
 800d0ec:	3314      	adds	r3, #20
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d153      	bne.n	800d19c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d0f4:	79fa      	ldrb	r2, [r7, #7]
 800d0f6:	4936      	ldr	r1, [pc, #216]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	4413      	add	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	440b      	add	r3, r1
 800d102:	3312      	adds	r3, #18
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d10a:	d919      	bls.n	800d140 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d10c:	79fa      	ldrb	r2, [r7, #7]
 800d10e:	4613      	mov	r3, r2
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	4413      	add	r3, r2
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	4a2e      	ldr	r2, [pc, #184]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d118:	4413      	add	r3, r2
 800d11a:	3304      	adds	r3, #4
 800d11c:	4619      	mov	r1, r3
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f000 fb4c 	bl	800d7bc <etharp_request>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d138      	bne.n	800d19c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d12a:	79fa      	ldrb	r2, [r7, #7]
 800d12c:	4928      	ldr	r1, [pc, #160]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d12e:	4613      	mov	r3, r2
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	4413      	add	r3, r2
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	440b      	add	r3, r1
 800d138:	3314      	adds	r3, #20
 800d13a:	2203      	movs	r2, #3
 800d13c:	701a      	strb	r2, [r3, #0]
 800d13e:	e02d      	b.n	800d19c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d140:	79fa      	ldrb	r2, [r7, #7]
 800d142:	4923      	ldr	r1, [pc, #140]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d144:	4613      	mov	r3, r2
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4413      	add	r3, r2
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	440b      	add	r3, r1
 800d14e:	3312      	adds	r3, #18
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d156:	d321      	bcc.n	800d19c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d158:	79fa      	ldrb	r2, [r7, #7]
 800d15a:	4613      	mov	r3, r2
 800d15c:	005b      	lsls	r3, r3, #1
 800d15e:	4413      	add	r3, r2
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	4a1b      	ldr	r2, [pc, #108]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d164:	4413      	add	r3, r2
 800d166:	1d19      	adds	r1, r3, #4
 800d168:	79fa      	ldrb	r2, [r7, #7]
 800d16a:	4613      	mov	r3, r2
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	4413      	add	r3, r2
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	3308      	adds	r3, #8
 800d174:	4a16      	ldr	r2, [pc, #88]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d176:	4413      	add	r3, r2
 800d178:	3304      	adds	r3, #4
 800d17a:	461a      	mov	r2, r3
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 fafb 	bl	800d778 <etharp_request_dst>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d109      	bne.n	800d19c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d188:	79fa      	ldrb	r2, [r7, #7]
 800d18a:	4911      	ldr	r1, [pc, #68]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d18c:	4613      	mov	r3, r2
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	4413      	add	r3, r2
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	440b      	add	r3, r1
 800d196:	3314      	adds	r3, #20
 800d198:	2203      	movs	r2, #3
 800d19a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d1a2:	79fa      	ldrb	r2, [r7, #7]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	4413      	add	r3, r2
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	3308      	adds	r3, #8
 800d1ae:	4a08      	ldr	r2, [pc, #32]	; (800d1d0 <etharp_output_to_arp_index+0x124>)
 800d1b0:	4413      	add	r3, r2
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1b8:	9200      	str	r2, [sp, #0]
 800d1ba:	460a      	mov	r2, r1
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f001 fed0 	bl	800ef64 <ethernet_output>
 800d1c4:	4603      	mov	r3, r0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	2000a9b4 	.word	0x2000a9b4
 800d1d4:	08012814 	.word	0x08012814
 800d1d8:	08012984 	.word	0x08012984
 800d1dc:	0801288c 	.word	0x0801288c

0800d1e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08a      	sub	sp, #40	; 0x28
 800d1e4:	af02      	add	r7, sp, #8
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <etharp_output+0x24>
 800d1f6:	4b73      	ldr	r3, [pc, #460]	; (800d3c4 <etharp_output+0x1e4>)
 800d1f8:	f240 321e 	movw	r2, #798	; 0x31e
 800d1fc:	4972      	ldr	r1, [pc, #456]	; (800d3c8 <etharp_output+0x1e8>)
 800d1fe:	4873      	ldr	r0, [pc, #460]	; (800d3cc <etharp_output+0x1ec>)
 800d200:	f001 ff5c 	bl	800f0bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d106      	bne.n	800d218 <etharp_output+0x38>
 800d20a:	4b6e      	ldr	r3, [pc, #440]	; (800d3c4 <etharp_output+0x1e4>)
 800d20c:	f240 321f 	movw	r2, #799	; 0x31f
 800d210:	496f      	ldr	r1, [pc, #444]	; (800d3d0 <etharp_output+0x1f0>)
 800d212:	486e      	ldr	r0, [pc, #440]	; (800d3cc <etharp_output+0x1ec>)
 800d214:	f001 ff52 	bl	800f0bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <etharp_output+0x4c>
 800d21e:	4b69      	ldr	r3, [pc, #420]	; (800d3c4 <etharp_output+0x1e4>)
 800d220:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d224:	496b      	ldr	r1, [pc, #428]	; (800d3d4 <etharp_output+0x1f4>)
 800d226:	4869      	ldr	r0, [pc, #420]	; (800d3cc <etharp_output+0x1ec>)
 800d228:	f001 ff48 	bl	800f0bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68f9      	ldr	r1, [r7, #12]
 800d232:	4618      	mov	r0, r3
 800d234:	f000 fef8 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d002      	beq.n	800d244 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d23e:	4b66      	ldr	r3, [pc, #408]	; (800d3d8 <etharp_output+0x1f8>)
 800d240:	61fb      	str	r3, [r7, #28]
 800d242:	e0af      	b.n	800d3a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d24c:	2be0      	cmp	r3, #224	; 0xe0
 800d24e:	d118      	bne.n	800d282 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d250:	2301      	movs	r3, #1
 800d252:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d254:	2300      	movs	r3, #0
 800d256:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d258:	235e      	movs	r3, #94	; 0x5e
 800d25a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	3301      	adds	r3, #1
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d266:	b2db      	uxtb	r3, r3
 800d268:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3302      	adds	r3, #2
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3303      	adds	r3, #3
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d27a:	f107 0310 	add.w	r3, r7, #16
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e090      	b.n	800d3a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3304      	adds	r3, #4
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	405a      	eors	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3308      	adds	r3, #8
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4013      	ands	r3, r2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d012      	beq.n	800d2c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d2a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d00b      	beq.n	800d2c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	330c      	adds	r3, #12
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	330c      	adds	r3, #12
 800d2b6:	61bb      	str	r3, [r7, #24]
 800d2b8:	e002      	b.n	800d2c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d2ba:	f06f 0303 	mvn.w	r3, #3
 800d2be:	e07d      	b.n	800d3bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d2c0:	4b46      	ldr	r3, [pc, #280]	; (800d3dc <etharp_output+0x1fc>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4a46      	ldr	r2, [pc, #280]	; (800d3e0 <etharp_output+0x200>)
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	440b      	add	r3, r1
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	4413      	add	r3, r2
 800d2d2:	3314      	adds	r3, #20
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d925      	bls.n	800d326 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2da:	4b40      	ldr	r3, [pc, #256]	; (800d3dc <etharp_output+0x1fc>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4a3f      	ldr	r2, [pc, #252]	; (800d3e0 <etharp_output+0x200>)
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	440b      	add	r3, r1
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	4413      	add	r3, r2
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d117      	bne.n	800d326 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4b38      	ldr	r3, [pc, #224]	; (800d3dc <etharp_output+0x1fc>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	4937      	ldr	r1, [pc, #220]	; (800d3e0 <etharp_output+0x200>)
 800d302:	4603      	mov	r3, r0
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	4403      	add	r3, r0
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	440b      	add	r3, r1
 800d30c:	3304      	adds	r3, #4
 800d30e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d310:	429a      	cmp	r2, r3
 800d312:	d108      	bne.n	800d326 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d314:	4b31      	ldr	r3, [pc, #196]	; (800d3dc <etharp_output+0x1fc>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	461a      	mov	r2, r3
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff fec5 	bl	800d0ac <etharp_output_to_arp_index>
 800d322:	4603      	mov	r3, r0
 800d324:	e04a      	b.n	800d3bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d326:	2300      	movs	r3, #0
 800d328:	75fb      	strb	r3, [r7, #23]
 800d32a:	e031      	b.n	800d390 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d32c:	7dfa      	ldrb	r2, [r7, #23]
 800d32e:	492c      	ldr	r1, [pc, #176]	; (800d3e0 <etharp_output+0x200>)
 800d330:	4613      	mov	r3, r2
 800d332:	005b      	lsls	r3, r3, #1
 800d334:	4413      	add	r3, r2
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	440b      	add	r3, r1
 800d33a:	3314      	adds	r3, #20
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d923      	bls.n	800d38a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d342:	7dfa      	ldrb	r2, [r7, #23]
 800d344:	4926      	ldr	r1, [pc, #152]	; (800d3e0 <etharp_output+0x200>)
 800d346:	4613      	mov	r3, r2
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	4413      	add	r3, r2
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	440b      	add	r3, r1
 800d350:	3308      	adds	r3, #8
 800d352:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	429a      	cmp	r2, r3
 800d358:	d117      	bne.n	800d38a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	6819      	ldr	r1, [r3, #0]
 800d35e:	7dfa      	ldrb	r2, [r7, #23]
 800d360:	481f      	ldr	r0, [pc, #124]	; (800d3e0 <etharp_output+0x200>)
 800d362:	4613      	mov	r3, r2
 800d364:	005b      	lsls	r3, r3, #1
 800d366:	4413      	add	r3, r2
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	4403      	add	r3, r0
 800d36c:	3304      	adds	r3, #4
 800d36e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d370:	4299      	cmp	r1, r3
 800d372:	d10a      	bne.n	800d38a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d374:	4a19      	ldr	r2, [pc, #100]	; (800d3dc <etharp_output+0x1fc>)
 800d376:	7dfb      	ldrb	r3, [r7, #23]
 800d378:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	461a      	mov	r2, r3
 800d37e:	68b9      	ldr	r1, [r7, #8]
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7ff fe93 	bl	800d0ac <etharp_output_to_arp_index>
 800d386:	4603      	mov	r3, r0
 800d388:	e018      	b.n	800d3bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	3301      	adds	r3, #1
 800d38e:	75fb      	strb	r3, [r7, #23]
 800d390:	7dfb      	ldrb	r3, [r7, #23]
 800d392:	2b09      	cmp	r3, #9
 800d394:	d9ca      	bls.n	800d32c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	69b9      	ldr	r1, [r7, #24]
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f000 f822 	bl	800d3e4 <etharp_query>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	e00b      	b.n	800d3bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d3aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	68b9      	ldr	r1, [r7, #8]
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f001 fdd5 	bl	800ef64 <ethernet_output>
 800d3ba:	4603      	mov	r3, r0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3720      	adds	r7, #32
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	08012814 	.word	0x08012814
 800d3c8:	08012964 	.word	0x08012964
 800d3cc:	0801288c 	.word	0x0801288c
 800d3d0:	080129b4 	.word	0x080129b4
 800d3d4:	08012954 	.word	0x08012954
 800d3d8:	08012fd0 	.word	0x08012fd0
 800d3dc:	2000aaa4 	.word	0x2000aaa4
 800d3e0:	2000a9b4 	.word	0x2000a9b4

0800d3e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08c      	sub	sp, #48	; 0x30
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3326      	adds	r3, #38	; 0x26
 800d3f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d3f6:	23ff      	movs	r3, #255	; 0xff
 800d3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	68f9      	ldr	r1, [r7, #12]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fe0e 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10c      	bne.n	800d42c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d41a:	2be0      	cmp	r3, #224	; 0xe0
 800d41c:	d006      	beq.n	800d42c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d102      	bne.n	800d432 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d42c:	f06f 030f 	mvn.w	r3, #15
 800d430:	e101      	b.n	800d636 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	2101      	movs	r1, #1
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f7ff fb60 	bl	800cafc <etharp_find_entry>
 800d43c:	4603      	mov	r3, r0
 800d43e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d444:	2b00      	cmp	r3, #0
 800d446:	da02      	bge.n	800d44e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d448:	8a7b      	ldrh	r3, [r7, #18]
 800d44a:	b25b      	sxtb	r3, r3
 800d44c:	e0f3      	b.n	800d636 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d44e:	8a7b      	ldrh	r3, [r7, #18]
 800d450:	2b7e      	cmp	r3, #126	; 0x7e
 800d452:	d906      	bls.n	800d462 <etharp_query+0x7e>
 800d454:	4b7a      	ldr	r3, [pc, #488]	; (800d640 <etharp_query+0x25c>)
 800d456:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d45a:	497a      	ldr	r1, [pc, #488]	; (800d644 <etharp_query+0x260>)
 800d45c:	487a      	ldr	r0, [pc, #488]	; (800d648 <etharp_query+0x264>)
 800d45e:	f001 fe2d 	bl	800f0bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d462:	8a7b      	ldrh	r3, [r7, #18]
 800d464:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d466:	7c7a      	ldrb	r2, [r7, #17]
 800d468:	4978      	ldr	r1, [pc, #480]	; (800d64c <etharp_query+0x268>)
 800d46a:	4613      	mov	r3, r2
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	440b      	add	r3, r1
 800d474:	3314      	adds	r3, #20
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d115      	bne.n	800d4a8 <etharp_query+0xc4>
    is_new_entry = 1;
 800d47c:	2301      	movs	r3, #1
 800d47e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d480:	7c7a      	ldrb	r2, [r7, #17]
 800d482:	4972      	ldr	r1, [pc, #456]	; (800d64c <etharp_query+0x268>)
 800d484:	4613      	mov	r3, r2
 800d486:	005b      	lsls	r3, r3, #1
 800d488:	4413      	add	r3, r2
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	440b      	add	r3, r1
 800d48e:	3314      	adds	r3, #20
 800d490:	2201      	movs	r2, #1
 800d492:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d494:	7c7a      	ldrb	r2, [r7, #17]
 800d496:	496d      	ldr	r1, [pc, #436]	; (800d64c <etharp_query+0x268>)
 800d498:	4613      	mov	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	4413      	add	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d4a8:	7c7a      	ldrb	r2, [r7, #17]
 800d4aa:	4968      	ldr	r1, [pc, #416]	; (800d64c <etharp_query+0x268>)
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	4413      	add	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	440b      	add	r3, r1
 800d4b6:	3314      	adds	r3, #20
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d011      	beq.n	800d4e2 <etharp_query+0xfe>
 800d4be:	7c7a      	ldrb	r2, [r7, #17]
 800d4c0:	4962      	ldr	r1, [pc, #392]	; (800d64c <etharp_query+0x268>)
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	4413      	add	r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	440b      	add	r3, r1
 800d4cc:	3314      	adds	r3, #20
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d806      	bhi.n	800d4e2 <etharp_query+0xfe>
 800d4d4:	4b5a      	ldr	r3, [pc, #360]	; (800d640 <etharp_query+0x25c>)
 800d4d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d4da:	495d      	ldr	r1, [pc, #372]	; (800d650 <etharp_query+0x26c>)
 800d4dc:	485a      	ldr	r0, [pc, #360]	; (800d648 <etharp_query+0x264>)
 800d4de:	f001 fded 	bl	800f0bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d102      	bne.n	800d4ee <etharp_query+0x10a>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10c      	bne.n	800d508 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 f963 	bl	800d7bc <etharp_request>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <etharp_query+0x124>
      return result;
 800d502:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d506:	e096      	b.n	800d636 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <etharp_query+0x138>
 800d50e:	4b4c      	ldr	r3, [pc, #304]	; (800d640 <etharp_query+0x25c>)
 800d510:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d514:	494f      	ldr	r1, [pc, #316]	; (800d654 <etharp_query+0x270>)
 800d516:	484c      	ldr	r0, [pc, #304]	; (800d648 <etharp_query+0x264>)
 800d518:	f001 fdd0 	bl	800f0bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d51c:	7c7a      	ldrb	r2, [r7, #17]
 800d51e:	494b      	ldr	r1, [pc, #300]	; (800d64c <etharp_query+0x268>)
 800d520:	4613      	mov	r3, r2
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	4413      	add	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	440b      	add	r3, r1
 800d52a:	3314      	adds	r3, #20
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d917      	bls.n	800d562 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d532:	4a49      	ldr	r2, [pc, #292]	; (800d658 <etharp_query+0x274>)
 800d534:	7c7b      	ldrb	r3, [r7, #17]
 800d536:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d538:	7c7a      	ldrb	r2, [r7, #17]
 800d53a:	4613      	mov	r3, r2
 800d53c:	005b      	lsls	r3, r3, #1
 800d53e:	4413      	add	r3, r2
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	3308      	adds	r3, #8
 800d544:	4a41      	ldr	r2, [pc, #260]	; (800d64c <etharp_query+0x268>)
 800d546:	4413      	add	r3, r2
 800d548:	3304      	adds	r3, #4
 800d54a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d54e:	9200      	str	r2, [sp, #0]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	6879      	ldr	r1, [r7, #4]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f001 fd05 	bl	800ef64 <ethernet_output>
 800d55a:	4603      	mov	r3, r0
 800d55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d560:	e067      	b.n	800d632 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d562:	7c7a      	ldrb	r2, [r7, #17]
 800d564:	4939      	ldr	r1, [pc, #228]	; (800d64c <etharp_query+0x268>)
 800d566:	4613      	mov	r3, r2
 800d568:	005b      	lsls	r3, r3, #1
 800d56a:	4413      	add	r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	440b      	add	r3, r1
 800d570:	3314      	adds	r3, #20
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d15c      	bne.n	800d632 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d580:	e01c      	b.n	800d5bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	895a      	ldrh	r2, [r3, #10]
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	891b      	ldrh	r3, [r3, #8]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d10a      	bne.n	800d5a4 <etharp_query+0x1c0>
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d006      	beq.n	800d5a4 <etharp_query+0x1c0>
 800d596:	4b2a      	ldr	r3, [pc, #168]	; (800d640 <etharp_query+0x25c>)
 800d598:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d59c:	492f      	ldr	r1, [pc, #188]	; (800d65c <etharp_query+0x278>)
 800d59e:	482a      	ldr	r0, [pc, #168]	; (800d648 <etharp_query+0x264>)
 800d5a0:	f001 fd8c 	bl	800f0bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	7b1b      	ldrb	r3, [r3, #12]
 800d5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	61bb      	str	r3, [r7, #24]
        break;
 800d5b4:	e005      	b.n	800d5c2 <etharp_query+0x1de>
      }
      p = p->next;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1df      	bne.n	800d582 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d007      	beq.n	800d5d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d5ce:	200e      	movs	r0, #14
 800d5d0:	f7f9 f96e 	bl	80068b0 <pbuf_clone>
 800d5d4:	61f8      	str	r0, [r7, #28]
 800d5d6:	e004      	b.n	800d5e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d5dc:	69f8      	ldr	r0, [r7, #28]
 800d5de:	f7f8 ff09 	bl	80063f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d021      	beq.n	800d62c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d5e8:	7c7a      	ldrb	r2, [r7, #17]
 800d5ea:	4918      	ldr	r1, [pc, #96]	; (800d64c <etharp_query+0x268>)
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	005b      	lsls	r3, r3, #1
 800d5f0:	4413      	add	r3, r2
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	440b      	add	r3, r1
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00a      	beq.n	800d612 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d5fc:	7c7a      	ldrb	r2, [r7, #17]
 800d5fe:	4913      	ldr	r1, [pc, #76]	; (800d64c <etharp_query+0x268>)
 800d600:	4613      	mov	r3, r2
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	4413      	add	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	440b      	add	r3, r1
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7f8 fe51 	bl	80062b4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d612:	7c7a      	ldrb	r2, [r7, #17]
 800d614:	490d      	ldr	r1, [pc, #52]	; (800d64c <etharp_query+0x268>)
 800d616:	4613      	mov	r3, r2
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	4413      	add	r3, r2
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	440b      	add	r3, r1
 800d620:	69fa      	ldr	r2, [r7, #28]
 800d622:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d62a:	e002      	b.n	800d632 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d62c:	23ff      	movs	r3, #255	; 0xff
 800d62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d632:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d636:	4618      	mov	r0, r3
 800d638:	3728      	adds	r7, #40	; 0x28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	08012814 	.word	0x08012814
 800d644:	080129c0 	.word	0x080129c0
 800d648:	0801288c 	.word	0x0801288c
 800d64c:	2000a9b4 	.word	0x2000a9b4
 800d650:	080129d0 	.word	0x080129d0
 800d654:	080129b4 	.word	0x080129b4
 800d658:	2000aaa4 	.word	0x2000aaa4
 800d65c:	080129f8 	.word	0x080129f8

0800d660 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	; 0x28
 800d664:	af02      	add	r7, sp, #8
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d106      	bne.n	800d686 <etharp_raw+0x26>
 800d678:	4b3a      	ldr	r3, [pc, #232]	; (800d764 <etharp_raw+0x104>)
 800d67a:	f240 4257 	movw	r2, #1111	; 0x457
 800d67e:	493a      	ldr	r1, [pc, #232]	; (800d768 <etharp_raw+0x108>)
 800d680:	483a      	ldr	r0, [pc, #232]	; (800d76c <etharp_raw+0x10c>)
 800d682:	f001 fd1b 	bl	800f0bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d686:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d68a:	211c      	movs	r1, #28
 800d68c:	200e      	movs	r0, #14
 800d68e:	f7f8 fb2d 	bl	8005cec <pbuf_alloc>
 800d692:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d69a:	f04f 33ff 	mov.w	r3, #4294967295
 800d69e:	e05d      	b.n	800d75c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	895b      	ldrh	r3, [r3, #10]
 800d6a4:	2b1b      	cmp	r3, #27
 800d6a6:	d806      	bhi.n	800d6b6 <etharp_raw+0x56>
 800d6a8:	4b2e      	ldr	r3, [pc, #184]	; (800d764 <etharp_raw+0x104>)
 800d6aa:	f240 4262 	movw	r2, #1122	; 0x462
 800d6ae:	4930      	ldr	r1, [pc, #192]	; (800d770 <etharp_raw+0x110>)
 800d6b0:	482e      	ldr	r0, [pc, #184]	; (800d76c <etharp_raw+0x10c>)
 800d6b2:	f001 fd03 	bl	800f0bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d6bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7f7 fa9a 	bl	8004bf8 <lwip_htons>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6d2:	2b06      	cmp	r3, #6
 800d6d4:	d006      	beq.n	800d6e4 <etharp_raw+0x84>
 800d6d6:	4b23      	ldr	r3, [pc, #140]	; (800d764 <etharp_raw+0x104>)
 800d6d8:	f240 4269 	movw	r2, #1129	; 0x469
 800d6dc:	4925      	ldr	r1, [pc, #148]	; (800d774 <etharp_raw+0x114>)
 800d6de:	4823      	ldr	r0, [pc, #140]	; (800d76c <etharp_raw+0x10c>)
 800d6e0:	f001 fcec 	bl	800f0bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	2206      	movs	r2, #6
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f001 fcb5 	bl	800f05c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	3312      	adds	r3, #18
 800d6f6:	2206      	movs	r2, #6
 800d6f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f001 fcae 	bl	800f05c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	330e      	adds	r3, #14
 800d704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d706:	6812      	ldr	r2, [r2, #0]
 800d708:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	3318      	adds	r3, #24
 800d70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d710:	6812      	ldr	r2, [r2, #0]
 800d712:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2200      	movs	r2, #0
 800d718:	701a      	strb	r2, [r3, #0]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f042 0201 	orr.w	r2, r2, #1
 800d720:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2200      	movs	r2, #0
 800d726:	f042 0208 	orr.w	r2, r2, #8
 800d72a:	709a      	strb	r2, [r3, #2]
 800d72c:	2200      	movs	r2, #0
 800d72e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2206      	movs	r2, #6
 800d734:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2204      	movs	r2, #4
 800d73a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d73c:	f640 0306 	movw	r3, #2054	; 0x806
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	69b9      	ldr	r1, [r7, #24]
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f001 fc0b 	bl	800ef64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d74e:	69b8      	ldr	r0, [r7, #24]
 800d750:	f7f8 fdb0 	bl	80062b4 <pbuf_free>
  p = NULL;
 800d754:	2300      	movs	r3, #0
 800d756:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d758:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	08012814 	.word	0x08012814
 800d768:	08012964 	.word	0x08012964
 800d76c:	0801288c 	.word	0x0801288c
 800d770:	08012a14 	.word	0x08012a14
 800d774:	08012a48 	.word	0x08012a48

0800d778 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af04      	add	r7, sp, #16
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d794:	2201      	movs	r2, #1
 800d796:	9203      	str	r2, [sp, #12]
 800d798:	68ba      	ldr	r2, [r7, #8]
 800d79a:	9202      	str	r2, [sp, #8]
 800d79c:	4a06      	ldr	r2, [pc, #24]	; (800d7b8 <etharp_request_dst+0x40>)
 800d79e:	9201      	str	r2, [sp, #4]
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7ff ff5a 	bl	800d660 <etharp_raw>
 800d7ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	08012fd8 	.word	0x08012fd8

0800d7bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d7c6:	4a05      	ldr	r2, [pc, #20]	; (800d7dc <etharp_request+0x20>)
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7ff ffd4 	bl	800d778 <etharp_request_dst>
 800d7d0:	4603      	mov	r3, r0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	08012fd0 	.word	0x08012fd0

0800d7e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08e      	sub	sp, #56	; 0x38
 800d7e4:	af04      	add	r7, sp, #16
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d7ea:	4b79      	ldr	r3, [pc, #484]	; (800d9d0 <icmp_input+0x1f0>)
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	f003 030f 	and.w	r3, r3, #15
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d802:	2b13      	cmp	r3, #19
 800d804:	f240 80cd 	bls.w	800d9a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	895b      	ldrh	r3, [r3, #10]
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	f240 80ca 	bls.w	800d9a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d81c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 80b7 	beq.w	800d994 <icmp_input+0x1b4>
 800d826:	2b08      	cmp	r3, #8
 800d828:	f040 80b7 	bne.w	800d99a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d82c:	4b69      	ldr	r3, [pc, #420]	; (800d9d4 <icmp_input+0x1f4>)
 800d82e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d830:	4b67      	ldr	r3, [pc, #412]	; (800d9d0 <icmp_input+0x1f0>)
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d838:	2be0      	cmp	r3, #224	; 0xe0
 800d83a:	f000 80bb 	beq.w	800d9b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d83e:	4b64      	ldr	r3, [pc, #400]	; (800d9d0 <icmp_input+0x1f0>)
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	4a63      	ldr	r2, [pc, #396]	; (800d9d0 <icmp_input+0x1f0>)
 800d844:	6812      	ldr	r2, [r2, #0]
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fbed 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	f040 80b1 	bne.w	800d9b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	891b      	ldrh	r3, [r3, #8]
 800d85a:	2b07      	cmp	r3, #7
 800d85c:	f240 80a5 	bls.w	800d9aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d862:	330e      	adds	r3, #14
 800d864:	4619      	mov	r1, r3
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7f8 fc8e 	bl	8006188 <pbuf_add_header>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04b      	beq.n	800d90a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	891a      	ldrh	r2, [r3, #8]
 800d876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d878:	4413      	add	r3, r2
 800d87a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	891b      	ldrh	r3, [r3, #8]
 800d880:	8b7a      	ldrh	r2, [r7, #26]
 800d882:	429a      	cmp	r2, r3
 800d884:	f0c0 809a 	bcc.w	800d9bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d888:	8b7b      	ldrh	r3, [r7, #26]
 800d88a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d88e:	4619      	mov	r1, r3
 800d890:	200e      	movs	r0, #14
 800d892:	f7f8 fa2b 	bl	8005cec <pbuf_alloc>
 800d896:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 8090 	beq.w	800d9c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	895b      	ldrh	r3, [r3, #10]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8a8:	3308      	adds	r3, #8
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d203      	bcs.n	800d8b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d8ae:	6978      	ldr	r0, [r7, #20]
 800d8b0:	f7f8 fd00 	bl	80062b4 <pbuf_free>
          goto icmperr;
 800d8b4:	e085      	b.n	800d9c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f001 fbcc 	bl	800f05c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d8c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6978      	ldr	r0, [r7, #20]
 800d8ca:	f7f8 fc6d 	bl	80061a8 <pbuf_remove_header>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d009      	beq.n	800d8e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d8d4:	4b40      	ldr	r3, [pc, #256]	; (800d9d8 <icmp_input+0x1f8>)
 800d8d6:	22b6      	movs	r2, #182	; 0xb6
 800d8d8:	4940      	ldr	r1, [pc, #256]	; (800d9dc <icmp_input+0x1fc>)
 800d8da:	4841      	ldr	r0, [pc, #260]	; (800d9e0 <icmp_input+0x200>)
 800d8dc:	f001 fbee 	bl	800f0bc <iprintf>
          pbuf_free(r);
 800d8e0:	6978      	ldr	r0, [r7, #20]
 800d8e2:	f7f8 fce7 	bl	80062b4 <pbuf_free>
          goto icmperr;
 800d8e6:	e06c      	b.n	800d9c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	6978      	ldr	r0, [r7, #20]
 800d8ec:	f7f8 fe0a 	bl	8006504 <pbuf_copy>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d8f6:	6978      	ldr	r0, [r7, #20]
 800d8f8:	f7f8 fcdc 	bl	80062b4 <pbuf_free>
          goto icmperr;
 800d8fc:	e061      	b.n	800d9c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7f8 fcd8 	bl	80062b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	607b      	str	r3, [r7, #4]
 800d908:	e00f      	b.n	800d92a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d90a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90c:	330e      	adds	r3, #14
 800d90e:	4619      	mov	r1, r3
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7f8 fc49 	bl	80061a8 <pbuf_remove_header>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d006      	beq.n	800d92a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d91c:	4b2e      	ldr	r3, [pc, #184]	; (800d9d8 <icmp_input+0x1f8>)
 800d91e:	22c7      	movs	r2, #199	; 0xc7
 800d920:	4930      	ldr	r1, [pc, #192]	; (800d9e4 <icmp_input+0x204>)
 800d922:	482f      	ldr	r0, [pc, #188]	; (800d9e0 <icmp_input+0x200>)
 800d924:	f001 fbca 	bl	800f0bc <iprintf>
          goto icmperr;
 800d928:	e04b      	b.n	800d9c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7f8 fc27 	bl	8006188 <pbuf_add_header>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d12b      	bne.n	800d998 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d94e:	4b20      	ldr	r3, [pc, #128]	; (800d9d0 <icmp_input+0x1f0>)
 800d950:	691a      	ldr	r2, [r3, #16]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	2200      	movs	r2, #0
 800d960:	709a      	strb	r2, [r3, #2]
 800d962:	2200      	movs	r2, #0
 800d964:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	22ff      	movs	r2, #255	; 0xff
 800d96a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	729a      	strb	r2, [r3, #10]
 800d972:	2200      	movs	r2, #0
 800d974:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	2301      	movs	r3, #1
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	2300      	movs	r3, #0
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	23ff      	movs	r3, #255	; 0xff
 800d984:	2200      	movs	r2, #0
 800d986:	69f9      	ldr	r1, [r7, #28]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 fa75 	bl	800de78 <ip4_output_if>
 800d98e:	4603      	mov	r3, r0
 800d990:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d992:	e001      	b.n	800d998 <icmp_input+0x1b8>
      break;
 800d994:	bf00      	nop
 800d996:	e000      	b.n	800d99a <icmp_input+0x1ba>
      break;
 800d998:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7f8 fc8a 	bl	80062b4 <pbuf_free>
  return;
 800d9a0:	e013      	b.n	800d9ca <icmp_input+0x1ea>
    goto lenerr;
 800d9a2:	bf00      	nop
 800d9a4:	e002      	b.n	800d9ac <icmp_input+0x1cc>
    goto lenerr;
 800d9a6:	bf00      	nop
 800d9a8:	e000      	b.n	800d9ac <icmp_input+0x1cc>
        goto lenerr;
 800d9aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f7f8 fc81 	bl	80062b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d9b2:	e00a      	b.n	800d9ca <icmp_input+0x1ea>
        goto icmperr;
 800d9b4:	bf00      	nop
 800d9b6:	e004      	b.n	800d9c2 <icmp_input+0x1e2>
        goto icmperr;
 800d9b8:	bf00      	nop
 800d9ba:	e002      	b.n	800d9c2 <icmp_input+0x1e2>
          goto icmperr;
 800d9bc:	bf00      	nop
 800d9be:	e000      	b.n	800d9c2 <icmp_input+0x1e2>
          goto icmperr;
 800d9c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7f8 fc76 	bl	80062b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d9c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d9ca:	3728      	adds	r7, #40	; 0x28
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20005224 	.word	0x20005224
 800d9d4:	20005238 	.word	0x20005238
 800d9d8:	08012a8c 	.word	0x08012a8c
 800d9dc:	08012ac4 	.word	0x08012ac4
 800d9e0:	08012afc 	.word	0x08012afc
 800d9e4:	08012b24 	.word	0x08012b24

0800d9e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	2103      	movs	r1, #3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f814 	bl	800da28 <icmp_send_response>
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	460b      	mov	r3, r1
 800da12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800da14:	78fb      	ldrb	r3, [r7, #3]
 800da16:	461a      	mov	r2, r3
 800da18:	210b      	movs	r1, #11
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f804 	bl	800da28 <icmp_send_response>
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08c      	sub	sp, #48	; 0x30
 800da2c:	af04      	add	r7, sp, #16
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	460b      	mov	r3, r1
 800da32:	70fb      	strb	r3, [r7, #3]
 800da34:	4613      	mov	r3, r2
 800da36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800da38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da3c:	2124      	movs	r1, #36	; 0x24
 800da3e:	2022      	movs	r0, #34	; 0x22
 800da40:	f7f8 f954 	bl	8005cec <pbuf_alloc>
 800da44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d04c      	beq.n	800dae6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	2b23      	cmp	r3, #35	; 0x23
 800da52:	d806      	bhi.n	800da62 <icmp_send_response+0x3a>
 800da54:	4b26      	ldr	r3, [pc, #152]	; (800daf0 <icmp_send_response+0xc8>)
 800da56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800da5a:	4926      	ldr	r1, [pc, #152]	; (800daf4 <icmp_send_response+0xcc>)
 800da5c:	4826      	ldr	r0, [pc, #152]	; (800daf8 <icmp_send_response+0xd0>)
 800da5e:	f001 fb2d 	bl	800f0bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	78fa      	ldrb	r2, [r7, #3]
 800da72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	78ba      	ldrb	r2, [r7, #2]
 800da78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	2200      	movs	r2, #0
 800da7e:	711a      	strb	r2, [r3, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2200      	movs	r2, #0
 800da88:	719a      	strb	r2, [r3, #6]
 800da8a:	2200      	movs	r2, #0
 800da8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f103 0008 	add.w	r0, r3, #8
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	221c      	movs	r2, #28
 800da9c:	4619      	mov	r1, r3
 800da9e:	f001 fadd 	bl	800f05c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800daa8:	f107 030c 	add.w	r3, r7, #12
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f825 	bl	800dafc <ip4_route>
 800dab2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d011      	beq.n	800dade <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2200      	movs	r2, #0
 800dabe:	709a      	strb	r2, [r3, #2]
 800dac0:	2200      	movs	r2, #0
 800dac2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dac4:	f107 020c 	add.w	r2, r7, #12
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	9302      	str	r3, [sp, #8]
 800dacc:	2301      	movs	r3, #1
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	2300      	movs	r3, #0
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	23ff      	movs	r3, #255	; 0xff
 800dad6:	2100      	movs	r1, #0
 800dad8:	69f8      	ldr	r0, [r7, #28]
 800dada:	f000 f9cd 	bl	800de78 <ip4_output_if>
  }
  pbuf_free(q);
 800dade:	69f8      	ldr	r0, [r7, #28]
 800dae0:	f7f8 fbe8 	bl	80062b4 <pbuf_free>
 800dae4:	e000      	b.n	800dae8 <icmp_send_response+0xc0>
    return;
 800dae6:	bf00      	nop
}
 800dae8:	3720      	adds	r7, #32
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	08012a8c 	.word	0x08012a8c
 800daf4:	08012b58 	.word	0x08012b58
 800daf8:	08012afc 	.word	0x08012afc

0800dafc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800db04:	4b33      	ldr	r3, [pc, #204]	; (800dbd4 <ip4_route+0xd8>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	60fb      	str	r3, [r7, #12]
 800db0a:	e036      	b.n	800db7a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	b2db      	uxtb	r3, r3
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d02b      	beq.n	800db74 <ip4_route+0x78>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db22:	089b      	lsrs	r3, r3, #2
 800db24:	f003 0301 	and.w	r3, r3, #1
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d022      	beq.n	800db74 <ip4_route+0x78>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3304      	adds	r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d01d      	beq.n	800db74 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3304      	adds	r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	405a      	eors	r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	3308      	adds	r3, #8
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4013      	ands	r3, r2
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d101      	bne.n	800db54 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	e038      	b.n	800dbc6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db5a:	f003 0302 	and.w	r3, r3, #2
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d108      	bne.n	800db74 <ip4_route+0x78>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	330c      	adds	r3, #12
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d101      	bne.n	800db74 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	e028      	b.n	800dbc6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1c5      	bne.n	800db0c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db80:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <ip4_route+0xdc>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01a      	beq.n	800dbbe <ip4_route+0xc2>
 800db88:	4b13      	ldr	r3, [pc, #76]	; (800dbd8 <ip4_route+0xdc>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	2b00      	cmp	r3, #0
 800db96:	d012      	beq.n	800dbbe <ip4_route+0xc2>
 800db98:	4b0f      	ldr	r3, [pc, #60]	; (800dbd8 <ip4_route+0xdc>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dba0:	f003 0304 	and.w	r3, r3, #4
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00a      	beq.n	800dbbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dba8:	4b0b      	ldr	r3, [pc, #44]	; (800dbd8 <ip4_route+0xdc>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3304      	adds	r3, #4
 800dbae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	2b7f      	cmp	r3, #127	; 0x7f
 800dbbc:	d101      	bne.n	800dbc2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e001      	b.n	800dbc6 <ip4_route+0xca>
  }

  return netif_default;
 800dbc2:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <ip4_route+0xdc>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	2000a948 	.word	0x2000a948
 800dbd8:	2000a94c 	.word	0x2000a94c

0800dbdc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d016      	beq.n	800dc22 <ip4_input_accept+0x46>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d011      	beq.n	800dc22 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbfe:	4b0b      	ldr	r3, [pc, #44]	; (800dc2c <ip4_input_accept+0x50>)
 800dc00:	695a      	ldr	r2, [r3, #20]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3304      	adds	r3, #4
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d008      	beq.n	800dc1e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dc0c:	4b07      	ldr	r3, [pc, #28]	; (800dc2c <ip4_input_accept+0x50>)
 800dc0e:	695b      	ldr	r3, [r3, #20]
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 fa08 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800dc18:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e000      	b.n	800dc24 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	20005224 	.word	0x20005224

0800dc30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	091b      	lsrs	r3, r3, #4
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	2b04      	cmp	r3, #4
 800dc4a:	d004      	beq.n	800dc56 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7f8 fb31 	bl	80062b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dc52:	2300      	movs	r3, #0
 800dc54:	e107      	b.n	800de66 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	f003 030f 	and.w	r3, r3, #15
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	885b      	ldrh	r3, [r3, #2]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7f6 ffc3 	bl	8004bf8 <lwip_htons>
 800dc72:	4603      	mov	r3, r0
 800dc74:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	891b      	ldrh	r3, [r3, #8]
 800dc7a:	89ba      	ldrh	r2, [r7, #12]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d204      	bcs.n	800dc8a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dc80:	89bb      	ldrh	r3, [r7, #12]
 800dc82:	4619      	mov	r1, r3
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7f8 f98f 	bl	8005fa8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	895b      	ldrh	r3, [r3, #10]
 800dc8e:	89fa      	ldrh	r2, [r7, #14]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d807      	bhi.n	800dca4 <ip4_input+0x74>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	891b      	ldrh	r3, [r3, #8]
 800dc98:	89ba      	ldrh	r2, [r7, #12]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d802      	bhi.n	800dca4 <ip4_input+0x74>
 800dc9e:	89fb      	ldrh	r3, [r7, #14]
 800dca0:	2b13      	cmp	r3, #19
 800dca2:	d804      	bhi.n	800dcae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f8 fb05 	bl	80062b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e0db      	b.n	800de66 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	4a6f      	ldr	r2, [pc, #444]	; (800de70 <ip4_input+0x240>)
 800dcb4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	4a6d      	ldr	r2, [pc, #436]	; (800de70 <ip4_input+0x240>)
 800dcbc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dcbe:	4b6c      	ldr	r3, [pc, #432]	; (800de70 <ip4_input+0x240>)
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcc6:	2be0      	cmp	r3, #224	; 0xe0
 800dcc8:	d112      	bne.n	800dcf0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcd0:	f003 0301 	and.w	r3, r3, #1
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d007      	beq.n	800dcea <ip4_input+0xba>
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	3304      	adds	r3, #4
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <ip4_input+0xba>
      netif = inp;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	613b      	str	r3, [r7, #16]
 800dce8:	e02a      	b.n	800dd40 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	613b      	str	r3, [r7, #16]
 800dcee:	e027      	b.n	800dd40 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dcf0:	6838      	ldr	r0, [r7, #0]
 800dcf2:	f7ff ff73 	bl	800dbdc <ip4_input_accept>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <ip4_input+0xd2>
      netif = inp;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	613b      	str	r3, [r7, #16]
 800dd00:	e01e      	b.n	800dd40 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dd06:	4b5a      	ldr	r3, [pc, #360]	; (800de70 <ip4_input+0x240>)
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b7f      	cmp	r3, #127	; 0x7f
 800dd0e:	d017      	beq.n	800dd40 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dd10:	4b58      	ldr	r3, [pc, #352]	; (800de74 <ip4_input+0x244>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	613b      	str	r3, [r7, #16]
 800dd16:	e00e      	b.n	800dd36 <ip4_input+0x106>
          if (netif == inp) {
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d006      	beq.n	800dd2e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dd20:	6938      	ldr	r0, [r7, #16]
 800dd22:	f7ff ff5b 	bl	800dbdc <ip4_input_accept>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d108      	bne.n	800dd3e <ip4_input+0x10e>
 800dd2c:	e000      	b.n	800dd30 <ip4_input+0x100>
            continue;
 800dd2e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	613b      	str	r3, [r7, #16]
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1ed      	bne.n	800dd18 <ip4_input+0xe8>
 800dd3c:	e000      	b.n	800dd40 <ip4_input+0x110>
            break;
 800dd3e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd40:	4b4b      	ldr	r3, [pc, #300]	; (800de70 <ip4_input+0x240>)
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 f96e 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d105      	bne.n	800dd5e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dd52:	4b47      	ldr	r3, [pc, #284]	; (800de70 <ip4_input+0x240>)
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd5a:	2be0      	cmp	r3, #224	; 0xe0
 800dd5c:	d104      	bne.n	800dd68 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7f8 faa8 	bl	80062b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	e07e      	b.n	800de66 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d104      	bne.n	800dd78 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7f8 faa0 	bl	80062b4 <pbuf_free>
    return ERR_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	e076      	b.n	800de66 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	88db      	ldrh	r3, [r3, #6]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	461a      	mov	r2, r3
 800dd80:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dd84:	4013      	ands	r3, r2
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00b      	beq.n	800dda2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fd22 	bl	800e7d4 <ip4_reass>
 800dd90:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d101      	bne.n	800dd9c <ip4_input+0x16c>
      return ERR_OK;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	e064      	b.n	800de66 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dda2:	4a33      	ldr	r2, [pc, #204]	; (800de70 <ip4_input+0x240>)
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dda8:	4a31      	ldr	r2, [pc, #196]	; (800de70 <ip4_input+0x240>)
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ddae:	4a30      	ldr	r2, [pc, #192]	; (800de70 <ip4_input+0x240>)
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	4b2a      	ldr	r3, [pc, #168]	; (800de70 <ip4_input+0x240>)
 800ddc6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ddc8:	89fb      	ldrh	r3, [r7, #14]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7f8 f9eb 	bl	80061a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	7a5b      	ldrb	r3, [r3, #9]
 800ddd6:	2b11      	cmp	r3, #17
 800ddd8:	d006      	beq.n	800dde8 <ip4_input+0x1b8>
 800ddda:	2b11      	cmp	r3, #17
 800dddc:	dc13      	bgt.n	800de06 <ip4_input+0x1d6>
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d00c      	beq.n	800ddfc <ip4_input+0x1cc>
 800dde2:	2b06      	cmp	r3, #6
 800dde4:	d005      	beq.n	800ddf2 <ip4_input+0x1c2>
 800dde6:	e00e      	b.n	800de06 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7fe f8e6 	bl	800bfbc <udp_input>
        break;
 800ddf0:	e026      	b.n	800de40 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7fa f927 	bl	8008048 <tcp_input>
        break;
 800ddfa:	e021      	b.n	800de40 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7ff fcee 	bl	800d7e0 <icmp_input>
        break;
 800de04:	e01c      	b.n	800de40 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de06:	4b1a      	ldr	r3, [pc, #104]	; (800de70 <ip4_input+0x240>)
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	6939      	ldr	r1, [r7, #16]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 f90b 	bl	800e028 <ip4_addr_isbroadcast_u32>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10f      	bne.n	800de38 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800de18:	4b15      	ldr	r3, [pc, #84]	; (800de70 <ip4_input+0x240>)
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de20:	2be0      	cmp	r3, #224	; 0xe0
 800de22:	d009      	beq.n	800de38 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800de24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7f8 fa2f 	bl	800628e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800de30:	2102      	movs	r1, #2
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff fdd8 	bl	800d9e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7f8 fa3b 	bl	80062b4 <pbuf_free>
        break;
 800de3e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800de40:	4b0b      	ldr	r3, [pc, #44]	; (800de70 <ip4_input+0x240>)
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800de46:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <ip4_input+0x240>)
 800de48:	2200      	movs	r2, #0
 800de4a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800de4c:	4b08      	ldr	r3, [pc, #32]	; (800de70 <ip4_input+0x240>)
 800de4e:	2200      	movs	r2, #0
 800de50:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <ip4_input+0x240>)
 800de54:	2200      	movs	r2, #0
 800de56:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800de58:	4b05      	ldr	r3, [pc, #20]	; (800de70 <ip4_input+0x240>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800de5e:	4b04      	ldr	r3, [pc, #16]	; (800de70 <ip4_input+0x240>)
 800de60:	2200      	movs	r2, #0
 800de62:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20005224 	.word	0x20005224
 800de74:	2000a948 	.word	0x2000a948

0800de78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08a      	sub	sp, #40	; 0x28
 800de7c:	af04      	add	r7, sp, #16
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d009      	beq.n	800dea4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <ip4_output_if+0x26>
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d102      	bne.n	800dea4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	3304      	adds	r3, #4
 800dea2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dea4:	78fa      	ldrb	r2, [r7, #3]
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	9302      	str	r3, [sp, #8]
 800deaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	4613      	mov	r3, r2
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	6979      	ldr	r1, [r7, #20]
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f000 f805 	bl	800decc <ip4_output_if_src>
 800dec2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3718      	adds	r7, #24
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	7b9b      	ldrb	r3, [r3, #14]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d006      	beq.n	800def0 <ip4_output_if_src+0x24>
 800dee2:	4b4b      	ldr	r3, [pc, #300]	; (800e010 <ip4_output_if_src+0x144>)
 800dee4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dee8:	494a      	ldr	r1, [pc, #296]	; (800e014 <ip4_output_if_src+0x148>)
 800deea:	484b      	ldr	r0, [pc, #300]	; (800e018 <ip4_output_if_src+0x14c>)
 800deec:	f001 f8e6 	bl	800f0bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d060      	beq.n	800dfb8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800def6:	2314      	movs	r3, #20
 800def8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800defa:	2114      	movs	r1, #20
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f7f8 f943 	bl	8006188 <pbuf_add_header>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800df08:	f06f 0301 	mvn.w	r3, #1
 800df0c:	e07c      	b.n	800e008 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	895b      	ldrh	r3, [r3, #10]
 800df18:	2b13      	cmp	r3, #19
 800df1a:	d806      	bhi.n	800df2a <ip4_output_if_src+0x5e>
 800df1c:	4b3c      	ldr	r3, [pc, #240]	; (800e010 <ip4_output_if_src+0x144>)
 800df1e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800df22:	493e      	ldr	r1, [pc, #248]	; (800e01c <ip4_output_if_src+0x150>)
 800df24:	483c      	ldr	r0, [pc, #240]	; (800e018 <ip4_output_if_src+0x14c>)
 800df26:	f001 f8c9 	bl	800f0bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	78fa      	ldrb	r2, [r7, #3]
 800df2e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800df36:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800df40:	8b7b      	ldrh	r3, [r7, #26]
 800df42:	089b      	lsrs	r3, r3, #2
 800df44:	b29b      	uxth	r3, r3
 800df46:	b2db      	uxtb	r3, r3
 800df48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800df58:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	891b      	ldrh	r3, [r3, #8]
 800df5e:	4618      	mov	r0, r3
 800df60:	f7f6 fe4a 	bl	8004bf8 <lwip_htons>
 800df64:	4603      	mov	r3, r0
 800df66:	461a      	mov	r2, r3
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	2200      	movs	r2, #0
 800df70:	719a      	strb	r2, [r3, #6]
 800df72:	2200      	movs	r2, #0
 800df74:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800df76:	4b2a      	ldr	r3, [pc, #168]	; (800e020 <ip4_output_if_src+0x154>)
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7f6 fe3c 	bl	8004bf8 <lwip_htons>
 800df80:	4603      	mov	r3, r0
 800df82:	461a      	mov	r2, r3
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800df88:	4b25      	ldr	r3, [pc, #148]	; (800e020 <ip4_output_if_src+0x154>)
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	b29a      	uxth	r2, r3
 800df90:	4b23      	ldr	r3, [pc, #140]	; (800e020 <ip4_output_if_src+0x154>)
 800df92:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d104      	bne.n	800dfa4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800df9a:	4b22      	ldr	r3, [pc, #136]	; (800e024 <ip4_output_if_src+0x158>)
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	60da      	str	r2, [r3, #12]
 800dfa2:	e003      	b.n	800dfac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	729a      	strb	r2, [r3, #10]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	72da      	strb	r2, [r3, #11]
 800dfb6:	e00f      	b.n	800dfd8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	895b      	ldrh	r3, [r3, #10]
 800dfbc:	2b13      	cmp	r3, #19
 800dfbe:	d802      	bhi.n	800dfc6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dfc0:	f06f 0301 	mvn.w	r3, #1
 800dfc4:	e020      	b.n	800e008 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dfd2:	f107 0314 	add.w	r3, r7, #20
 800dfd6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00c      	beq.n	800dffa <ip4_output_if_src+0x12e>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	891a      	ldrh	r2, [r3, #8]
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d906      	bls.n	800dffa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 fde3 	bl	800ebbc <ip4_frag>
 800dff6:	4603      	mov	r3, r0
 800dff8:	e006      	b.n	800e008 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	695b      	ldr	r3, [r3, #20]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	68f9      	ldr	r1, [r7, #12]
 800e002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e004:	4798      	blx	r3
 800e006:	4603      	mov	r3, r0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3720      	adds	r7, #32
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	08012b84 	.word	0x08012b84
 800e014:	08012bb8 	.word	0x08012bb8
 800e018:	08012bc4 	.word	0x08012bc4
 800e01c:	08012bec 	.word	0x08012bec
 800e020:	2000aaa6 	.word	0x2000aaa6
 800e024:	08012fcc 	.word	0x08012fcc

0800e028 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e03c:	d002      	beq.n	800e044 <ip4_addr_isbroadcast_u32+0x1c>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d101      	bne.n	800e048 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e044:	2301      	movs	r3, #1
 800e046:	e02a      	b.n	800e09e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e04e:	f003 0302 	and.w	r3, r3, #2
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e056:	2300      	movs	r3, #0
 800e058:	e021      	b.n	800e09e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	3304      	adds	r3, #4
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	429a      	cmp	r2, r3
 800e064:	d101      	bne.n	800e06a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e066:	2300      	movs	r3, #0
 800e068:	e019      	b.n	800e09e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	3304      	adds	r3, #4
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	405a      	eors	r2, r3
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	3308      	adds	r3, #8
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4013      	ands	r3, r2
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10d      	bne.n	800e09c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	3308      	adds	r3, #8
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	43da      	mvns	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	3308      	adds	r3, #8
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e094:	429a      	cmp	r2, r3
 800e096:	d101      	bne.n	800e09c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e098:	2301      	movs	r3, #1
 800e09a:	e000      	b.n	800e09e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e09c:	2300      	movs	r3, #0
  }
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
	...

0800e0ac <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e0b4:	2210      	movs	r2, #16
 800e0b6:	4904      	ldr	r1, [pc, #16]	; (800e0c8 <ip4addr_ntoa+0x1c>)
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 f807 	bl	800e0cc <ip4addr_ntoa_r>
 800e0be:	4603      	mov	r3, r0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	2000aaa8 	.word	0x2000aaa8

0800e0cc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b08d      	sub	sp, #52	; 0x34
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e0e6:	f107 0318 	add.w	r3, r7, #24
 800e0ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0f2:	e058      	b.n	800e1a6 <ip4addr_ntoa_r+0xda>
    i = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	4b32      	ldr	r3, [pc, #200]	; (800e1c8 <ip4addr_ntoa_r+0xfc>)
 800e100:	fba3 1302 	umull	r1, r3, r3, r2
 800e104:	08d9      	lsrs	r1, r3, #3
 800e106:	460b      	mov	r3, r1
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	440b      	add	r3, r1
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	4a2c      	ldr	r2, [pc, #176]	; (800e1c8 <ip4addr_ntoa_r+0xfc>)
 800e118:	fba2 2303 	umull	r2, r3, r2, r3
 800e11c:	08db      	lsrs	r3, r3, #3
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e122:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e12e:	4619      	mov	r1, r3
 800e130:	7ffb      	ldrb	r3, [r7, #31]
 800e132:	3330      	adds	r3, #48	; 0x30
 800e134:	b2da      	uxtb	r2, r3
 800e136:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800e13a:	443b      	add	r3, r7
 800e13c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1d8      	bne.n	800e0fa <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e148:	e011      	b.n	800e16e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	623a      	str	r2, [r7, #32]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	429a      	cmp	r2, r3
 800e154:	dc01      	bgt.n	800e15a <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	e030      	b.n	800e1bc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e15a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	1c59      	adds	r1, r3, #1
 800e162:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e164:	3230      	adds	r2, #48	; 0x30
 800e166:	443a      	add	r2, r7
 800e168:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e16c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e16e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e172:	1e5a      	subs	r2, r3, #1
 800e174:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d1e6      	bne.n	800e14a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	623a      	str	r2, [r7, #32]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	429a      	cmp	r2, r3
 800e186:	dc01      	bgt.n	800e18c <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e188:	2300      	movs	r3, #0
 800e18a:	e017      	b.n	800e1bc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	1c5a      	adds	r2, r3, #1
 800e190:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e192:	222e      	movs	r2, #46	; 0x2e
 800e194:	701a      	strb	r2, [r3, #0]
    ap++;
 800e196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e198:	3301      	adds	r3, #1
 800e19a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d9a2      	bls.n	800e0f4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	701a      	strb	r2, [r3, #0]
  return buf;
 800e1ba:	68bb      	ldr	r3, [r7, #8]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3734      	adds	r7, #52	; 0x34
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr
 800e1c8:	cccccccd 	.word	0xcccccccd

0800e1cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e1d6:	4b12      	ldr	r3, [pc, #72]	; (800e220 <ip_reass_tmr+0x54>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e1dc:	e018      	b.n	800e210 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	7fdb      	ldrb	r3, [r3, #31]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00b      	beq.n	800e1fe <ip_reass_tmr+0x32>
      r->timer--;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	7fdb      	ldrb	r3, [r3, #31]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	e008      	b.n	800e210 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f80a 	bl	800e224 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1e3      	bne.n	800e1de <ip_reass_tmr+0x12>
    }
  }
}
 800e216:	bf00      	nop
 800e218:	bf00      	nop
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	2000aab8 	.word	0x2000aab8

0800e224 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d105      	bne.n	800e246 <ip_reass_free_complete_datagram+0x22>
 800e23a:	4b45      	ldr	r3, [pc, #276]	; (800e350 <ip_reass_free_complete_datagram+0x12c>)
 800e23c:	22ab      	movs	r2, #171	; 0xab
 800e23e:	4945      	ldr	r1, [pc, #276]	; (800e354 <ip_reass_free_complete_datagram+0x130>)
 800e240:	4845      	ldr	r0, [pc, #276]	; (800e358 <ip_reass_free_complete_datagram+0x134>)
 800e242:	f000 ff3b 	bl	800f0bc <iprintf>
  if (prev != NULL) {
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00a      	beq.n	800e262 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	429a      	cmp	r2, r3
 800e254:	d005      	beq.n	800e262 <ip_reass_free_complete_datagram+0x3e>
 800e256:	4b3e      	ldr	r3, [pc, #248]	; (800e350 <ip_reass_free_complete_datagram+0x12c>)
 800e258:	22ad      	movs	r2, #173	; 0xad
 800e25a:	4940      	ldr	r1, [pc, #256]	; (800e35c <ip_reass_free_complete_datagram+0x138>)
 800e25c:	483e      	ldr	r0, [pc, #248]	; (800e358 <ip_reass_free_complete_datagram+0x134>)
 800e25e:	f000 ff2d 	bl	800f0bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	889b      	ldrh	r3, [r3, #4]
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	d12a      	bne.n	800e2ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	6858      	ldr	r0, [r3, #4]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3308      	adds	r3, #8
 800e28a:	2214      	movs	r2, #20
 800e28c:	4619      	mov	r1, r3
 800e28e:	f000 fee5 	bl	800f05c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e292:	2101      	movs	r1, #1
 800e294:	69b8      	ldr	r0, [r7, #24]
 800e296:	f7ff fbb7 	bl	800da08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e29a:	69b8      	ldr	r0, [r7, #24]
 800e29c:	f7f8 f892 	bl	80063c4 <pbuf_clen>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e2a4:	8bfa      	ldrh	r2, [r7, #30]
 800e2a6:	8a7b      	ldrh	r3, [r7, #18]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2ae:	db05      	blt.n	800e2bc <ip_reass_free_complete_datagram+0x98>
 800e2b0:	4b27      	ldr	r3, [pc, #156]	; (800e350 <ip_reass_free_complete_datagram+0x12c>)
 800e2b2:	22bc      	movs	r2, #188	; 0xbc
 800e2b4:	492a      	ldr	r1, [pc, #168]	; (800e360 <ip_reass_free_complete_datagram+0x13c>)
 800e2b6:	4828      	ldr	r0, [pc, #160]	; (800e358 <ip_reass_free_complete_datagram+0x134>)
 800e2b8:	f000 ff00 	bl	800f0bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e2bc:	8bfa      	ldrh	r2, [r7, #30]
 800e2be:	8a7b      	ldrh	r3, [r7, #18]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e2c4:	69b8      	ldr	r0, [r7, #24]
 800e2c6:	f7f7 fff5 	bl	80062b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e2d0:	e01f      	b.n	800e312 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f7f8 f86e 	bl	80063c4 <pbuf_clen>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e2ec:	8bfa      	ldrh	r2, [r7, #30]
 800e2ee:	8a7b      	ldrh	r3, [r7, #18]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f6:	db05      	blt.n	800e304 <ip_reass_free_complete_datagram+0xe0>
 800e2f8:	4b15      	ldr	r3, [pc, #84]	; (800e350 <ip_reass_free_complete_datagram+0x12c>)
 800e2fa:	22cc      	movs	r2, #204	; 0xcc
 800e2fc:	4918      	ldr	r1, [pc, #96]	; (800e360 <ip_reass_free_complete_datagram+0x13c>)
 800e2fe:	4816      	ldr	r0, [pc, #88]	; (800e358 <ip_reass_free_complete_datagram+0x134>)
 800e300:	f000 fedc 	bl	800f0bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e304:	8bfa      	ldrh	r2, [r7, #30]
 800e306:	8a7b      	ldrh	r3, [r7, #18]
 800e308:	4413      	add	r3, r2
 800e30a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f7f7 ffd1 	bl	80062b4 <pbuf_free>
  while (p != NULL) {
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1dc      	bne.n	800e2d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f8c2 	bl	800e4a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e320:	4b10      	ldr	r3, [pc, #64]	; (800e364 <ip_reass_free_complete_datagram+0x140>)
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	8bfa      	ldrh	r2, [r7, #30]
 800e326:	429a      	cmp	r2, r3
 800e328:	d905      	bls.n	800e336 <ip_reass_free_complete_datagram+0x112>
 800e32a:	4b09      	ldr	r3, [pc, #36]	; (800e350 <ip_reass_free_complete_datagram+0x12c>)
 800e32c:	22d2      	movs	r2, #210	; 0xd2
 800e32e:	490e      	ldr	r1, [pc, #56]	; (800e368 <ip_reass_free_complete_datagram+0x144>)
 800e330:	4809      	ldr	r0, [pc, #36]	; (800e358 <ip_reass_free_complete_datagram+0x134>)
 800e332:	f000 fec3 	bl	800f0bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <ip_reass_free_complete_datagram+0x140>)
 800e338:	881a      	ldrh	r2, [r3, #0]
 800e33a:	8bfb      	ldrh	r3, [r7, #30]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	b29a      	uxth	r2, r3
 800e340:	4b08      	ldr	r3, [pc, #32]	; (800e364 <ip_reass_free_complete_datagram+0x140>)
 800e342:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e344:	8bfb      	ldrh	r3, [r7, #30]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	08012c1c 	.word	0x08012c1c
 800e354:	08012c58 	.word	0x08012c58
 800e358:	08012c64 	.word	0x08012c64
 800e35c:	08012c8c 	.word	0x08012c8c
 800e360:	08012ca0 	.word	0x08012ca0
 800e364:	2000aabc 	.word	0x2000aabc
 800e368:	08012cc0 	.word	0x08012cc0

0800e36c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08a      	sub	sp, #40	; 0x28
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e376:	2300      	movs	r3, #0
 800e378:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e37a:	2300      	movs	r3, #0
 800e37c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e386:	2300      	movs	r3, #0
 800e388:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e38a:	4b28      	ldr	r3, [pc, #160]	; (800e42c <ip_reass_remove_oldest_datagram+0xc0>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e390:	e030      	b.n	800e3f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	695a      	ldr	r2, [r3, #20]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d10c      	bne.n	800e3b8 <ip_reass_remove_oldest_datagram+0x4c>
 800e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a0:	699a      	ldr	r2, [r3, #24]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d106      	bne.n	800e3b8 <ip_reass_remove_oldest_datagram+0x4c>
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	899a      	ldrh	r2, [r3, #12]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	889b      	ldrh	r3, [r3, #4]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d014      	beq.n	800e3e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d104      	bne.n	800e3ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	61bb      	str	r3, [r7, #24]
 800e3cc:	e009      	b.n	800e3e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	7fda      	ldrb	r2, [r3, #31]
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	7fdb      	ldrb	r3, [r3, #31]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d803      	bhi.n	800e3e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1cb      	bne.n	800e392 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e3fa:	6a3b      	ldr	r3, [r7, #32]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d008      	beq.n	800e412 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e400:	69b9      	ldr	r1, [r7, #24]
 800e402:	6a38      	ldr	r0, [r7, #32]
 800e404:	f7ff ff0e 	bl	800e224 <ip_reass_free_complete_datagram>
 800e408:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e40a:	697a      	ldr	r2, [r7, #20]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e412:	697a      	ldr	r2, [r7, #20]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	da02      	bge.n	800e420 <ip_reass_remove_oldest_datagram+0xb4>
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	dcac      	bgt.n	800e37a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e420:	697b      	ldr	r3, [r7, #20]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3728      	adds	r7, #40	; 0x28
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	2000aab8 	.word	0x2000aab8

0800e430 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e43a:	2004      	movs	r0, #4
 800e43c:	f7f7 f854 	bl	80054e8 <memp_malloc>
 800e440:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d110      	bne.n	800e46a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7ff ff8e 	bl	800e36c <ip_reass_remove_oldest_datagram>
 800e450:	4602      	mov	r2, r0
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	4293      	cmp	r3, r2
 800e456:	dc03      	bgt.n	800e460 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e458:	2004      	movs	r0, #4
 800e45a:	f7f7 f845 	bl	80054e8 <memp_malloc>
 800e45e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	e016      	b.n	800e498 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e46a:	2220      	movs	r2, #32
 800e46c:	2100      	movs	r1, #0
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f000 fe1c 	bl	800f0ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	220f      	movs	r2, #15
 800e478:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e47a:	4b09      	ldr	r3, [pc, #36]	; (800e4a0 <ip_reass_enqueue_new_datagram+0x70>)
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e482:	4a07      	ldr	r2, [pc, #28]	; (800e4a0 <ip_reass_enqueue_new_datagram+0x70>)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3308      	adds	r3, #8
 800e48c:	2214      	movs	r2, #20
 800e48e:	6879      	ldr	r1, [r7, #4]
 800e490:	4618      	mov	r0, r3
 800e492:	f000 fde3 	bl	800f05c <memcpy>
  return ipr;
 800e496:	68fb      	ldr	r3, [r7, #12]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	2000aab8 	.word	0x2000aab8

0800e4a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e4ae:	4b10      	ldr	r3, [pc, #64]	; (800e4f0 <ip_reass_dequeue_datagram+0x4c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d104      	bne.n	800e4c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a0c      	ldr	r2, [pc, #48]	; (800e4f0 <ip_reass_dequeue_datagram+0x4c>)
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	e00d      	b.n	800e4de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d106      	bne.n	800e4d6 <ip_reass_dequeue_datagram+0x32>
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <ip_reass_dequeue_datagram+0x50>)
 800e4ca:	f240 1245 	movw	r2, #325	; 0x145
 800e4ce:	490a      	ldr	r1, [pc, #40]	; (800e4f8 <ip_reass_dequeue_datagram+0x54>)
 800e4d0:	480a      	ldr	r0, [pc, #40]	; (800e4fc <ip_reass_dequeue_datagram+0x58>)
 800e4d2:	f000 fdf3 	bl	800f0bc <iprintf>
    prev->next = ipr->next;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e4de:	6879      	ldr	r1, [r7, #4]
 800e4e0:	2004      	movs	r0, #4
 800e4e2:	f7f7 f871 	bl	80055c8 <memp_free>
}
 800e4e6:	bf00      	nop
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	2000aab8 	.word	0x2000aab8
 800e4f4:	08012c1c 	.word	0x08012c1c
 800e4f8:	08012ce4 	.word	0x08012ce4
 800e4fc:	08012c64 	.word	0x08012c64

0800e500 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b08c      	sub	sp, #48	; 0x30
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e50c:	2300      	movs	r3, #0
 800e50e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e510:	2301      	movs	r3, #1
 800e512:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	885b      	ldrh	r3, [r3, #2]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	4618      	mov	r0, r3
 800e522:	f7f6 fb69 	bl	8004bf8 <lwip_htons>
 800e526:	4603      	mov	r3, r0
 800e528:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	f003 030f 	and.w	r3, r3, #15
 800e532:	b2db      	uxtb	r3, r3
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e538:	7e7b      	ldrb	r3, [r7, #25]
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	8b7a      	ldrh	r2, [r7, #26]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d202      	bcs.n	800e548 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e542:	f04f 33ff 	mov.w	r3, #4294967295
 800e546:	e135      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e548:	7e7b      	ldrb	r3, [r7, #25]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	8b7a      	ldrh	r2, [r7, #26]
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	88db      	ldrh	r3, [r3, #6]
 800e556:	b29b      	uxth	r3, r3
 800e558:	4618      	mov	r0, r3
 800e55a:	f7f6 fb4d 	bl	8004bf8 <lwip_htons>
 800e55e:	4603      	mov	r3, r0
 800e560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e564:	b29b      	uxth	r3, r3
 800e566:	00db      	lsls	r3, r3, #3
 800e568:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	2200      	movs	r2, #0
 800e578:	705a      	strb	r2, [r3, #1]
 800e57a:	2200      	movs	r2, #0
 800e57c:	709a      	strb	r2, [r3, #2]
 800e57e:	2200      	movs	r2, #0
 800e580:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	8afa      	ldrh	r2, [r7, #22]
 800e586:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e588:	8afa      	ldrh	r2, [r7, #22]
 800e58a:	8b7b      	ldrh	r3, [r7, #26]
 800e58c:	4413      	add	r3, r2
 800e58e:	b29a      	uxth	r2, r3
 800e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e592:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	88db      	ldrh	r3, [r3, #6]
 800e598:	b29b      	uxth	r3, r3
 800e59a:	8afa      	ldrh	r2, [r7, #22]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d902      	bls.n	800e5a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a4:	e106      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ac:	e068      	b.n	800e680 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	889b      	ldrh	r3, [r3, #4]
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	889b      	ldrh	r3, [r3, #4]
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d235      	bcs.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d020      	beq.n	800e612 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	889b      	ldrh	r3, [r3, #4]
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d8:	88db      	ldrh	r3, [r3, #6]
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d307      	bcc.n	800e5f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	88db      	ldrh	r3, [r3, #6]
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	889b      	ldrh	r3, [r3, #4]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d902      	bls.n	800e5f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f4:	e0de      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fe:	88db      	ldrh	r3, [r3, #6]
 800e600:	b29a      	uxth	r2, r3
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	889b      	ldrh	r3, [r3, #4]
 800e606:	b29b      	uxth	r3, r3
 800e608:	429a      	cmp	r2, r3
 800e60a:	d03d      	beq.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e610:	e03a      	b.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	88db      	ldrh	r3, [r3, #6]
 800e616:	b29a      	uxth	r2, r3
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	889b      	ldrh	r3, [r3, #4]
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	429a      	cmp	r2, r3
 800e620:	d902      	bls.n	800e628 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e622:	f04f 33ff 	mov.w	r3, #4294967295
 800e626:	e0c5      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	605a      	str	r2, [r3, #4]
      break;
 800e62e:	e02b      	b.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e632:	889b      	ldrh	r3, [r3, #4]
 800e634:	b29a      	uxth	r2, r3
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	889b      	ldrh	r3, [r3, #4]
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d102      	bne.n	800e646 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e640:	f04f 33ff 	mov.w	r3, #4294967295
 800e644:	e0b6      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	889b      	ldrh	r3, [r3, #4]
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	b29b      	uxth	r3, r3
 800e652:	429a      	cmp	r2, r3
 800e654:	d202      	bcs.n	800e65c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e656:	f04f 33ff 	mov.w	r3, #4294967295
 800e65a:	e0ab      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d009      	beq.n	800e676 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e664:	88db      	ldrh	r3, [r3, #6]
 800e666:	b29a      	uxth	r2, r3
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	889b      	ldrh	r3, [r3, #4]
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	429a      	cmp	r2, r3
 800e670:	d001      	beq.n	800e676 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	2b00      	cmp	r3, #0
 800e684:	d193      	bne.n	800e5ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e686:	e000      	b.n	800e68a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e688:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d12d      	bne.n	800e6ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	2b00      	cmp	r3, #0
 800e694:	d01c      	beq.n	800e6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	88db      	ldrh	r3, [r3, #6]
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	889b      	ldrh	r3, [r3, #4]
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d906      	bls.n	800e6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e6a6:	4b45      	ldr	r3, [pc, #276]	; (800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e6a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e6ac:	4944      	ldr	r1, [pc, #272]	; (800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e6ae:	4845      	ldr	r0, [pc, #276]	; (800e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e6b0:	f000 fd04 	bl	800f0bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	88db      	ldrh	r3, [r3, #6]
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c2:	889b      	ldrh	r3, [r3, #4]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d010      	beq.n	800e6ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	623b      	str	r3, [r7, #32]
 800e6ce:	e00d      	b.n	800e6ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d006      	beq.n	800e6e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e6d8:	4b38      	ldr	r3, [pc, #224]	; (800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e6da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e6de:	493a      	ldr	r1, [pc, #232]	; (800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e6e0:	4838      	ldr	r0, [pc, #224]	; (800e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e6e2:	f000 fceb 	bl	800f0bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d105      	bne.n	800e6fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	7f9b      	ldrb	r3, [r3, #30]
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d059      	beq.n	800e7b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e6fe:	6a3b      	ldr	r3, [r7, #32]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d04f      	beq.n	800e7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d006      	beq.n	800e71a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	889b      	ldrh	r3, [r3, #4]
 800e714:	b29b      	uxth	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	623b      	str	r3, [r7, #32]
 800e71e:	e041      	b.n	800e7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e72a:	e012      	b.n	800e752 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	88db      	ldrh	r3, [r3, #6]
 800e736:	b29a      	uxth	r2, r3
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	889b      	ldrh	r3, [r3, #4]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	429a      	cmp	r2, r3
 800e740:	d002      	beq.n	800e748 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	623b      	str	r3, [r7, #32]
            break;
 800e746:	e007      	b.n	800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1e9      	bne.n	800e72c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d022      	beq.n	800e7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e766:	4b15      	ldr	r3, [pc, #84]	; (800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e768:	f240 12df 	movw	r2, #479	; 0x1df
 800e76c:	4917      	ldr	r1, [pc, #92]	; (800e7cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e76e:	4815      	ldr	r0, [pc, #84]	; (800e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e770:	f000 fca4 	bl	800f0bc <iprintf>
          LWIP_ASSERT("sanity check",
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d106      	bne.n	800e78e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e780:	4b0e      	ldr	r3, [pc, #56]	; (800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e782:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e786:	4911      	ldr	r1, [pc, #68]	; (800e7cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e788:	480e      	ldr	r0, [pc, #56]	; (800e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e78a:	f000 fc97 	bl	800f0bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d006      	beq.n	800e7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e796:	4b09      	ldr	r3, [pc, #36]	; (800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e798:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e79c:	490c      	ldr	r1, [pc, #48]	; (800e7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e79e:	4809      	ldr	r0, [pc, #36]	; (800e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7a0:	f000 fc8c 	bl	800f0bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e7a4:	6a3b      	ldr	r3, [r7, #32]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	bf14      	ite	ne
 800e7aa:	2301      	movne	r3, #1
 800e7ac:	2300      	moveq	r3, #0
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	e000      	b.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3730      	adds	r7, #48	; 0x30
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	08012c1c 	.word	0x08012c1c
 800e7c0:	08012d00 	.word	0x08012d00
 800e7c4:	08012c64 	.word	0x08012c64
 800e7c8:	08012d20 	.word	0x08012d20
 800e7cc:	08012d58 	.word	0x08012d58
 800e7d0:	08012d68 	.word	0x08012d68

0800e7d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b08e      	sub	sp, #56	; 0x38
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	f003 030f 	and.w	r3, r3, #15
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b14      	cmp	r3, #20
 800e7f2:	f040 8171 	bne.w	800ead8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f8:	88db      	ldrh	r3, [r3, #6]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f6 f9fb 	bl	8004bf8 <lwip_htons>
 800e802:	4603      	mov	r3, r0
 800e804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e808:	b29b      	uxth	r3, r3
 800e80a:	00db      	lsls	r3, r3, #3
 800e80c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	885b      	ldrh	r3, [r3, #2]
 800e812:	b29b      	uxth	r3, r3
 800e814:	4618      	mov	r0, r3
 800e816:	f7f6 f9ef 	bl	8004bf8 <lwip_htons>
 800e81a:	4603      	mov	r3, r0
 800e81c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	f003 030f 	and.w	r3, r3, #15
 800e826:	b2db      	uxtb	r3, r3
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e82e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e832:	b29b      	uxth	r3, r3
 800e834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e836:	429a      	cmp	r2, r3
 800e838:	f0c0 8150 	bcc.w	800eadc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e83c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e840:	b29b      	uxth	r3, r3
 800e842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7f7 fdbb 	bl	80063c4 <pbuf_clen>
 800e84e:	4603      	mov	r3, r0
 800e850:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e852:	4b8c      	ldr	r3, [pc, #560]	; (800ea84 <ip4_reass+0x2b0>)
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	461a      	mov	r2, r3
 800e858:	8c3b      	ldrh	r3, [r7, #32]
 800e85a:	4413      	add	r3, r2
 800e85c:	2b0a      	cmp	r3, #10
 800e85e:	dd10      	ble.n	800e882 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e860:	8c3b      	ldrh	r3, [r7, #32]
 800e862:	4619      	mov	r1, r3
 800e864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e866:	f7ff fd81 	bl	800e36c <ip_reass_remove_oldest_datagram>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f000 8137 	beq.w	800eae0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e872:	4b84      	ldr	r3, [pc, #528]	; (800ea84 <ip4_reass+0x2b0>)
 800e874:	881b      	ldrh	r3, [r3, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	8c3b      	ldrh	r3, [r7, #32]
 800e87a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e87c:	2b0a      	cmp	r3, #10
 800e87e:	f300 812f 	bgt.w	800eae0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e882:	4b81      	ldr	r3, [pc, #516]	; (800ea88 <ip4_reass+0x2b4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	633b      	str	r3, [r7, #48]	; 0x30
 800e888:	e015      	b.n	800e8b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88c:	695a      	ldr	r2, [r3, #20]
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	429a      	cmp	r2, r3
 800e894:	d10c      	bne.n	800e8b0 <ip4_reass+0xdc>
 800e896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e898:	699a      	ldr	r2, [r3, #24]
 800e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d106      	bne.n	800e8b0 <ip4_reass+0xdc>
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	899a      	ldrh	r2, [r3, #12]
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	889b      	ldrh	r3, [r3, #4]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d006      	beq.n	800e8be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	633b      	str	r3, [r7, #48]	; 0x30
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e6      	bne.n	800e88a <ip4_reass+0xb6>
 800e8bc:	e000      	b.n	800e8c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e8be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d109      	bne.n	800e8da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e8c6:	8c3b      	ldrh	r3, [r7, #32]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8cc:	f7ff fdb0 	bl	800e430 <ip_reass_enqueue_new_datagram>
 800e8d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d11c      	bne.n	800e912 <ip4_reass+0x13e>
      goto nullreturn;
 800e8d8:	e105      	b.n	800eae6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	88db      	ldrh	r3, [r3, #6]
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7f6 f989 	bl	8004bf8 <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d110      	bne.n	800e912 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f2:	89db      	ldrh	r3, [r3, #14]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7f6 f97f 	bl	8004bf8 <lwip_htons>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e900:	2b00      	cmp	r3, #0
 800e902:	d006      	beq.n	800e912 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	3308      	adds	r3, #8
 800e908:	2214      	movs	r2, #20
 800e90a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 fba5 	bl	800f05c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	88db      	ldrh	r3, [r3, #6]
 800e916:	b29b      	uxth	r3, r3
 800e918:	f003 0320 	and.w	r3, r3, #32
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	bf0c      	ite	eq
 800e920:	2301      	moveq	r3, #1
 800e922:	2300      	movne	r3, #0
 800e924:	b2db      	uxtb	r3, r3
 800e926:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00e      	beq.n	800e94c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e92e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e932:	4413      	add	r3, r2
 800e934:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e936:	8b7a      	ldrh	r2, [r7, #26]
 800e938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e93a:	429a      	cmp	r2, r3
 800e93c:	f0c0 80a0 	bcc.w	800ea80 <ip4_reass+0x2ac>
 800e940:	8b7b      	ldrh	r3, [r7, #26]
 800e942:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e946:	4293      	cmp	r3, r2
 800e948:	f200 809a 	bhi.w	800ea80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e94c:	69fa      	ldr	r2, [r7, #28]
 800e94e:	6879      	ldr	r1, [r7, #4]
 800e950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e952:	f7ff fdd5 	bl	800e500 <ip_reass_chain_frag_into_datagram_and_validate>
 800e956:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e95e:	f000 809b 	beq.w	800ea98 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e962:	4b48      	ldr	r3, [pc, #288]	; (800ea84 <ip4_reass+0x2b0>)
 800e964:	881a      	ldrh	r2, [r3, #0]
 800e966:	8c3b      	ldrh	r3, [r7, #32]
 800e968:	4413      	add	r3, r2
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b45      	ldr	r3, [pc, #276]	; (800ea84 <ip4_reass+0x2b0>)
 800e96e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00d      	beq.n	800e992 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e976:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97a:	4413      	add	r3, r2
 800e97c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e980:	8a7a      	ldrh	r2, [r7, #18]
 800e982:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	7f9b      	ldrb	r3, [r3, #30]
 800e988:	f043 0301 	orr.w	r3, r3, #1
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	2b01      	cmp	r3, #1
 800e996:	d171      	bne.n	800ea7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99a:	8b9b      	ldrh	r3, [r3, #28]
 800e99c:	3314      	adds	r3, #20
 800e99e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	2214      	movs	r2, #20
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9bc:	f000 fb4e 	bl	800f05c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e9c0:	8a3b      	ldrh	r3, [r7, #16]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7f6 f918 	bl	8004bf8 <lwip_htons>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	719a      	strb	r2, [r3, #6]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	2200      	movs	r2, #0
 800e9de:	729a      	strb	r2, [r3, #10]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e9ea:	e00d      	b.n	800ea08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e9f2:	2114      	movs	r1, #20
 800e9f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e9f6:	f7f7 fbd7 	bl	80061a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e9fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7f7 fd1b 	bl	8006438 <pbuf_cat>
      r = iprh->next_pbuf;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ea08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1ee      	bne.n	800e9ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ea0e:	4b1e      	ldr	r3, [pc, #120]	; (800ea88 <ip4_reass+0x2b4>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d102      	bne.n	800ea1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea1c:	e010      	b.n	800ea40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ea1e:	4b1a      	ldr	r3, [pc, #104]	; (800ea88 <ip4_reass+0x2b4>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea24:	e007      	b.n	800ea36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ea26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d006      	beq.n	800ea3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1f4      	bne.n	800ea26 <ip4_reass+0x252>
 800ea3c:	e000      	b.n	800ea40 <ip4_reass+0x26c>
          break;
 800ea3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ea40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea44:	f7ff fd2e 	bl	800e4a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7f7 fcbb 	bl	80063c4 <pbuf_clen>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ea52:	4b0c      	ldr	r3, [pc, #48]	; (800ea84 <ip4_reass+0x2b0>)
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	8c3a      	ldrh	r2, [r7, #32]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d906      	bls.n	800ea6a <ip4_reass+0x296>
 800ea5c:	4b0b      	ldr	r3, [pc, #44]	; (800ea8c <ip4_reass+0x2b8>)
 800ea5e:	f240 229b 	movw	r2, #667	; 0x29b
 800ea62:	490b      	ldr	r1, [pc, #44]	; (800ea90 <ip4_reass+0x2bc>)
 800ea64:	480b      	ldr	r0, [pc, #44]	; (800ea94 <ip4_reass+0x2c0>)
 800ea66:	f000 fb29 	bl	800f0bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <ip4_reass+0x2b0>)
 800ea6c:	881a      	ldrh	r2, [r3, #0]
 800ea6e:	8c3b      	ldrh	r3, [r7, #32]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	4b03      	ldr	r3, [pc, #12]	; (800ea84 <ip4_reass+0x2b0>)
 800ea76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	e038      	b.n	800eaee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	e036      	b.n	800eaee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ea80:	bf00      	nop
 800ea82:	e00a      	b.n	800ea9a <ip4_reass+0x2c6>
 800ea84:	2000aabc 	.word	0x2000aabc
 800ea88:	2000aab8 	.word	0x2000aab8
 800ea8c:	08012c1c 	.word	0x08012c1c
 800ea90:	08012d8c 	.word	0x08012d8c
 800ea94:	08012c64 	.word	0x08012c64
    goto nullreturn_ipr;
 800ea98:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d106      	bne.n	800eaae <ip4_reass+0x2da>
 800eaa0:	4b15      	ldr	r3, [pc, #84]	; (800eaf8 <ip4_reass+0x324>)
 800eaa2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800eaa6:	4915      	ldr	r1, [pc, #84]	; (800eafc <ip4_reass+0x328>)
 800eaa8:	4815      	ldr	r0, [pc, #84]	; (800eb00 <ip4_reass+0x32c>)
 800eaaa:	f000 fb07 	bl	800f0bc <iprintf>
  if (ipr->p == NULL) {
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d116      	bne.n	800eae4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800eab6:	4b13      	ldr	r3, [pc, #76]	; (800eb04 <ip4_reass+0x330>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d006      	beq.n	800eace <ip4_reass+0x2fa>
 800eac0:	4b0d      	ldr	r3, [pc, #52]	; (800eaf8 <ip4_reass+0x324>)
 800eac2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eac6:	4910      	ldr	r1, [pc, #64]	; (800eb08 <ip4_reass+0x334>)
 800eac8:	480d      	ldr	r0, [pc, #52]	; (800eb00 <ip4_reass+0x32c>)
 800eaca:	f000 faf7 	bl	800f0bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800eace:	2100      	movs	r1, #0
 800ead0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ead2:	f7ff fce7 	bl	800e4a4 <ip_reass_dequeue_datagram>
 800ead6:	e006      	b.n	800eae6 <ip4_reass+0x312>
    goto nullreturn;
 800ead8:	bf00      	nop
 800eada:	e004      	b.n	800eae6 <ip4_reass+0x312>
    goto nullreturn;
 800eadc:	bf00      	nop
 800eade:	e002      	b.n	800eae6 <ip4_reass+0x312>
      goto nullreturn;
 800eae0:	bf00      	nop
 800eae2:	e000      	b.n	800eae6 <ip4_reass+0x312>
  }

nullreturn:
 800eae4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7f7 fbe4 	bl	80062b4 <pbuf_free>
  return NULL;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3738      	adds	r7, #56	; 0x38
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	08012c1c 	.word	0x08012c1c
 800eafc:	08012da8 	.word	0x08012da8
 800eb00:	08012c64 	.word	0x08012c64
 800eb04:	2000aab8 	.word	0x2000aab8
 800eb08:	08012db4 	.word	0x08012db4

0800eb0c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800eb10:	2005      	movs	r0, #5
 800eb12:	f7f6 fce9 	bl	80054e8 <memp_malloc>
 800eb16:	4603      	mov	r3, r0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <ip_frag_free_pbuf_custom_ref+0x1c>
 800eb2a:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800eb2c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800eb30:	4906      	ldr	r1, [pc, #24]	; (800eb4c <ip_frag_free_pbuf_custom_ref+0x30>)
 800eb32:	4807      	ldr	r0, [pc, #28]	; (800eb50 <ip_frag_free_pbuf_custom_ref+0x34>)
 800eb34:	f000 fac2 	bl	800f0bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800eb38:	6879      	ldr	r1, [r7, #4]
 800eb3a:	2005      	movs	r0, #5
 800eb3c:	f7f6 fd44 	bl	80055c8 <memp_free>
}
 800eb40:	bf00      	nop
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	08012c1c 	.word	0x08012c1c
 800eb4c:	08012dd4 	.word	0x08012dd4
 800eb50:	08012c64 	.word	0x08012c64

0800eb54 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d106      	bne.n	800eb74 <ipfrag_free_pbuf_custom+0x20>
 800eb66:	4b11      	ldr	r3, [pc, #68]	; (800ebac <ipfrag_free_pbuf_custom+0x58>)
 800eb68:	f240 22ce 	movw	r2, #718	; 0x2ce
 800eb6c:	4910      	ldr	r1, [pc, #64]	; (800ebb0 <ipfrag_free_pbuf_custom+0x5c>)
 800eb6e:	4811      	ldr	r0, [pc, #68]	; (800ebb4 <ipfrag_free_pbuf_custom+0x60>)
 800eb70:	f000 faa4 	bl	800f0bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d006      	beq.n	800eb8a <ipfrag_free_pbuf_custom+0x36>
 800eb7c:	4b0b      	ldr	r3, [pc, #44]	; (800ebac <ipfrag_free_pbuf_custom+0x58>)
 800eb7e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800eb82:	490d      	ldr	r1, [pc, #52]	; (800ebb8 <ipfrag_free_pbuf_custom+0x64>)
 800eb84:	480b      	ldr	r0, [pc, #44]	; (800ebb4 <ipfrag_free_pbuf_custom+0x60>)
 800eb86:	f000 fa99 	bl	800f0bc <iprintf>
  if (pcr->original != NULL) {
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	695b      	ldr	r3, [r3, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d004      	beq.n	800eb9c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7f7 fb8c 	bl	80062b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7ff ffbd 	bl	800eb1c <ip_frag_free_pbuf_custom_ref>
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	08012c1c 	.word	0x08012c1c
 800ebb0:	08012de0 	.word	0x08012de0
 800ebb4:	08012c64 	.word	0x08012c64
 800ebb8:	08012dec 	.word	0x08012dec

0800ebbc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b094      	sub	sp, #80	; 0x50
 800ebc0:	af02      	add	r7, sp, #8
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ebd2:	3b14      	subs	r3, #20
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	da00      	bge.n	800ebda <ip4_frag+0x1e>
 800ebd8:	3307      	adds	r3, #7
 800ebda:	10db      	asrs	r3, r3, #3
 800ebdc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ebde:	2314      	movs	r3, #20
 800ebe0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ebe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	f003 030f 	and.w	r3, r3, #15
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b14      	cmp	r3, #20
 800ebfc:	d002      	beq.n	800ec04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ebfe:	f06f 0305 	mvn.w	r3, #5
 800ec02:	e110      	b.n	800ee26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	895b      	ldrh	r3, [r3, #10]
 800ec08:	2b13      	cmp	r3, #19
 800ec0a:	d809      	bhi.n	800ec20 <ip4_frag+0x64>
 800ec0c:	4b88      	ldr	r3, [pc, #544]	; (800ee30 <ip4_frag+0x274>)
 800ec0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ec12:	4988      	ldr	r1, [pc, #544]	; (800ee34 <ip4_frag+0x278>)
 800ec14:	4888      	ldr	r0, [pc, #544]	; (800ee38 <ip4_frag+0x27c>)
 800ec16:	f000 fa51 	bl	800f0bc <iprintf>
 800ec1a:	f06f 0305 	mvn.w	r3, #5
 800ec1e:	e102      	b.n	800ee26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ec20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec22:	88db      	ldrh	r3, [r3, #6]
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7f5 ffe6 	bl	8004bf8 <lwip_htons>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ec30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ec3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ec40:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	891b      	ldrh	r3, [r3, #8]
 800ec46:	3b14      	subs	r3, #20
 800ec48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ec4c:	e0e1      	b.n	800ee12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ec4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec50:	00db      	lsls	r3, r3, #3
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	bf28      	it	cs
 800ec5c:	4613      	movcs	r3, r2
 800ec5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ec60:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec64:	2114      	movs	r1, #20
 800ec66:	200e      	movs	r0, #14
 800ec68:	f7f7 f840 	bl	8005cec <pbuf_alloc>
 800ec6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 80d5 	beq.w	800ee20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec78:	895b      	ldrh	r3, [r3, #10]
 800ec7a:	2b13      	cmp	r3, #19
 800ec7c:	d806      	bhi.n	800ec8c <ip4_frag+0xd0>
 800ec7e:	4b6c      	ldr	r3, [pc, #432]	; (800ee30 <ip4_frag+0x274>)
 800ec80:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ec84:	496d      	ldr	r1, [pc, #436]	; (800ee3c <ip4_frag+0x280>)
 800ec86:	486c      	ldr	r0, [pc, #432]	; (800ee38 <ip4_frag+0x27c>)
 800ec88:	f000 fa18 	bl	800f0bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	2214      	movs	r2, #20
 800ec92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 f9e1 	bl	800f05c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eca0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eca2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800eca6:	e064      	b.n	800ed72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	895a      	ldrh	r2, [r3, #10]
 800ecac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	895b      	ldrh	r3, [r3, #10]
 800ecb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d906      	bls.n	800ecca <ip4_frag+0x10e>
 800ecbc:	4b5c      	ldr	r3, [pc, #368]	; (800ee30 <ip4_frag+0x274>)
 800ecbe:	f240 322d 	movw	r2, #813	; 0x32d
 800ecc2:	495f      	ldr	r1, [pc, #380]	; (800ee40 <ip4_frag+0x284>)
 800ecc4:	485c      	ldr	r0, [pc, #368]	; (800ee38 <ip4_frag+0x27c>)
 800ecc6:	f000 f9f9 	bl	800f0bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ecca:	8bfa      	ldrh	r2, [r7, #30]
 800eccc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	bf28      	it	cs
 800ecd4:	4613      	movcs	r3, r2
 800ecd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ecda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d105      	bne.n	800ecee <ip4_frag+0x132>
        poff = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	60fb      	str	r3, [r7, #12]
        continue;
 800ecec:	e041      	b.n	800ed72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ecee:	f7ff ff0d 	bl	800eb0c <ip_frag_alloc_pbuf_custom_ref>
 800ecf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d103      	bne.n	800ed02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ecfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecfc:	f7f7 fada 	bl	80062b4 <pbuf_free>
        goto memerr;
 800ed00:	e08f      	b.n	800ee22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ed02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ed08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ed10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ed14:	9201      	str	r2, [sp, #4]
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2241      	movs	r2, #65	; 0x41
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	f7f7 f90f 	bl	8005f40 <pbuf_alloced_custom>
 800ed22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ed2a:	69b8      	ldr	r0, [r7, #24]
 800ed2c:	f7ff fef6 	bl	800eb1c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ed30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed32:	f7f7 fabf 	bl	80062b4 <pbuf_free>
        goto memerr;
 800ed36:	e074      	b.n	800ee22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f7f7 fb5b 	bl	80063f4 <pbuf_ref>
      pcr->original = p;
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	4a3f      	ldr	r2, [pc, #252]	; (800ee44 <ip4_frag+0x288>)
 800ed48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ed4a:	6979      	ldr	r1, [r7, #20]
 800ed4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed4e:	f7f7 fb73 	bl	8006438 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ed52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ed56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ed5a:	1ad3      	subs	r3, r2, r3
 800ed5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ed60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d004      	beq.n	800ed72 <ip4_frag+0x1b6>
        poff = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ed72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d196      	bne.n	800eca8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ed7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ed7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ed80:	4413      	add	r3, r2
 800ed82:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed88:	f1a3 0213 	sub.w	r2, r3, #19
 800ed8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed90:	429a      	cmp	r2, r3
 800ed92:	bfcc      	ite	gt
 800ed94:	2301      	movgt	r3, #1
 800ed96:	2300      	movle	r3, #0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ed9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eda0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eda4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <ip4_frag+0x1f6>
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d003      	beq.n	800edba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800edb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800edb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800edb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800edba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7f5 ff1b 	bl	8004bf8 <lwip_htons>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800edca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800edcc:	3314      	adds	r3, #20
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7f5 ff11 	bl	8004bf8 <lwip_htons>
 800edd6:	4603      	mov	r3, r0
 800edd8:	461a      	mov	r2, r3
 800edda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eddc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	2200      	movs	r2, #0
 800ede2:	729a      	strb	r2, [r3, #10]
 800ede4:	2200      	movs	r2, #0
 800ede6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	695b      	ldr	r3, [r3, #20]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edf0:	68b8      	ldr	r0, [r7, #8]
 800edf2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800edf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edf6:	f7f7 fa5d 	bl	80062b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800edfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ee06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ee0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ee12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f47f af19 	bne.w	800ec4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e002      	b.n	800ee26 <ip4_frag+0x26a>
      goto memerr;
 800ee20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ee22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3748      	adds	r7, #72	; 0x48
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	08012c1c 	.word	0x08012c1c
 800ee34:	08012df8 	.word	0x08012df8
 800ee38:	08012c64 	.word	0x08012c64
 800ee3c:	08012e14 	.word	0x08012e14
 800ee40:	08012e34 	.word	0x08012e34
 800ee44:	0800eb55 	.word	0x0800eb55

0800ee48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ee52:	230e      	movs	r3, #14
 800ee54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	895b      	ldrh	r3, [r3, #10]
 800ee5a:	2b0e      	cmp	r3, #14
 800ee5c:	d96e      	bls.n	800ef3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	7bdb      	ldrb	r3, [r3, #15]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	7b1a      	ldrb	r2, [r3, #12]
 800ee7e:	7b5b      	ldrb	r3, [r3, #13]
 800ee80:	021b      	lsls	r3, r3, #8
 800ee82:	4313      	orrs	r3, r2
 800ee84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d023      	beq.n	800eeda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d10f      	bne.n	800eeba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	785b      	ldrb	r3, [r3, #1]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d11b      	bne.n	800eeda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eea6:	2b5e      	cmp	r3, #94	; 0x5e
 800eea8:	d117      	bne.n	800eeda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	7b5b      	ldrb	r3, [r3, #13]
 800eeae:	f043 0310 	orr.w	r3, r3, #16
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	735a      	strb	r2, [r3, #13]
 800eeb8:	e00f      	b.n	800eeda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2206      	movs	r2, #6
 800eebe:	4928      	ldr	r1, [pc, #160]	; (800ef60 <ethernet_input+0x118>)
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 f8bb 	bl	800f03c <memcmp>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d106      	bne.n	800eeda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	7b5b      	ldrb	r3, [r3, #13]
 800eed0:	f043 0308 	orr.w	r3, r3, #8
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800eeda:	89fb      	ldrh	r3, [r7, #14]
 800eedc:	2b08      	cmp	r3, #8
 800eede:	d003      	beq.n	800eee8 <ethernet_input+0xa0>
 800eee0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800eee4:	d014      	beq.n	800ef10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800eee6:	e032      	b.n	800ef4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eeee:	f003 0308 	and.w	r3, r3, #8
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d024      	beq.n	800ef40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eef6:	8afb      	ldrh	r3, [r7, #22]
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7f7 f954 	bl	80061a8 <pbuf_remove_header>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d11e      	bne.n	800ef44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7fe fe91 	bl	800dc30 <ip4_input>
      break;
 800ef0e:	e013      	b.n	800ef38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef16:	f003 0308 	and.w	r3, r3, #8
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d014      	beq.n	800ef48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ef1e:	8afb      	ldrh	r3, [r7, #22]
 800ef20:	4619      	mov	r1, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7f7 f940 	bl	80061a8 <pbuf_remove_header>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10e      	bne.n	800ef4c <ethernet_input+0x104>
        etharp_input(p, netif);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7fe f831 	bl	800cf98 <etharp_input>
      break;
 800ef36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e00c      	b.n	800ef56 <ethernet_input+0x10e>
    goto free_and_return;
 800ef3c:	bf00      	nop
 800ef3e:	e006      	b.n	800ef4e <ethernet_input+0x106>
        goto free_and_return;
 800ef40:	bf00      	nop
 800ef42:	e004      	b.n	800ef4e <ethernet_input+0x106>
        goto free_and_return;
 800ef44:	bf00      	nop
 800ef46:	e002      	b.n	800ef4e <ethernet_input+0x106>
        goto free_and_return;
 800ef48:	bf00      	nop
 800ef4a:	e000      	b.n	800ef4e <ethernet_input+0x106>
        goto free_and_return;
 800ef4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7f7 f9b0 	bl	80062b4 <pbuf_free>
  return ERR_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	08012fd0 	.word	0x08012fd0

0800ef64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ef72:	8c3b      	ldrh	r3, [r7, #32]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7f5 fe3f 	bl	8004bf8 <lwip_htons>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ef7e:	210e      	movs	r1, #14
 800ef80:	68b8      	ldr	r0, [r7, #8]
 800ef82:	f7f7 f901 	bl	8006188 <pbuf_add_header>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d125      	bne.n	800efd8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	8afa      	ldrh	r2, [r7, #22]
 800ef96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	2206      	movs	r2, #6
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 f85c 	bl	800f05c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	3306      	adds	r3, #6
 800efa8:	2206      	movs	r2, #6
 800efaa:	6879      	ldr	r1, [r7, #4]
 800efac:	4618      	mov	r0, r3
 800efae:	f000 f855 	bl	800f05c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800efb8:	2b06      	cmp	r3, #6
 800efba:	d006      	beq.n	800efca <ethernet_output+0x66>
 800efbc:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <ethernet_output+0x84>)
 800efbe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800efc2:	490a      	ldr	r1, [pc, #40]	; (800efec <ethernet_output+0x88>)
 800efc4:	480a      	ldr	r0, [pc, #40]	; (800eff0 <ethernet_output+0x8c>)
 800efc6:	f000 f879 	bl	800f0bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	699b      	ldr	r3, [r3, #24]
 800efce:	68b9      	ldr	r1, [r7, #8]
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	4798      	blx	r3
 800efd4:	4603      	mov	r3, r0
 800efd6:	e002      	b.n	800efde <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800efd8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800efda:	f06f 0301 	mvn.w	r3, #1
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	08012e44 	.word	0x08012e44
 800efec:	08012e7c 	.word	0x08012e7c
 800eff0:	08012eb0 	.word	0x08012eb0

0800eff4 <__libc_init_array>:
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	4d0d      	ldr	r5, [pc, #52]	; (800f02c <__libc_init_array+0x38>)
 800eff8:	4c0d      	ldr	r4, [pc, #52]	; (800f030 <__libc_init_array+0x3c>)
 800effa:	1b64      	subs	r4, r4, r5
 800effc:	10a4      	asrs	r4, r4, #2
 800effe:	2600      	movs	r6, #0
 800f000:	42a6      	cmp	r6, r4
 800f002:	d109      	bne.n	800f018 <__libc_init_array+0x24>
 800f004:	4d0b      	ldr	r5, [pc, #44]	; (800f034 <__libc_init_array+0x40>)
 800f006:	4c0c      	ldr	r4, [pc, #48]	; (800f038 <__libc_init_array+0x44>)
 800f008:	f001 fa5c 	bl	80104c4 <_init>
 800f00c:	1b64      	subs	r4, r4, r5
 800f00e:	10a4      	asrs	r4, r4, #2
 800f010:	2600      	movs	r6, #0
 800f012:	42a6      	cmp	r6, r4
 800f014:	d105      	bne.n	800f022 <__libc_init_array+0x2e>
 800f016:	bd70      	pop	{r4, r5, r6, pc}
 800f018:	f855 3b04 	ldr.w	r3, [r5], #4
 800f01c:	4798      	blx	r3
 800f01e:	3601      	adds	r6, #1
 800f020:	e7ee      	b.n	800f000 <__libc_init_array+0xc>
 800f022:	f855 3b04 	ldr.w	r3, [r5], #4
 800f026:	4798      	blx	r3
 800f028:	3601      	adds	r6, #1
 800f02a:	e7f2      	b.n	800f012 <__libc_init_array+0x1e>
 800f02c:	08013130 	.word	0x08013130
 800f030:	08013130 	.word	0x08013130
 800f034:	08013130 	.word	0x08013130
 800f038:	08013134 	.word	0x08013134

0800f03c <memcmp>:
 800f03c:	b510      	push	{r4, lr}
 800f03e:	3901      	subs	r1, #1
 800f040:	4402      	add	r2, r0
 800f042:	4290      	cmp	r0, r2
 800f044:	d101      	bne.n	800f04a <memcmp+0xe>
 800f046:	2000      	movs	r0, #0
 800f048:	e005      	b.n	800f056 <memcmp+0x1a>
 800f04a:	7803      	ldrb	r3, [r0, #0]
 800f04c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f050:	42a3      	cmp	r3, r4
 800f052:	d001      	beq.n	800f058 <memcmp+0x1c>
 800f054:	1b18      	subs	r0, r3, r4
 800f056:	bd10      	pop	{r4, pc}
 800f058:	3001      	adds	r0, #1
 800f05a:	e7f2      	b.n	800f042 <memcmp+0x6>

0800f05c <memcpy>:
 800f05c:	440a      	add	r2, r1
 800f05e:	4291      	cmp	r1, r2
 800f060:	f100 33ff 	add.w	r3, r0, #4294967295
 800f064:	d100      	bne.n	800f068 <memcpy+0xc>
 800f066:	4770      	bx	lr
 800f068:	b510      	push	{r4, lr}
 800f06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f072:	4291      	cmp	r1, r2
 800f074:	d1f9      	bne.n	800f06a <memcpy+0xe>
 800f076:	bd10      	pop	{r4, pc}

0800f078 <memmove>:
 800f078:	4288      	cmp	r0, r1
 800f07a:	b510      	push	{r4, lr}
 800f07c:	eb01 0402 	add.w	r4, r1, r2
 800f080:	d902      	bls.n	800f088 <memmove+0x10>
 800f082:	4284      	cmp	r4, r0
 800f084:	4623      	mov	r3, r4
 800f086:	d807      	bhi.n	800f098 <memmove+0x20>
 800f088:	1e43      	subs	r3, r0, #1
 800f08a:	42a1      	cmp	r1, r4
 800f08c:	d008      	beq.n	800f0a0 <memmove+0x28>
 800f08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f096:	e7f8      	b.n	800f08a <memmove+0x12>
 800f098:	4402      	add	r2, r0
 800f09a:	4601      	mov	r1, r0
 800f09c:	428a      	cmp	r2, r1
 800f09e:	d100      	bne.n	800f0a2 <memmove+0x2a>
 800f0a0:	bd10      	pop	{r4, pc}
 800f0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0aa:	e7f7      	b.n	800f09c <memmove+0x24>

0800f0ac <memset>:
 800f0ac:	4402      	add	r2, r0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d100      	bne.n	800f0b6 <memset+0xa>
 800f0b4:	4770      	bx	lr
 800f0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f0ba:	e7f9      	b.n	800f0b0 <memset+0x4>

0800f0bc <iprintf>:
 800f0bc:	b40f      	push	{r0, r1, r2, r3}
 800f0be:	4b0a      	ldr	r3, [pc, #40]	; (800f0e8 <iprintf+0x2c>)
 800f0c0:	b513      	push	{r0, r1, r4, lr}
 800f0c2:	681c      	ldr	r4, [r3, #0]
 800f0c4:	b124      	cbz	r4, 800f0d0 <iprintf+0x14>
 800f0c6:	69a3      	ldr	r3, [r4, #24]
 800f0c8:	b913      	cbnz	r3, 800f0d0 <iprintf+0x14>
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f000 f8e2 	bl	800f294 <__sinit>
 800f0d0:	ab05      	add	r3, sp, #20
 800f0d2:	9a04      	ldr	r2, [sp, #16]
 800f0d4:	68a1      	ldr	r1, [r4, #8]
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 fbfb 	bl	800f8d4 <_vfiprintf_r>
 800f0de:	b002      	add	sp, #8
 800f0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e4:	b004      	add	sp, #16
 800f0e6:	4770      	bx	lr
 800f0e8:	2000002c 	.word	0x2000002c

0800f0ec <rand>:
 800f0ec:	4b16      	ldr	r3, [pc, #88]	; (800f148 <rand+0x5c>)
 800f0ee:	b510      	push	{r4, lr}
 800f0f0:	681c      	ldr	r4, [r3, #0]
 800f0f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0f4:	b9b3      	cbnz	r3, 800f124 <rand+0x38>
 800f0f6:	2018      	movs	r0, #24
 800f0f8:	f000 f97e 	bl	800f3f8 <malloc>
 800f0fc:	63a0      	str	r0, [r4, #56]	; 0x38
 800f0fe:	b928      	cbnz	r0, 800f10c <rand+0x20>
 800f100:	4602      	mov	r2, r0
 800f102:	4b12      	ldr	r3, [pc, #72]	; (800f14c <rand+0x60>)
 800f104:	4812      	ldr	r0, [pc, #72]	; (800f150 <rand+0x64>)
 800f106:	214e      	movs	r1, #78	; 0x4e
 800f108:	f000 f84e 	bl	800f1a8 <__assert_func>
 800f10c:	4a11      	ldr	r2, [pc, #68]	; (800f154 <rand+0x68>)
 800f10e:	4b12      	ldr	r3, [pc, #72]	; (800f158 <rand+0x6c>)
 800f110:	e9c0 2300 	strd	r2, r3, [r0]
 800f114:	4b11      	ldr	r3, [pc, #68]	; (800f15c <rand+0x70>)
 800f116:	6083      	str	r3, [r0, #8]
 800f118:	230b      	movs	r3, #11
 800f11a:	8183      	strh	r3, [r0, #12]
 800f11c:	2201      	movs	r2, #1
 800f11e:	2300      	movs	r3, #0
 800f120:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f124:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f126:	4a0e      	ldr	r2, [pc, #56]	; (800f160 <rand+0x74>)
 800f128:	6920      	ldr	r0, [r4, #16]
 800f12a:	6963      	ldr	r3, [r4, #20]
 800f12c:	490d      	ldr	r1, [pc, #52]	; (800f164 <rand+0x78>)
 800f12e:	4342      	muls	r2, r0
 800f130:	fb01 2203 	mla	r2, r1, r3, r2
 800f134:	fba0 0101 	umull	r0, r1, r0, r1
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	eb42 0001 	adc.w	r0, r2, r1
 800f13e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f142:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f146:	bd10      	pop	{r4, pc}
 800f148:	2000002c 	.word	0x2000002c
 800f14c:	08012fe4 	.word	0x08012fe4
 800f150:	08012ffb 	.word	0x08012ffb
 800f154:	abcd330e 	.word	0xabcd330e
 800f158:	e66d1234 	.word	0xe66d1234
 800f15c:	0005deec 	.word	0x0005deec
 800f160:	5851f42d 	.word	0x5851f42d
 800f164:	4c957f2d 	.word	0x4c957f2d

0800f168 <siprintf>:
 800f168:	b40e      	push	{r1, r2, r3}
 800f16a:	b500      	push	{lr}
 800f16c:	b09c      	sub	sp, #112	; 0x70
 800f16e:	ab1d      	add	r3, sp, #116	; 0x74
 800f170:	9002      	str	r0, [sp, #8]
 800f172:	9006      	str	r0, [sp, #24]
 800f174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f178:	4809      	ldr	r0, [pc, #36]	; (800f1a0 <siprintf+0x38>)
 800f17a:	9107      	str	r1, [sp, #28]
 800f17c:	9104      	str	r1, [sp, #16]
 800f17e:	4909      	ldr	r1, [pc, #36]	; (800f1a4 <siprintf+0x3c>)
 800f180:	f853 2b04 	ldr.w	r2, [r3], #4
 800f184:	9105      	str	r1, [sp, #20]
 800f186:	6800      	ldr	r0, [r0, #0]
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	a902      	add	r1, sp, #8
 800f18c:	f000 fa78 	bl	800f680 <_svfiprintf_r>
 800f190:	9b02      	ldr	r3, [sp, #8]
 800f192:	2200      	movs	r2, #0
 800f194:	701a      	strb	r2, [r3, #0]
 800f196:	b01c      	add	sp, #112	; 0x70
 800f198:	f85d eb04 	ldr.w	lr, [sp], #4
 800f19c:	b003      	add	sp, #12
 800f19e:	4770      	bx	lr
 800f1a0:	2000002c 	.word	0x2000002c
 800f1a4:	ffff0208 	.word	0xffff0208

0800f1a8 <__assert_func>:
 800f1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1aa:	4614      	mov	r4, r2
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	4b09      	ldr	r3, [pc, #36]	; (800f1d4 <__assert_func+0x2c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	68d8      	ldr	r0, [r3, #12]
 800f1b6:	b14c      	cbz	r4, 800f1cc <__assert_func+0x24>
 800f1b8:	4b07      	ldr	r3, [pc, #28]	; (800f1d8 <__assert_func+0x30>)
 800f1ba:	9100      	str	r1, [sp, #0]
 800f1bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1c0:	4906      	ldr	r1, [pc, #24]	; (800f1dc <__assert_func+0x34>)
 800f1c2:	462b      	mov	r3, r5
 800f1c4:	f000 f8e4 	bl	800f390 <fiprintf>
 800f1c8:	f000 ff6e 	bl	80100a8 <abort>
 800f1cc:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <__assert_func+0x38>)
 800f1ce:	461c      	mov	r4, r3
 800f1d0:	e7f3      	b.n	800f1ba <__assert_func+0x12>
 800f1d2:	bf00      	nop
 800f1d4:	2000002c 	.word	0x2000002c
 800f1d8:	08013056 	.word	0x08013056
 800f1dc:	08013063 	.word	0x08013063
 800f1e0:	08013091 	.word	0x08013091

0800f1e4 <std>:
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	b510      	push	{r4, lr}
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1f2:	6083      	str	r3, [r0, #8]
 800f1f4:	8181      	strh	r1, [r0, #12]
 800f1f6:	6643      	str	r3, [r0, #100]	; 0x64
 800f1f8:	81c2      	strh	r2, [r0, #14]
 800f1fa:	6183      	str	r3, [r0, #24]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	2208      	movs	r2, #8
 800f200:	305c      	adds	r0, #92	; 0x5c
 800f202:	f7ff ff53 	bl	800f0ac <memset>
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <std+0x38>)
 800f208:	6263      	str	r3, [r4, #36]	; 0x24
 800f20a:	4b05      	ldr	r3, [pc, #20]	; (800f220 <std+0x3c>)
 800f20c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f20e:	4b05      	ldr	r3, [pc, #20]	; (800f224 <std+0x40>)
 800f210:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f212:	4b05      	ldr	r3, [pc, #20]	; (800f228 <std+0x44>)
 800f214:	6224      	str	r4, [r4, #32]
 800f216:	6323      	str	r3, [r4, #48]	; 0x30
 800f218:	bd10      	pop	{r4, pc}
 800f21a:	bf00      	nop
 800f21c:	0800fe7d 	.word	0x0800fe7d
 800f220:	0800fe9f 	.word	0x0800fe9f
 800f224:	0800fed7 	.word	0x0800fed7
 800f228:	0800fefb 	.word	0x0800fefb

0800f22c <_cleanup_r>:
 800f22c:	4901      	ldr	r1, [pc, #4]	; (800f234 <_cleanup_r+0x8>)
 800f22e:	f000 b8c1 	b.w	800f3b4 <_fwalk_reent>
 800f232:	bf00      	nop
 800f234:	080101e5 	.word	0x080101e5

0800f238 <__sfmoreglue>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	2268      	movs	r2, #104	; 0x68
 800f23c:	1e4d      	subs	r5, r1, #1
 800f23e:	4355      	muls	r5, r2
 800f240:	460e      	mov	r6, r1
 800f242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f246:	f000 f94b 	bl	800f4e0 <_malloc_r>
 800f24a:	4604      	mov	r4, r0
 800f24c:	b140      	cbz	r0, 800f260 <__sfmoreglue+0x28>
 800f24e:	2100      	movs	r1, #0
 800f250:	e9c0 1600 	strd	r1, r6, [r0]
 800f254:	300c      	adds	r0, #12
 800f256:	60a0      	str	r0, [r4, #8]
 800f258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f25c:	f7ff ff26 	bl	800f0ac <memset>
 800f260:	4620      	mov	r0, r4
 800f262:	bd70      	pop	{r4, r5, r6, pc}

0800f264 <__sfp_lock_acquire>:
 800f264:	4801      	ldr	r0, [pc, #4]	; (800f26c <__sfp_lock_acquire+0x8>)
 800f266:	f000 b8c5 	b.w	800f3f4 <__retarget_lock_acquire_recursive>
 800f26a:	bf00      	nop
 800f26c:	2000aac5 	.word	0x2000aac5

0800f270 <__sfp_lock_release>:
 800f270:	4801      	ldr	r0, [pc, #4]	; (800f278 <__sfp_lock_release+0x8>)
 800f272:	f000 b8c0 	b.w	800f3f6 <__retarget_lock_release_recursive>
 800f276:	bf00      	nop
 800f278:	2000aac5 	.word	0x2000aac5

0800f27c <__sinit_lock_acquire>:
 800f27c:	4801      	ldr	r0, [pc, #4]	; (800f284 <__sinit_lock_acquire+0x8>)
 800f27e:	f000 b8b9 	b.w	800f3f4 <__retarget_lock_acquire_recursive>
 800f282:	bf00      	nop
 800f284:	2000aac6 	.word	0x2000aac6

0800f288 <__sinit_lock_release>:
 800f288:	4801      	ldr	r0, [pc, #4]	; (800f290 <__sinit_lock_release+0x8>)
 800f28a:	f000 b8b4 	b.w	800f3f6 <__retarget_lock_release_recursive>
 800f28e:	bf00      	nop
 800f290:	2000aac6 	.word	0x2000aac6

0800f294 <__sinit>:
 800f294:	b510      	push	{r4, lr}
 800f296:	4604      	mov	r4, r0
 800f298:	f7ff fff0 	bl	800f27c <__sinit_lock_acquire>
 800f29c:	69a3      	ldr	r3, [r4, #24]
 800f29e:	b11b      	cbz	r3, 800f2a8 <__sinit+0x14>
 800f2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2a4:	f7ff bff0 	b.w	800f288 <__sinit_lock_release>
 800f2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f2ac:	6523      	str	r3, [r4, #80]	; 0x50
 800f2ae:	4b13      	ldr	r3, [pc, #76]	; (800f2fc <__sinit+0x68>)
 800f2b0:	4a13      	ldr	r2, [pc, #76]	; (800f300 <__sinit+0x6c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f2b6:	42a3      	cmp	r3, r4
 800f2b8:	bf04      	itt	eq
 800f2ba:	2301      	moveq	r3, #1
 800f2bc:	61a3      	streq	r3, [r4, #24]
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 f820 	bl	800f304 <__sfp>
 800f2c4:	6060      	str	r0, [r4, #4]
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f000 f81c 	bl	800f304 <__sfp>
 800f2cc:	60a0      	str	r0, [r4, #8]
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f000 f818 	bl	800f304 <__sfp>
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	60e0      	str	r0, [r4, #12]
 800f2d8:	2104      	movs	r1, #4
 800f2da:	6860      	ldr	r0, [r4, #4]
 800f2dc:	f7ff ff82 	bl	800f1e4 <std>
 800f2e0:	68a0      	ldr	r0, [r4, #8]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	2109      	movs	r1, #9
 800f2e6:	f7ff ff7d 	bl	800f1e4 <std>
 800f2ea:	68e0      	ldr	r0, [r4, #12]
 800f2ec:	2202      	movs	r2, #2
 800f2ee:	2112      	movs	r1, #18
 800f2f0:	f7ff ff78 	bl	800f1e4 <std>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	61a3      	str	r3, [r4, #24]
 800f2f8:	e7d2      	b.n	800f2a0 <__sinit+0xc>
 800f2fa:	bf00      	nop
 800f2fc:	08012fe0 	.word	0x08012fe0
 800f300:	0800f22d 	.word	0x0800f22d

0800f304 <__sfp>:
 800f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f306:	4607      	mov	r7, r0
 800f308:	f7ff ffac 	bl	800f264 <__sfp_lock_acquire>
 800f30c:	4b1e      	ldr	r3, [pc, #120]	; (800f388 <__sfp+0x84>)
 800f30e:	681e      	ldr	r6, [r3, #0]
 800f310:	69b3      	ldr	r3, [r6, #24]
 800f312:	b913      	cbnz	r3, 800f31a <__sfp+0x16>
 800f314:	4630      	mov	r0, r6
 800f316:	f7ff ffbd 	bl	800f294 <__sinit>
 800f31a:	3648      	adds	r6, #72	; 0x48
 800f31c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f320:	3b01      	subs	r3, #1
 800f322:	d503      	bpl.n	800f32c <__sfp+0x28>
 800f324:	6833      	ldr	r3, [r6, #0]
 800f326:	b30b      	cbz	r3, 800f36c <__sfp+0x68>
 800f328:	6836      	ldr	r6, [r6, #0]
 800f32a:	e7f7      	b.n	800f31c <__sfp+0x18>
 800f32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f330:	b9d5      	cbnz	r5, 800f368 <__sfp+0x64>
 800f332:	4b16      	ldr	r3, [pc, #88]	; (800f38c <__sfp+0x88>)
 800f334:	60e3      	str	r3, [r4, #12]
 800f336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f33a:	6665      	str	r5, [r4, #100]	; 0x64
 800f33c:	f000 f859 	bl	800f3f2 <__retarget_lock_init_recursive>
 800f340:	f7ff ff96 	bl	800f270 <__sfp_lock_release>
 800f344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f34c:	6025      	str	r5, [r4, #0]
 800f34e:	61a5      	str	r5, [r4, #24]
 800f350:	2208      	movs	r2, #8
 800f352:	4629      	mov	r1, r5
 800f354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f358:	f7ff fea8 	bl	800f0ac <memset>
 800f35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f364:	4620      	mov	r0, r4
 800f366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f368:	3468      	adds	r4, #104	; 0x68
 800f36a:	e7d9      	b.n	800f320 <__sfp+0x1c>
 800f36c:	2104      	movs	r1, #4
 800f36e:	4638      	mov	r0, r7
 800f370:	f7ff ff62 	bl	800f238 <__sfmoreglue>
 800f374:	4604      	mov	r4, r0
 800f376:	6030      	str	r0, [r6, #0]
 800f378:	2800      	cmp	r0, #0
 800f37a:	d1d5      	bne.n	800f328 <__sfp+0x24>
 800f37c:	f7ff ff78 	bl	800f270 <__sfp_lock_release>
 800f380:	230c      	movs	r3, #12
 800f382:	603b      	str	r3, [r7, #0]
 800f384:	e7ee      	b.n	800f364 <__sfp+0x60>
 800f386:	bf00      	nop
 800f388:	08012fe0 	.word	0x08012fe0
 800f38c:	ffff0001 	.word	0xffff0001

0800f390 <fiprintf>:
 800f390:	b40e      	push	{r1, r2, r3}
 800f392:	b503      	push	{r0, r1, lr}
 800f394:	4601      	mov	r1, r0
 800f396:	ab03      	add	r3, sp, #12
 800f398:	4805      	ldr	r0, [pc, #20]	; (800f3b0 <fiprintf+0x20>)
 800f39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f39e:	6800      	ldr	r0, [r0, #0]
 800f3a0:	9301      	str	r3, [sp, #4]
 800f3a2:	f000 fa97 	bl	800f8d4 <_vfiprintf_r>
 800f3a6:	b002      	add	sp, #8
 800f3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3ac:	b003      	add	sp, #12
 800f3ae:	4770      	bx	lr
 800f3b0:	2000002c 	.word	0x2000002c

0800f3b4 <_fwalk_reent>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	4688      	mov	r8, r1
 800f3bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3c0:	2700      	movs	r7, #0
 800f3c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3c6:	f1b9 0901 	subs.w	r9, r9, #1
 800f3ca:	d505      	bpl.n	800f3d8 <_fwalk_reent+0x24>
 800f3cc:	6824      	ldr	r4, [r4, #0]
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	d1f7      	bne.n	800f3c2 <_fwalk_reent+0xe>
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d8:	89ab      	ldrh	r3, [r5, #12]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d907      	bls.n	800f3ee <_fwalk_reent+0x3a>
 800f3de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	d003      	beq.n	800f3ee <_fwalk_reent+0x3a>
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	47c0      	blx	r8
 800f3ec:	4307      	orrs	r7, r0
 800f3ee:	3568      	adds	r5, #104	; 0x68
 800f3f0:	e7e9      	b.n	800f3c6 <_fwalk_reent+0x12>

0800f3f2 <__retarget_lock_init_recursive>:
 800f3f2:	4770      	bx	lr

0800f3f4 <__retarget_lock_acquire_recursive>:
 800f3f4:	4770      	bx	lr

0800f3f6 <__retarget_lock_release_recursive>:
 800f3f6:	4770      	bx	lr

0800f3f8 <malloc>:
 800f3f8:	4b02      	ldr	r3, [pc, #8]	; (800f404 <malloc+0xc>)
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	6818      	ldr	r0, [r3, #0]
 800f3fe:	f000 b86f 	b.w	800f4e0 <_malloc_r>
 800f402:	bf00      	nop
 800f404:	2000002c 	.word	0x2000002c

0800f408 <_free_r>:
 800f408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f40a:	2900      	cmp	r1, #0
 800f40c:	d044      	beq.n	800f498 <_free_r+0x90>
 800f40e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f412:	9001      	str	r0, [sp, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	f1a1 0404 	sub.w	r4, r1, #4
 800f41a:	bfb8      	it	lt
 800f41c:	18e4      	addlt	r4, r4, r3
 800f41e:	f000 ff95 	bl	801034c <__malloc_lock>
 800f422:	4a1e      	ldr	r2, [pc, #120]	; (800f49c <_free_r+0x94>)
 800f424:	9801      	ldr	r0, [sp, #4]
 800f426:	6813      	ldr	r3, [r2, #0]
 800f428:	b933      	cbnz	r3, 800f438 <_free_r+0x30>
 800f42a:	6063      	str	r3, [r4, #4]
 800f42c:	6014      	str	r4, [r2, #0]
 800f42e:	b003      	add	sp, #12
 800f430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f434:	f000 bf90 	b.w	8010358 <__malloc_unlock>
 800f438:	42a3      	cmp	r3, r4
 800f43a:	d908      	bls.n	800f44e <_free_r+0x46>
 800f43c:	6825      	ldr	r5, [r4, #0]
 800f43e:	1961      	adds	r1, r4, r5
 800f440:	428b      	cmp	r3, r1
 800f442:	bf01      	itttt	eq
 800f444:	6819      	ldreq	r1, [r3, #0]
 800f446:	685b      	ldreq	r3, [r3, #4]
 800f448:	1949      	addeq	r1, r1, r5
 800f44a:	6021      	streq	r1, [r4, #0]
 800f44c:	e7ed      	b.n	800f42a <_free_r+0x22>
 800f44e:	461a      	mov	r2, r3
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	b10b      	cbz	r3, 800f458 <_free_r+0x50>
 800f454:	42a3      	cmp	r3, r4
 800f456:	d9fa      	bls.n	800f44e <_free_r+0x46>
 800f458:	6811      	ldr	r1, [r2, #0]
 800f45a:	1855      	adds	r5, r2, r1
 800f45c:	42a5      	cmp	r5, r4
 800f45e:	d10b      	bne.n	800f478 <_free_r+0x70>
 800f460:	6824      	ldr	r4, [r4, #0]
 800f462:	4421      	add	r1, r4
 800f464:	1854      	adds	r4, r2, r1
 800f466:	42a3      	cmp	r3, r4
 800f468:	6011      	str	r1, [r2, #0]
 800f46a:	d1e0      	bne.n	800f42e <_free_r+0x26>
 800f46c:	681c      	ldr	r4, [r3, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	6053      	str	r3, [r2, #4]
 800f472:	4421      	add	r1, r4
 800f474:	6011      	str	r1, [r2, #0]
 800f476:	e7da      	b.n	800f42e <_free_r+0x26>
 800f478:	d902      	bls.n	800f480 <_free_r+0x78>
 800f47a:	230c      	movs	r3, #12
 800f47c:	6003      	str	r3, [r0, #0]
 800f47e:	e7d6      	b.n	800f42e <_free_r+0x26>
 800f480:	6825      	ldr	r5, [r4, #0]
 800f482:	1961      	adds	r1, r4, r5
 800f484:	428b      	cmp	r3, r1
 800f486:	bf04      	itt	eq
 800f488:	6819      	ldreq	r1, [r3, #0]
 800f48a:	685b      	ldreq	r3, [r3, #4]
 800f48c:	6063      	str	r3, [r4, #4]
 800f48e:	bf04      	itt	eq
 800f490:	1949      	addeq	r1, r1, r5
 800f492:	6021      	streq	r1, [r4, #0]
 800f494:	6054      	str	r4, [r2, #4]
 800f496:	e7ca      	b.n	800f42e <_free_r+0x26>
 800f498:	b003      	add	sp, #12
 800f49a:	bd30      	pop	{r4, r5, pc}
 800f49c:	2000aac8 	.word	0x2000aac8

0800f4a0 <sbrk_aligned>:
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	4e0e      	ldr	r6, [pc, #56]	; (800f4dc <sbrk_aligned+0x3c>)
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	6831      	ldr	r1, [r6, #0]
 800f4a8:	4605      	mov	r5, r0
 800f4aa:	b911      	cbnz	r1, 800f4b2 <sbrk_aligned+0x12>
 800f4ac:	f000 fcd6 	bl	800fe5c <_sbrk_r>
 800f4b0:	6030      	str	r0, [r6, #0]
 800f4b2:	4621      	mov	r1, r4
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f000 fcd1 	bl	800fe5c <_sbrk_r>
 800f4ba:	1c43      	adds	r3, r0, #1
 800f4bc:	d00a      	beq.n	800f4d4 <sbrk_aligned+0x34>
 800f4be:	1cc4      	adds	r4, r0, #3
 800f4c0:	f024 0403 	bic.w	r4, r4, #3
 800f4c4:	42a0      	cmp	r0, r4
 800f4c6:	d007      	beq.n	800f4d8 <sbrk_aligned+0x38>
 800f4c8:	1a21      	subs	r1, r4, r0
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	f000 fcc6 	bl	800fe5c <_sbrk_r>
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d101      	bne.n	800f4d8 <sbrk_aligned+0x38>
 800f4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800f4d8:	4620      	mov	r0, r4
 800f4da:	bd70      	pop	{r4, r5, r6, pc}
 800f4dc:	2000aacc 	.word	0x2000aacc

0800f4e0 <_malloc_r>:
 800f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e4:	1ccd      	adds	r5, r1, #3
 800f4e6:	f025 0503 	bic.w	r5, r5, #3
 800f4ea:	3508      	adds	r5, #8
 800f4ec:	2d0c      	cmp	r5, #12
 800f4ee:	bf38      	it	cc
 800f4f0:	250c      	movcc	r5, #12
 800f4f2:	2d00      	cmp	r5, #0
 800f4f4:	4607      	mov	r7, r0
 800f4f6:	db01      	blt.n	800f4fc <_malloc_r+0x1c>
 800f4f8:	42a9      	cmp	r1, r5
 800f4fa:	d905      	bls.n	800f508 <_malloc_r+0x28>
 800f4fc:	230c      	movs	r3, #12
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	2600      	movs	r6, #0
 800f502:	4630      	mov	r0, r6
 800f504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f508:	4e2e      	ldr	r6, [pc, #184]	; (800f5c4 <_malloc_r+0xe4>)
 800f50a:	f000 ff1f 	bl	801034c <__malloc_lock>
 800f50e:	6833      	ldr	r3, [r6, #0]
 800f510:	461c      	mov	r4, r3
 800f512:	bb34      	cbnz	r4, 800f562 <_malloc_r+0x82>
 800f514:	4629      	mov	r1, r5
 800f516:	4638      	mov	r0, r7
 800f518:	f7ff ffc2 	bl	800f4a0 <sbrk_aligned>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	4604      	mov	r4, r0
 800f520:	d14d      	bne.n	800f5be <_malloc_r+0xde>
 800f522:	6834      	ldr	r4, [r6, #0]
 800f524:	4626      	mov	r6, r4
 800f526:	2e00      	cmp	r6, #0
 800f528:	d140      	bne.n	800f5ac <_malloc_r+0xcc>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	4631      	mov	r1, r6
 800f52e:	4638      	mov	r0, r7
 800f530:	eb04 0803 	add.w	r8, r4, r3
 800f534:	f000 fc92 	bl	800fe5c <_sbrk_r>
 800f538:	4580      	cmp	r8, r0
 800f53a:	d13a      	bne.n	800f5b2 <_malloc_r+0xd2>
 800f53c:	6821      	ldr	r1, [r4, #0]
 800f53e:	3503      	adds	r5, #3
 800f540:	1a6d      	subs	r5, r5, r1
 800f542:	f025 0503 	bic.w	r5, r5, #3
 800f546:	3508      	adds	r5, #8
 800f548:	2d0c      	cmp	r5, #12
 800f54a:	bf38      	it	cc
 800f54c:	250c      	movcc	r5, #12
 800f54e:	4629      	mov	r1, r5
 800f550:	4638      	mov	r0, r7
 800f552:	f7ff ffa5 	bl	800f4a0 <sbrk_aligned>
 800f556:	3001      	adds	r0, #1
 800f558:	d02b      	beq.n	800f5b2 <_malloc_r+0xd2>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	442b      	add	r3, r5
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	e00e      	b.n	800f580 <_malloc_r+0xa0>
 800f562:	6822      	ldr	r2, [r4, #0]
 800f564:	1b52      	subs	r2, r2, r5
 800f566:	d41e      	bmi.n	800f5a6 <_malloc_r+0xc6>
 800f568:	2a0b      	cmp	r2, #11
 800f56a:	d916      	bls.n	800f59a <_malloc_r+0xba>
 800f56c:	1961      	adds	r1, r4, r5
 800f56e:	42a3      	cmp	r3, r4
 800f570:	6025      	str	r5, [r4, #0]
 800f572:	bf18      	it	ne
 800f574:	6059      	strne	r1, [r3, #4]
 800f576:	6863      	ldr	r3, [r4, #4]
 800f578:	bf08      	it	eq
 800f57a:	6031      	streq	r1, [r6, #0]
 800f57c:	5162      	str	r2, [r4, r5]
 800f57e:	604b      	str	r3, [r1, #4]
 800f580:	4638      	mov	r0, r7
 800f582:	f104 060b 	add.w	r6, r4, #11
 800f586:	f000 fee7 	bl	8010358 <__malloc_unlock>
 800f58a:	f026 0607 	bic.w	r6, r6, #7
 800f58e:	1d23      	adds	r3, r4, #4
 800f590:	1af2      	subs	r2, r6, r3
 800f592:	d0b6      	beq.n	800f502 <_malloc_r+0x22>
 800f594:	1b9b      	subs	r3, r3, r6
 800f596:	50a3      	str	r3, [r4, r2]
 800f598:	e7b3      	b.n	800f502 <_malloc_r+0x22>
 800f59a:	6862      	ldr	r2, [r4, #4]
 800f59c:	42a3      	cmp	r3, r4
 800f59e:	bf0c      	ite	eq
 800f5a0:	6032      	streq	r2, [r6, #0]
 800f5a2:	605a      	strne	r2, [r3, #4]
 800f5a4:	e7ec      	b.n	800f580 <_malloc_r+0xa0>
 800f5a6:	4623      	mov	r3, r4
 800f5a8:	6864      	ldr	r4, [r4, #4]
 800f5aa:	e7b2      	b.n	800f512 <_malloc_r+0x32>
 800f5ac:	4634      	mov	r4, r6
 800f5ae:	6876      	ldr	r6, [r6, #4]
 800f5b0:	e7b9      	b.n	800f526 <_malloc_r+0x46>
 800f5b2:	230c      	movs	r3, #12
 800f5b4:	603b      	str	r3, [r7, #0]
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	f000 fece 	bl	8010358 <__malloc_unlock>
 800f5bc:	e7a1      	b.n	800f502 <_malloc_r+0x22>
 800f5be:	6025      	str	r5, [r4, #0]
 800f5c0:	e7de      	b.n	800f580 <_malloc_r+0xa0>
 800f5c2:	bf00      	nop
 800f5c4:	2000aac8 	.word	0x2000aac8

0800f5c8 <__ssputs_r>:
 800f5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5cc:	688e      	ldr	r6, [r1, #8]
 800f5ce:	429e      	cmp	r6, r3
 800f5d0:	4682      	mov	sl, r0
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	4690      	mov	r8, r2
 800f5d6:	461f      	mov	r7, r3
 800f5d8:	d838      	bhi.n	800f64c <__ssputs_r+0x84>
 800f5da:	898a      	ldrh	r2, [r1, #12]
 800f5dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5e0:	d032      	beq.n	800f648 <__ssputs_r+0x80>
 800f5e2:	6825      	ldr	r5, [r4, #0]
 800f5e4:	6909      	ldr	r1, [r1, #16]
 800f5e6:	eba5 0901 	sub.w	r9, r5, r1
 800f5ea:	6965      	ldr	r5, [r4, #20]
 800f5ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	444b      	add	r3, r9
 800f5f8:	106d      	asrs	r5, r5, #1
 800f5fa:	429d      	cmp	r5, r3
 800f5fc:	bf38      	it	cc
 800f5fe:	461d      	movcc	r5, r3
 800f600:	0553      	lsls	r3, r2, #21
 800f602:	d531      	bpl.n	800f668 <__ssputs_r+0xa0>
 800f604:	4629      	mov	r1, r5
 800f606:	f7ff ff6b 	bl	800f4e0 <_malloc_r>
 800f60a:	4606      	mov	r6, r0
 800f60c:	b950      	cbnz	r0, 800f624 <__ssputs_r+0x5c>
 800f60e:	230c      	movs	r3, #12
 800f610:	f8ca 3000 	str.w	r3, [sl]
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61a:	81a3      	strh	r3, [r4, #12]
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f624:	6921      	ldr	r1, [r4, #16]
 800f626:	464a      	mov	r2, r9
 800f628:	f7ff fd18 	bl	800f05c <memcpy>
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f636:	81a3      	strh	r3, [r4, #12]
 800f638:	6126      	str	r6, [r4, #16]
 800f63a:	6165      	str	r5, [r4, #20]
 800f63c:	444e      	add	r6, r9
 800f63e:	eba5 0509 	sub.w	r5, r5, r9
 800f642:	6026      	str	r6, [r4, #0]
 800f644:	60a5      	str	r5, [r4, #8]
 800f646:	463e      	mov	r6, r7
 800f648:	42be      	cmp	r6, r7
 800f64a:	d900      	bls.n	800f64e <__ssputs_r+0x86>
 800f64c:	463e      	mov	r6, r7
 800f64e:	6820      	ldr	r0, [r4, #0]
 800f650:	4632      	mov	r2, r6
 800f652:	4641      	mov	r1, r8
 800f654:	f7ff fd10 	bl	800f078 <memmove>
 800f658:	68a3      	ldr	r3, [r4, #8]
 800f65a:	1b9b      	subs	r3, r3, r6
 800f65c:	60a3      	str	r3, [r4, #8]
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	4433      	add	r3, r6
 800f662:	6023      	str	r3, [r4, #0]
 800f664:	2000      	movs	r0, #0
 800f666:	e7db      	b.n	800f620 <__ssputs_r+0x58>
 800f668:	462a      	mov	r2, r5
 800f66a:	f000 fe7b 	bl	8010364 <_realloc_r>
 800f66e:	4606      	mov	r6, r0
 800f670:	2800      	cmp	r0, #0
 800f672:	d1e1      	bne.n	800f638 <__ssputs_r+0x70>
 800f674:	6921      	ldr	r1, [r4, #16]
 800f676:	4650      	mov	r0, sl
 800f678:	f7ff fec6 	bl	800f408 <_free_r>
 800f67c:	e7c7      	b.n	800f60e <__ssputs_r+0x46>
	...

0800f680 <_svfiprintf_r>:
 800f680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f684:	4698      	mov	r8, r3
 800f686:	898b      	ldrh	r3, [r1, #12]
 800f688:	061b      	lsls	r3, r3, #24
 800f68a:	b09d      	sub	sp, #116	; 0x74
 800f68c:	4607      	mov	r7, r0
 800f68e:	460d      	mov	r5, r1
 800f690:	4614      	mov	r4, r2
 800f692:	d50e      	bpl.n	800f6b2 <_svfiprintf_r+0x32>
 800f694:	690b      	ldr	r3, [r1, #16]
 800f696:	b963      	cbnz	r3, 800f6b2 <_svfiprintf_r+0x32>
 800f698:	2140      	movs	r1, #64	; 0x40
 800f69a:	f7ff ff21 	bl	800f4e0 <_malloc_r>
 800f69e:	6028      	str	r0, [r5, #0]
 800f6a0:	6128      	str	r0, [r5, #16]
 800f6a2:	b920      	cbnz	r0, 800f6ae <_svfiprintf_r+0x2e>
 800f6a4:	230c      	movs	r3, #12
 800f6a6:	603b      	str	r3, [r7, #0]
 800f6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ac:	e0d1      	b.n	800f852 <_svfiprintf_r+0x1d2>
 800f6ae:	2340      	movs	r3, #64	; 0x40
 800f6b0:	616b      	str	r3, [r5, #20]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6b6:	2320      	movs	r3, #32
 800f6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6c0:	2330      	movs	r3, #48	; 0x30
 800f6c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f86c <_svfiprintf_r+0x1ec>
 800f6c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6ca:	f04f 0901 	mov.w	r9, #1
 800f6ce:	4623      	mov	r3, r4
 800f6d0:	469a      	mov	sl, r3
 800f6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6d6:	b10a      	cbz	r2, 800f6dc <_svfiprintf_r+0x5c>
 800f6d8:	2a25      	cmp	r2, #37	; 0x25
 800f6da:	d1f9      	bne.n	800f6d0 <_svfiprintf_r+0x50>
 800f6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800f6e0:	d00b      	beq.n	800f6fa <_svfiprintf_r+0x7a>
 800f6e2:	465b      	mov	r3, fp
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4638      	mov	r0, r7
 800f6ea:	f7ff ff6d 	bl	800f5c8 <__ssputs_r>
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	f000 80aa 	beq.w	800f848 <_svfiprintf_r+0x1c8>
 800f6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6f6:	445a      	add	r2, fp
 800f6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800f6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f000 80a2 	beq.w	800f848 <_svfiprintf_r+0x1c8>
 800f704:	2300      	movs	r3, #0
 800f706:	f04f 32ff 	mov.w	r2, #4294967295
 800f70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f70e:	f10a 0a01 	add.w	sl, sl, #1
 800f712:	9304      	str	r3, [sp, #16]
 800f714:	9307      	str	r3, [sp, #28]
 800f716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f71a:	931a      	str	r3, [sp, #104]	; 0x68
 800f71c:	4654      	mov	r4, sl
 800f71e:	2205      	movs	r2, #5
 800f720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f724:	4851      	ldr	r0, [pc, #324]	; (800f86c <_svfiprintf_r+0x1ec>)
 800f726:	f7f0 fd63 	bl	80001f0 <memchr>
 800f72a:	9a04      	ldr	r2, [sp, #16]
 800f72c:	b9d8      	cbnz	r0, 800f766 <_svfiprintf_r+0xe6>
 800f72e:	06d0      	lsls	r0, r2, #27
 800f730:	bf44      	itt	mi
 800f732:	2320      	movmi	r3, #32
 800f734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f738:	0711      	lsls	r1, r2, #28
 800f73a:	bf44      	itt	mi
 800f73c:	232b      	movmi	r3, #43	; 0x2b
 800f73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f742:	f89a 3000 	ldrb.w	r3, [sl]
 800f746:	2b2a      	cmp	r3, #42	; 0x2a
 800f748:	d015      	beq.n	800f776 <_svfiprintf_r+0xf6>
 800f74a:	9a07      	ldr	r2, [sp, #28]
 800f74c:	4654      	mov	r4, sl
 800f74e:	2000      	movs	r0, #0
 800f750:	f04f 0c0a 	mov.w	ip, #10
 800f754:	4621      	mov	r1, r4
 800f756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f75a:	3b30      	subs	r3, #48	; 0x30
 800f75c:	2b09      	cmp	r3, #9
 800f75e:	d94e      	bls.n	800f7fe <_svfiprintf_r+0x17e>
 800f760:	b1b0      	cbz	r0, 800f790 <_svfiprintf_r+0x110>
 800f762:	9207      	str	r2, [sp, #28]
 800f764:	e014      	b.n	800f790 <_svfiprintf_r+0x110>
 800f766:	eba0 0308 	sub.w	r3, r0, r8
 800f76a:	fa09 f303 	lsl.w	r3, r9, r3
 800f76e:	4313      	orrs	r3, r2
 800f770:	9304      	str	r3, [sp, #16]
 800f772:	46a2      	mov	sl, r4
 800f774:	e7d2      	b.n	800f71c <_svfiprintf_r+0x9c>
 800f776:	9b03      	ldr	r3, [sp, #12]
 800f778:	1d19      	adds	r1, r3, #4
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	9103      	str	r1, [sp, #12]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	bfbb      	ittet	lt
 800f782:	425b      	neglt	r3, r3
 800f784:	f042 0202 	orrlt.w	r2, r2, #2
 800f788:	9307      	strge	r3, [sp, #28]
 800f78a:	9307      	strlt	r3, [sp, #28]
 800f78c:	bfb8      	it	lt
 800f78e:	9204      	strlt	r2, [sp, #16]
 800f790:	7823      	ldrb	r3, [r4, #0]
 800f792:	2b2e      	cmp	r3, #46	; 0x2e
 800f794:	d10c      	bne.n	800f7b0 <_svfiprintf_r+0x130>
 800f796:	7863      	ldrb	r3, [r4, #1]
 800f798:	2b2a      	cmp	r3, #42	; 0x2a
 800f79a:	d135      	bne.n	800f808 <_svfiprintf_r+0x188>
 800f79c:	9b03      	ldr	r3, [sp, #12]
 800f79e:	1d1a      	adds	r2, r3, #4
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	9203      	str	r2, [sp, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	bfb8      	it	lt
 800f7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7ac:	3402      	adds	r4, #2
 800f7ae:	9305      	str	r3, [sp, #20]
 800f7b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f87c <_svfiprintf_r+0x1fc>
 800f7b4:	7821      	ldrb	r1, [r4, #0]
 800f7b6:	2203      	movs	r2, #3
 800f7b8:	4650      	mov	r0, sl
 800f7ba:	f7f0 fd19 	bl	80001f0 <memchr>
 800f7be:	b140      	cbz	r0, 800f7d2 <_svfiprintf_r+0x152>
 800f7c0:	2340      	movs	r3, #64	; 0x40
 800f7c2:	eba0 000a 	sub.w	r0, r0, sl
 800f7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800f7ca:	9b04      	ldr	r3, [sp, #16]
 800f7cc:	4303      	orrs	r3, r0
 800f7ce:	3401      	adds	r4, #1
 800f7d0:	9304      	str	r3, [sp, #16]
 800f7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7d6:	4826      	ldr	r0, [pc, #152]	; (800f870 <_svfiprintf_r+0x1f0>)
 800f7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7dc:	2206      	movs	r2, #6
 800f7de:	f7f0 fd07 	bl	80001f0 <memchr>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d038      	beq.n	800f858 <_svfiprintf_r+0x1d8>
 800f7e6:	4b23      	ldr	r3, [pc, #140]	; (800f874 <_svfiprintf_r+0x1f4>)
 800f7e8:	bb1b      	cbnz	r3, 800f832 <_svfiprintf_r+0x1b2>
 800f7ea:	9b03      	ldr	r3, [sp, #12]
 800f7ec:	3307      	adds	r3, #7
 800f7ee:	f023 0307 	bic.w	r3, r3, #7
 800f7f2:	3308      	adds	r3, #8
 800f7f4:	9303      	str	r3, [sp, #12]
 800f7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f8:	4433      	add	r3, r6
 800f7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f7fc:	e767      	b.n	800f6ce <_svfiprintf_r+0x4e>
 800f7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f802:	460c      	mov	r4, r1
 800f804:	2001      	movs	r0, #1
 800f806:	e7a5      	b.n	800f754 <_svfiprintf_r+0xd4>
 800f808:	2300      	movs	r3, #0
 800f80a:	3401      	adds	r4, #1
 800f80c:	9305      	str	r3, [sp, #20]
 800f80e:	4619      	mov	r1, r3
 800f810:	f04f 0c0a 	mov.w	ip, #10
 800f814:	4620      	mov	r0, r4
 800f816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f81a:	3a30      	subs	r2, #48	; 0x30
 800f81c:	2a09      	cmp	r2, #9
 800f81e:	d903      	bls.n	800f828 <_svfiprintf_r+0x1a8>
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0c5      	beq.n	800f7b0 <_svfiprintf_r+0x130>
 800f824:	9105      	str	r1, [sp, #20]
 800f826:	e7c3      	b.n	800f7b0 <_svfiprintf_r+0x130>
 800f828:	fb0c 2101 	mla	r1, ip, r1, r2
 800f82c:	4604      	mov	r4, r0
 800f82e:	2301      	movs	r3, #1
 800f830:	e7f0      	b.n	800f814 <_svfiprintf_r+0x194>
 800f832:	ab03      	add	r3, sp, #12
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	462a      	mov	r2, r5
 800f838:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <_svfiprintf_r+0x1f8>)
 800f83a:	a904      	add	r1, sp, #16
 800f83c:	4638      	mov	r0, r7
 800f83e:	f3af 8000 	nop.w
 800f842:	1c42      	adds	r2, r0, #1
 800f844:	4606      	mov	r6, r0
 800f846:	d1d6      	bne.n	800f7f6 <_svfiprintf_r+0x176>
 800f848:	89ab      	ldrh	r3, [r5, #12]
 800f84a:	065b      	lsls	r3, r3, #25
 800f84c:	f53f af2c 	bmi.w	800f6a8 <_svfiprintf_r+0x28>
 800f850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f852:	b01d      	add	sp, #116	; 0x74
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f858:	ab03      	add	r3, sp, #12
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	462a      	mov	r2, r5
 800f85e:	4b06      	ldr	r3, [pc, #24]	; (800f878 <_svfiprintf_r+0x1f8>)
 800f860:	a904      	add	r1, sp, #16
 800f862:	4638      	mov	r0, r7
 800f864:	f000 f9d4 	bl	800fc10 <_printf_i>
 800f868:	e7eb      	b.n	800f842 <_svfiprintf_r+0x1c2>
 800f86a:	bf00      	nop
 800f86c:	080130f4 	.word	0x080130f4
 800f870:	080130fe 	.word	0x080130fe
 800f874:	00000000 	.word	0x00000000
 800f878:	0800f5c9 	.word	0x0800f5c9
 800f87c:	080130fa 	.word	0x080130fa

0800f880 <__sfputc_r>:
 800f880:	6893      	ldr	r3, [r2, #8]
 800f882:	3b01      	subs	r3, #1
 800f884:	2b00      	cmp	r3, #0
 800f886:	b410      	push	{r4}
 800f888:	6093      	str	r3, [r2, #8]
 800f88a:	da08      	bge.n	800f89e <__sfputc_r+0x1e>
 800f88c:	6994      	ldr	r4, [r2, #24]
 800f88e:	42a3      	cmp	r3, r4
 800f890:	db01      	blt.n	800f896 <__sfputc_r+0x16>
 800f892:	290a      	cmp	r1, #10
 800f894:	d103      	bne.n	800f89e <__sfputc_r+0x1e>
 800f896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f89a:	f000 bb33 	b.w	800ff04 <__swbuf_r>
 800f89e:	6813      	ldr	r3, [r2, #0]
 800f8a0:	1c58      	adds	r0, r3, #1
 800f8a2:	6010      	str	r0, [r2, #0]
 800f8a4:	7019      	strb	r1, [r3, #0]
 800f8a6:	4608      	mov	r0, r1
 800f8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <__sfputs_r>:
 800f8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	460f      	mov	r7, r1
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	18d5      	adds	r5, r2, r3
 800f8b8:	42ac      	cmp	r4, r5
 800f8ba:	d101      	bne.n	800f8c0 <__sfputs_r+0x12>
 800f8bc:	2000      	movs	r0, #0
 800f8be:	e007      	b.n	800f8d0 <__sfputs_r+0x22>
 800f8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c4:	463a      	mov	r2, r7
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f7ff ffda 	bl	800f880 <__sfputc_r>
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	d1f3      	bne.n	800f8b8 <__sfputs_r+0xa>
 800f8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8d4 <_vfiprintf_r>:
 800f8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d8:	460d      	mov	r5, r1
 800f8da:	b09d      	sub	sp, #116	; 0x74
 800f8dc:	4614      	mov	r4, r2
 800f8de:	4698      	mov	r8, r3
 800f8e0:	4606      	mov	r6, r0
 800f8e2:	b118      	cbz	r0, 800f8ec <_vfiprintf_r+0x18>
 800f8e4:	6983      	ldr	r3, [r0, #24]
 800f8e6:	b90b      	cbnz	r3, 800f8ec <_vfiprintf_r+0x18>
 800f8e8:	f7ff fcd4 	bl	800f294 <__sinit>
 800f8ec:	4b89      	ldr	r3, [pc, #548]	; (800fb14 <_vfiprintf_r+0x240>)
 800f8ee:	429d      	cmp	r5, r3
 800f8f0:	d11b      	bne.n	800f92a <_vfiprintf_r+0x56>
 800f8f2:	6875      	ldr	r5, [r6, #4]
 800f8f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8f6:	07d9      	lsls	r1, r3, #31
 800f8f8:	d405      	bmi.n	800f906 <_vfiprintf_r+0x32>
 800f8fa:	89ab      	ldrh	r3, [r5, #12]
 800f8fc:	059a      	lsls	r2, r3, #22
 800f8fe:	d402      	bmi.n	800f906 <_vfiprintf_r+0x32>
 800f900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f902:	f7ff fd77 	bl	800f3f4 <__retarget_lock_acquire_recursive>
 800f906:	89ab      	ldrh	r3, [r5, #12]
 800f908:	071b      	lsls	r3, r3, #28
 800f90a:	d501      	bpl.n	800f910 <_vfiprintf_r+0x3c>
 800f90c:	692b      	ldr	r3, [r5, #16]
 800f90e:	b9eb      	cbnz	r3, 800f94c <_vfiprintf_r+0x78>
 800f910:	4629      	mov	r1, r5
 800f912:	4630      	mov	r0, r6
 800f914:	f000 fb5a 	bl	800ffcc <__swsetup_r>
 800f918:	b1c0      	cbz	r0, 800f94c <_vfiprintf_r+0x78>
 800f91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f91c:	07dc      	lsls	r4, r3, #31
 800f91e:	d50e      	bpl.n	800f93e <_vfiprintf_r+0x6a>
 800f920:	f04f 30ff 	mov.w	r0, #4294967295
 800f924:	b01d      	add	sp, #116	; 0x74
 800f926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f92a:	4b7b      	ldr	r3, [pc, #492]	; (800fb18 <_vfiprintf_r+0x244>)
 800f92c:	429d      	cmp	r5, r3
 800f92e:	d101      	bne.n	800f934 <_vfiprintf_r+0x60>
 800f930:	68b5      	ldr	r5, [r6, #8]
 800f932:	e7df      	b.n	800f8f4 <_vfiprintf_r+0x20>
 800f934:	4b79      	ldr	r3, [pc, #484]	; (800fb1c <_vfiprintf_r+0x248>)
 800f936:	429d      	cmp	r5, r3
 800f938:	bf08      	it	eq
 800f93a:	68f5      	ldreq	r5, [r6, #12]
 800f93c:	e7da      	b.n	800f8f4 <_vfiprintf_r+0x20>
 800f93e:	89ab      	ldrh	r3, [r5, #12]
 800f940:	0598      	lsls	r0, r3, #22
 800f942:	d4ed      	bmi.n	800f920 <_vfiprintf_r+0x4c>
 800f944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f946:	f7ff fd56 	bl	800f3f6 <__retarget_lock_release_recursive>
 800f94a:	e7e9      	b.n	800f920 <_vfiprintf_r+0x4c>
 800f94c:	2300      	movs	r3, #0
 800f94e:	9309      	str	r3, [sp, #36]	; 0x24
 800f950:	2320      	movs	r3, #32
 800f952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f956:	f8cd 800c 	str.w	r8, [sp, #12]
 800f95a:	2330      	movs	r3, #48	; 0x30
 800f95c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb20 <_vfiprintf_r+0x24c>
 800f960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f964:	f04f 0901 	mov.w	r9, #1
 800f968:	4623      	mov	r3, r4
 800f96a:	469a      	mov	sl, r3
 800f96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f970:	b10a      	cbz	r2, 800f976 <_vfiprintf_r+0xa2>
 800f972:	2a25      	cmp	r2, #37	; 0x25
 800f974:	d1f9      	bne.n	800f96a <_vfiprintf_r+0x96>
 800f976:	ebba 0b04 	subs.w	fp, sl, r4
 800f97a:	d00b      	beq.n	800f994 <_vfiprintf_r+0xc0>
 800f97c:	465b      	mov	r3, fp
 800f97e:	4622      	mov	r2, r4
 800f980:	4629      	mov	r1, r5
 800f982:	4630      	mov	r0, r6
 800f984:	f7ff ff93 	bl	800f8ae <__sfputs_r>
 800f988:	3001      	adds	r0, #1
 800f98a:	f000 80aa 	beq.w	800fae2 <_vfiprintf_r+0x20e>
 800f98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f990:	445a      	add	r2, fp
 800f992:	9209      	str	r2, [sp, #36]	; 0x24
 800f994:	f89a 3000 	ldrb.w	r3, [sl]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f000 80a2 	beq.w	800fae2 <_vfiprintf_r+0x20e>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9a8:	f10a 0a01 	add.w	sl, sl, #1
 800f9ac:	9304      	str	r3, [sp, #16]
 800f9ae:	9307      	str	r3, [sp, #28]
 800f9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800f9b6:	4654      	mov	r4, sl
 800f9b8:	2205      	movs	r2, #5
 800f9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9be:	4858      	ldr	r0, [pc, #352]	; (800fb20 <_vfiprintf_r+0x24c>)
 800f9c0:	f7f0 fc16 	bl	80001f0 <memchr>
 800f9c4:	9a04      	ldr	r2, [sp, #16]
 800f9c6:	b9d8      	cbnz	r0, 800fa00 <_vfiprintf_r+0x12c>
 800f9c8:	06d1      	lsls	r1, r2, #27
 800f9ca:	bf44      	itt	mi
 800f9cc:	2320      	movmi	r3, #32
 800f9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9d2:	0713      	lsls	r3, r2, #28
 800f9d4:	bf44      	itt	mi
 800f9d6:	232b      	movmi	r3, #43	; 0x2b
 800f9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e2:	d015      	beq.n	800fa10 <_vfiprintf_r+0x13c>
 800f9e4:	9a07      	ldr	r2, [sp, #28]
 800f9e6:	4654      	mov	r4, sl
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	f04f 0c0a 	mov.w	ip, #10
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9f4:	3b30      	subs	r3, #48	; 0x30
 800f9f6:	2b09      	cmp	r3, #9
 800f9f8:	d94e      	bls.n	800fa98 <_vfiprintf_r+0x1c4>
 800f9fa:	b1b0      	cbz	r0, 800fa2a <_vfiprintf_r+0x156>
 800f9fc:	9207      	str	r2, [sp, #28]
 800f9fe:	e014      	b.n	800fa2a <_vfiprintf_r+0x156>
 800fa00:	eba0 0308 	sub.w	r3, r0, r8
 800fa04:	fa09 f303 	lsl.w	r3, r9, r3
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	9304      	str	r3, [sp, #16]
 800fa0c:	46a2      	mov	sl, r4
 800fa0e:	e7d2      	b.n	800f9b6 <_vfiprintf_r+0xe2>
 800fa10:	9b03      	ldr	r3, [sp, #12]
 800fa12:	1d19      	adds	r1, r3, #4
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	9103      	str	r1, [sp, #12]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	bfbb      	ittet	lt
 800fa1c:	425b      	neglt	r3, r3
 800fa1e:	f042 0202 	orrlt.w	r2, r2, #2
 800fa22:	9307      	strge	r3, [sp, #28]
 800fa24:	9307      	strlt	r3, [sp, #28]
 800fa26:	bfb8      	it	lt
 800fa28:	9204      	strlt	r2, [sp, #16]
 800fa2a:	7823      	ldrb	r3, [r4, #0]
 800fa2c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa2e:	d10c      	bne.n	800fa4a <_vfiprintf_r+0x176>
 800fa30:	7863      	ldrb	r3, [r4, #1]
 800fa32:	2b2a      	cmp	r3, #42	; 0x2a
 800fa34:	d135      	bne.n	800faa2 <_vfiprintf_r+0x1ce>
 800fa36:	9b03      	ldr	r3, [sp, #12]
 800fa38:	1d1a      	adds	r2, r3, #4
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	9203      	str	r2, [sp, #12]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	bfb8      	it	lt
 800fa42:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa46:	3402      	adds	r4, #2
 800fa48:	9305      	str	r3, [sp, #20]
 800fa4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb30 <_vfiprintf_r+0x25c>
 800fa4e:	7821      	ldrb	r1, [r4, #0]
 800fa50:	2203      	movs	r2, #3
 800fa52:	4650      	mov	r0, sl
 800fa54:	f7f0 fbcc 	bl	80001f0 <memchr>
 800fa58:	b140      	cbz	r0, 800fa6c <_vfiprintf_r+0x198>
 800fa5a:	2340      	movs	r3, #64	; 0x40
 800fa5c:	eba0 000a 	sub.w	r0, r0, sl
 800fa60:	fa03 f000 	lsl.w	r0, r3, r0
 800fa64:	9b04      	ldr	r3, [sp, #16]
 800fa66:	4303      	orrs	r3, r0
 800fa68:	3401      	adds	r4, #1
 800fa6a:	9304      	str	r3, [sp, #16]
 800fa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa70:	482c      	ldr	r0, [pc, #176]	; (800fb24 <_vfiprintf_r+0x250>)
 800fa72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa76:	2206      	movs	r2, #6
 800fa78:	f7f0 fbba 	bl	80001f0 <memchr>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d03f      	beq.n	800fb00 <_vfiprintf_r+0x22c>
 800fa80:	4b29      	ldr	r3, [pc, #164]	; (800fb28 <_vfiprintf_r+0x254>)
 800fa82:	bb1b      	cbnz	r3, 800facc <_vfiprintf_r+0x1f8>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	3307      	adds	r3, #7
 800fa88:	f023 0307 	bic.w	r3, r3, #7
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	9303      	str	r3, [sp, #12]
 800fa90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa92:	443b      	add	r3, r7
 800fa94:	9309      	str	r3, [sp, #36]	; 0x24
 800fa96:	e767      	b.n	800f968 <_vfiprintf_r+0x94>
 800fa98:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	2001      	movs	r0, #1
 800faa0:	e7a5      	b.n	800f9ee <_vfiprintf_r+0x11a>
 800faa2:	2300      	movs	r3, #0
 800faa4:	3401      	adds	r4, #1
 800faa6:	9305      	str	r3, [sp, #20]
 800faa8:	4619      	mov	r1, r3
 800faaa:	f04f 0c0a 	mov.w	ip, #10
 800faae:	4620      	mov	r0, r4
 800fab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fab4:	3a30      	subs	r2, #48	; 0x30
 800fab6:	2a09      	cmp	r2, #9
 800fab8:	d903      	bls.n	800fac2 <_vfiprintf_r+0x1ee>
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0c5      	beq.n	800fa4a <_vfiprintf_r+0x176>
 800fabe:	9105      	str	r1, [sp, #20]
 800fac0:	e7c3      	b.n	800fa4a <_vfiprintf_r+0x176>
 800fac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fac6:	4604      	mov	r4, r0
 800fac8:	2301      	movs	r3, #1
 800faca:	e7f0      	b.n	800faae <_vfiprintf_r+0x1da>
 800facc:	ab03      	add	r3, sp, #12
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	462a      	mov	r2, r5
 800fad2:	4b16      	ldr	r3, [pc, #88]	; (800fb2c <_vfiprintf_r+0x258>)
 800fad4:	a904      	add	r1, sp, #16
 800fad6:	4630      	mov	r0, r6
 800fad8:	f3af 8000 	nop.w
 800fadc:	4607      	mov	r7, r0
 800fade:	1c78      	adds	r0, r7, #1
 800fae0:	d1d6      	bne.n	800fa90 <_vfiprintf_r+0x1bc>
 800fae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fae4:	07d9      	lsls	r1, r3, #31
 800fae6:	d405      	bmi.n	800faf4 <_vfiprintf_r+0x220>
 800fae8:	89ab      	ldrh	r3, [r5, #12]
 800faea:	059a      	lsls	r2, r3, #22
 800faec:	d402      	bmi.n	800faf4 <_vfiprintf_r+0x220>
 800faee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faf0:	f7ff fc81 	bl	800f3f6 <__retarget_lock_release_recursive>
 800faf4:	89ab      	ldrh	r3, [r5, #12]
 800faf6:	065b      	lsls	r3, r3, #25
 800faf8:	f53f af12 	bmi.w	800f920 <_vfiprintf_r+0x4c>
 800fafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fafe:	e711      	b.n	800f924 <_vfiprintf_r+0x50>
 800fb00:	ab03      	add	r3, sp, #12
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	462a      	mov	r2, r5
 800fb06:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <_vfiprintf_r+0x258>)
 800fb08:	a904      	add	r1, sp, #16
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	f000 f880 	bl	800fc10 <_printf_i>
 800fb10:	e7e4      	b.n	800fadc <_vfiprintf_r+0x208>
 800fb12:	bf00      	nop
 800fb14:	080130b4 	.word	0x080130b4
 800fb18:	080130d4 	.word	0x080130d4
 800fb1c:	08013094 	.word	0x08013094
 800fb20:	080130f4 	.word	0x080130f4
 800fb24:	080130fe 	.word	0x080130fe
 800fb28:	00000000 	.word	0x00000000
 800fb2c:	0800f8af 	.word	0x0800f8af
 800fb30:	080130fa 	.word	0x080130fa

0800fb34 <_printf_common>:
 800fb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb38:	4616      	mov	r6, r2
 800fb3a:	4699      	mov	r9, r3
 800fb3c:	688a      	ldr	r2, [r1, #8]
 800fb3e:	690b      	ldr	r3, [r1, #16]
 800fb40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb44:	4293      	cmp	r3, r2
 800fb46:	bfb8      	it	lt
 800fb48:	4613      	movlt	r3, r2
 800fb4a:	6033      	str	r3, [r6, #0]
 800fb4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb50:	4607      	mov	r7, r0
 800fb52:	460c      	mov	r4, r1
 800fb54:	b10a      	cbz	r2, 800fb5a <_printf_common+0x26>
 800fb56:	3301      	adds	r3, #1
 800fb58:	6033      	str	r3, [r6, #0]
 800fb5a:	6823      	ldr	r3, [r4, #0]
 800fb5c:	0699      	lsls	r1, r3, #26
 800fb5e:	bf42      	ittt	mi
 800fb60:	6833      	ldrmi	r3, [r6, #0]
 800fb62:	3302      	addmi	r3, #2
 800fb64:	6033      	strmi	r3, [r6, #0]
 800fb66:	6825      	ldr	r5, [r4, #0]
 800fb68:	f015 0506 	ands.w	r5, r5, #6
 800fb6c:	d106      	bne.n	800fb7c <_printf_common+0x48>
 800fb6e:	f104 0a19 	add.w	sl, r4, #25
 800fb72:	68e3      	ldr	r3, [r4, #12]
 800fb74:	6832      	ldr	r2, [r6, #0]
 800fb76:	1a9b      	subs	r3, r3, r2
 800fb78:	42ab      	cmp	r3, r5
 800fb7a:	dc26      	bgt.n	800fbca <_printf_common+0x96>
 800fb7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb80:	1e13      	subs	r3, r2, #0
 800fb82:	6822      	ldr	r2, [r4, #0]
 800fb84:	bf18      	it	ne
 800fb86:	2301      	movne	r3, #1
 800fb88:	0692      	lsls	r2, r2, #26
 800fb8a:	d42b      	bmi.n	800fbe4 <_printf_common+0xb0>
 800fb8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb90:	4649      	mov	r1, r9
 800fb92:	4638      	mov	r0, r7
 800fb94:	47c0      	blx	r8
 800fb96:	3001      	adds	r0, #1
 800fb98:	d01e      	beq.n	800fbd8 <_printf_common+0xa4>
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	68e5      	ldr	r5, [r4, #12]
 800fb9e:	6832      	ldr	r2, [r6, #0]
 800fba0:	f003 0306 	and.w	r3, r3, #6
 800fba4:	2b04      	cmp	r3, #4
 800fba6:	bf08      	it	eq
 800fba8:	1aad      	subeq	r5, r5, r2
 800fbaa:	68a3      	ldr	r3, [r4, #8]
 800fbac:	6922      	ldr	r2, [r4, #16]
 800fbae:	bf0c      	ite	eq
 800fbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbb4:	2500      	movne	r5, #0
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	bfc4      	itt	gt
 800fbba:	1a9b      	subgt	r3, r3, r2
 800fbbc:	18ed      	addgt	r5, r5, r3
 800fbbe:	2600      	movs	r6, #0
 800fbc0:	341a      	adds	r4, #26
 800fbc2:	42b5      	cmp	r5, r6
 800fbc4:	d11a      	bne.n	800fbfc <_printf_common+0xc8>
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	e008      	b.n	800fbdc <_printf_common+0xa8>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	4652      	mov	r2, sl
 800fbce:	4649      	mov	r1, r9
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	47c0      	blx	r8
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d103      	bne.n	800fbe0 <_printf_common+0xac>
 800fbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe0:	3501      	adds	r5, #1
 800fbe2:	e7c6      	b.n	800fb72 <_printf_common+0x3e>
 800fbe4:	18e1      	adds	r1, r4, r3
 800fbe6:	1c5a      	adds	r2, r3, #1
 800fbe8:	2030      	movs	r0, #48	; 0x30
 800fbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbee:	4422      	add	r2, r4
 800fbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbf8:	3302      	adds	r3, #2
 800fbfa:	e7c7      	b.n	800fb8c <_printf_common+0x58>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4649      	mov	r1, r9
 800fc02:	4638      	mov	r0, r7
 800fc04:	47c0      	blx	r8
 800fc06:	3001      	adds	r0, #1
 800fc08:	d0e6      	beq.n	800fbd8 <_printf_common+0xa4>
 800fc0a:	3601      	adds	r6, #1
 800fc0c:	e7d9      	b.n	800fbc2 <_printf_common+0x8e>
	...

0800fc10 <_printf_i>:
 800fc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc14:	7e0f      	ldrb	r7, [r1, #24]
 800fc16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc18:	2f78      	cmp	r7, #120	; 0x78
 800fc1a:	4691      	mov	r9, r2
 800fc1c:	4680      	mov	r8, r0
 800fc1e:	460c      	mov	r4, r1
 800fc20:	469a      	mov	sl, r3
 800fc22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc26:	d807      	bhi.n	800fc38 <_printf_i+0x28>
 800fc28:	2f62      	cmp	r7, #98	; 0x62
 800fc2a:	d80a      	bhi.n	800fc42 <_printf_i+0x32>
 800fc2c:	2f00      	cmp	r7, #0
 800fc2e:	f000 80d8 	beq.w	800fde2 <_printf_i+0x1d2>
 800fc32:	2f58      	cmp	r7, #88	; 0x58
 800fc34:	f000 80a3 	beq.w	800fd7e <_printf_i+0x16e>
 800fc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc40:	e03a      	b.n	800fcb8 <_printf_i+0xa8>
 800fc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc46:	2b15      	cmp	r3, #21
 800fc48:	d8f6      	bhi.n	800fc38 <_printf_i+0x28>
 800fc4a:	a101      	add	r1, pc, #4	; (adr r1, 800fc50 <_printf_i+0x40>)
 800fc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc50:	0800fca9 	.word	0x0800fca9
 800fc54:	0800fcbd 	.word	0x0800fcbd
 800fc58:	0800fc39 	.word	0x0800fc39
 800fc5c:	0800fc39 	.word	0x0800fc39
 800fc60:	0800fc39 	.word	0x0800fc39
 800fc64:	0800fc39 	.word	0x0800fc39
 800fc68:	0800fcbd 	.word	0x0800fcbd
 800fc6c:	0800fc39 	.word	0x0800fc39
 800fc70:	0800fc39 	.word	0x0800fc39
 800fc74:	0800fc39 	.word	0x0800fc39
 800fc78:	0800fc39 	.word	0x0800fc39
 800fc7c:	0800fdc9 	.word	0x0800fdc9
 800fc80:	0800fced 	.word	0x0800fced
 800fc84:	0800fdab 	.word	0x0800fdab
 800fc88:	0800fc39 	.word	0x0800fc39
 800fc8c:	0800fc39 	.word	0x0800fc39
 800fc90:	0800fdeb 	.word	0x0800fdeb
 800fc94:	0800fc39 	.word	0x0800fc39
 800fc98:	0800fced 	.word	0x0800fced
 800fc9c:	0800fc39 	.word	0x0800fc39
 800fca0:	0800fc39 	.word	0x0800fc39
 800fca4:	0800fdb3 	.word	0x0800fdb3
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	1d1a      	adds	r2, r3, #4
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	602a      	str	r2, [r5, #0]
 800fcb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcb8:	2301      	movs	r3, #1
 800fcba:	e0a3      	b.n	800fe04 <_printf_i+0x1f4>
 800fcbc:	6820      	ldr	r0, [r4, #0]
 800fcbe:	6829      	ldr	r1, [r5, #0]
 800fcc0:	0606      	lsls	r6, r0, #24
 800fcc2:	f101 0304 	add.w	r3, r1, #4
 800fcc6:	d50a      	bpl.n	800fcde <_printf_i+0xce>
 800fcc8:	680e      	ldr	r6, [r1, #0]
 800fcca:	602b      	str	r3, [r5, #0]
 800fccc:	2e00      	cmp	r6, #0
 800fcce:	da03      	bge.n	800fcd8 <_printf_i+0xc8>
 800fcd0:	232d      	movs	r3, #45	; 0x2d
 800fcd2:	4276      	negs	r6, r6
 800fcd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcd8:	485e      	ldr	r0, [pc, #376]	; (800fe54 <_printf_i+0x244>)
 800fcda:	230a      	movs	r3, #10
 800fcdc:	e019      	b.n	800fd12 <_printf_i+0x102>
 800fcde:	680e      	ldr	r6, [r1, #0]
 800fce0:	602b      	str	r3, [r5, #0]
 800fce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fce6:	bf18      	it	ne
 800fce8:	b236      	sxthne	r6, r6
 800fcea:	e7ef      	b.n	800fccc <_printf_i+0xbc>
 800fcec:	682b      	ldr	r3, [r5, #0]
 800fcee:	6820      	ldr	r0, [r4, #0]
 800fcf0:	1d19      	adds	r1, r3, #4
 800fcf2:	6029      	str	r1, [r5, #0]
 800fcf4:	0601      	lsls	r1, r0, #24
 800fcf6:	d501      	bpl.n	800fcfc <_printf_i+0xec>
 800fcf8:	681e      	ldr	r6, [r3, #0]
 800fcfa:	e002      	b.n	800fd02 <_printf_i+0xf2>
 800fcfc:	0646      	lsls	r6, r0, #25
 800fcfe:	d5fb      	bpl.n	800fcf8 <_printf_i+0xe8>
 800fd00:	881e      	ldrh	r6, [r3, #0]
 800fd02:	4854      	ldr	r0, [pc, #336]	; (800fe54 <_printf_i+0x244>)
 800fd04:	2f6f      	cmp	r7, #111	; 0x6f
 800fd06:	bf0c      	ite	eq
 800fd08:	2308      	moveq	r3, #8
 800fd0a:	230a      	movne	r3, #10
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd12:	6865      	ldr	r5, [r4, #4]
 800fd14:	60a5      	str	r5, [r4, #8]
 800fd16:	2d00      	cmp	r5, #0
 800fd18:	bfa2      	ittt	ge
 800fd1a:	6821      	ldrge	r1, [r4, #0]
 800fd1c:	f021 0104 	bicge.w	r1, r1, #4
 800fd20:	6021      	strge	r1, [r4, #0]
 800fd22:	b90e      	cbnz	r6, 800fd28 <_printf_i+0x118>
 800fd24:	2d00      	cmp	r5, #0
 800fd26:	d04d      	beq.n	800fdc4 <_printf_i+0x1b4>
 800fd28:	4615      	mov	r5, r2
 800fd2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd2e:	fb03 6711 	mls	r7, r3, r1, r6
 800fd32:	5dc7      	ldrb	r7, [r0, r7]
 800fd34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd38:	4637      	mov	r7, r6
 800fd3a:	42bb      	cmp	r3, r7
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	d9f4      	bls.n	800fd2a <_printf_i+0x11a>
 800fd40:	2b08      	cmp	r3, #8
 800fd42:	d10b      	bne.n	800fd5c <_printf_i+0x14c>
 800fd44:	6823      	ldr	r3, [r4, #0]
 800fd46:	07de      	lsls	r6, r3, #31
 800fd48:	d508      	bpl.n	800fd5c <_printf_i+0x14c>
 800fd4a:	6923      	ldr	r3, [r4, #16]
 800fd4c:	6861      	ldr	r1, [r4, #4]
 800fd4e:	4299      	cmp	r1, r3
 800fd50:	bfde      	ittt	le
 800fd52:	2330      	movle	r3, #48	; 0x30
 800fd54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd5c:	1b52      	subs	r2, r2, r5
 800fd5e:	6122      	str	r2, [r4, #16]
 800fd60:	f8cd a000 	str.w	sl, [sp]
 800fd64:	464b      	mov	r3, r9
 800fd66:	aa03      	add	r2, sp, #12
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4640      	mov	r0, r8
 800fd6c:	f7ff fee2 	bl	800fb34 <_printf_common>
 800fd70:	3001      	adds	r0, #1
 800fd72:	d14c      	bne.n	800fe0e <_printf_i+0x1fe>
 800fd74:	f04f 30ff 	mov.w	r0, #4294967295
 800fd78:	b004      	add	sp, #16
 800fd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7e:	4835      	ldr	r0, [pc, #212]	; (800fe54 <_printf_i+0x244>)
 800fd80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd84:	6829      	ldr	r1, [r5, #0]
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd8c:	6029      	str	r1, [r5, #0]
 800fd8e:	061d      	lsls	r5, r3, #24
 800fd90:	d514      	bpl.n	800fdbc <_printf_i+0x1ac>
 800fd92:	07df      	lsls	r7, r3, #31
 800fd94:	bf44      	itt	mi
 800fd96:	f043 0320 	orrmi.w	r3, r3, #32
 800fd9a:	6023      	strmi	r3, [r4, #0]
 800fd9c:	b91e      	cbnz	r6, 800fda6 <_printf_i+0x196>
 800fd9e:	6823      	ldr	r3, [r4, #0]
 800fda0:	f023 0320 	bic.w	r3, r3, #32
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	2310      	movs	r3, #16
 800fda8:	e7b0      	b.n	800fd0c <_printf_i+0xfc>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	f043 0320 	orr.w	r3, r3, #32
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	2378      	movs	r3, #120	; 0x78
 800fdb4:	4828      	ldr	r0, [pc, #160]	; (800fe58 <_printf_i+0x248>)
 800fdb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdba:	e7e3      	b.n	800fd84 <_printf_i+0x174>
 800fdbc:	0659      	lsls	r1, r3, #25
 800fdbe:	bf48      	it	mi
 800fdc0:	b2b6      	uxthmi	r6, r6
 800fdc2:	e7e6      	b.n	800fd92 <_printf_i+0x182>
 800fdc4:	4615      	mov	r5, r2
 800fdc6:	e7bb      	b.n	800fd40 <_printf_i+0x130>
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	6826      	ldr	r6, [r4, #0]
 800fdcc:	6961      	ldr	r1, [r4, #20]
 800fdce:	1d18      	adds	r0, r3, #4
 800fdd0:	6028      	str	r0, [r5, #0]
 800fdd2:	0635      	lsls	r5, r6, #24
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	d501      	bpl.n	800fddc <_printf_i+0x1cc>
 800fdd8:	6019      	str	r1, [r3, #0]
 800fdda:	e002      	b.n	800fde2 <_printf_i+0x1d2>
 800fddc:	0670      	lsls	r0, r6, #25
 800fdde:	d5fb      	bpl.n	800fdd8 <_printf_i+0x1c8>
 800fde0:	8019      	strh	r1, [r3, #0]
 800fde2:	2300      	movs	r3, #0
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	4615      	mov	r5, r2
 800fde8:	e7ba      	b.n	800fd60 <_printf_i+0x150>
 800fdea:	682b      	ldr	r3, [r5, #0]
 800fdec:	1d1a      	adds	r2, r3, #4
 800fdee:	602a      	str	r2, [r5, #0]
 800fdf0:	681d      	ldr	r5, [r3, #0]
 800fdf2:	6862      	ldr	r2, [r4, #4]
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	f7f0 f9fa 	bl	80001f0 <memchr>
 800fdfc:	b108      	cbz	r0, 800fe02 <_printf_i+0x1f2>
 800fdfe:	1b40      	subs	r0, r0, r5
 800fe00:	6060      	str	r0, [r4, #4]
 800fe02:	6863      	ldr	r3, [r4, #4]
 800fe04:	6123      	str	r3, [r4, #16]
 800fe06:	2300      	movs	r3, #0
 800fe08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe0c:	e7a8      	b.n	800fd60 <_printf_i+0x150>
 800fe0e:	6923      	ldr	r3, [r4, #16]
 800fe10:	462a      	mov	r2, r5
 800fe12:	4649      	mov	r1, r9
 800fe14:	4640      	mov	r0, r8
 800fe16:	47d0      	blx	sl
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d0ab      	beq.n	800fd74 <_printf_i+0x164>
 800fe1c:	6823      	ldr	r3, [r4, #0]
 800fe1e:	079b      	lsls	r3, r3, #30
 800fe20:	d413      	bmi.n	800fe4a <_printf_i+0x23a>
 800fe22:	68e0      	ldr	r0, [r4, #12]
 800fe24:	9b03      	ldr	r3, [sp, #12]
 800fe26:	4298      	cmp	r0, r3
 800fe28:	bfb8      	it	lt
 800fe2a:	4618      	movlt	r0, r3
 800fe2c:	e7a4      	b.n	800fd78 <_printf_i+0x168>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	4632      	mov	r2, r6
 800fe32:	4649      	mov	r1, r9
 800fe34:	4640      	mov	r0, r8
 800fe36:	47d0      	blx	sl
 800fe38:	3001      	adds	r0, #1
 800fe3a:	d09b      	beq.n	800fd74 <_printf_i+0x164>
 800fe3c:	3501      	adds	r5, #1
 800fe3e:	68e3      	ldr	r3, [r4, #12]
 800fe40:	9903      	ldr	r1, [sp, #12]
 800fe42:	1a5b      	subs	r3, r3, r1
 800fe44:	42ab      	cmp	r3, r5
 800fe46:	dcf2      	bgt.n	800fe2e <_printf_i+0x21e>
 800fe48:	e7eb      	b.n	800fe22 <_printf_i+0x212>
 800fe4a:	2500      	movs	r5, #0
 800fe4c:	f104 0619 	add.w	r6, r4, #25
 800fe50:	e7f5      	b.n	800fe3e <_printf_i+0x22e>
 800fe52:	bf00      	nop
 800fe54:	08013105 	.word	0x08013105
 800fe58:	08013116 	.word	0x08013116

0800fe5c <_sbrk_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d06      	ldr	r5, [pc, #24]	; (800fe78 <_sbrk_r+0x1c>)
 800fe60:	2300      	movs	r3, #0
 800fe62:	4604      	mov	r4, r0
 800fe64:	4608      	mov	r0, r1
 800fe66:	602b      	str	r3, [r5, #0]
 800fe68:	f7f0 febc 	bl	8000be4 <_sbrk>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d102      	bne.n	800fe76 <_sbrk_r+0x1a>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	b103      	cbz	r3, 800fe76 <_sbrk_r+0x1a>
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
 800fe78:	2000aac0 	.word	0x2000aac0

0800fe7c <__sread>:
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	460c      	mov	r4, r1
 800fe80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe84:	f000 fa9e 	bl	80103c4 <_read_r>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	bfab      	itete	ge
 800fe8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe8e:	89a3      	ldrhlt	r3, [r4, #12]
 800fe90:	181b      	addge	r3, r3, r0
 800fe92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe96:	bfac      	ite	ge
 800fe98:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe9a:	81a3      	strhlt	r3, [r4, #12]
 800fe9c:	bd10      	pop	{r4, pc}

0800fe9e <__swrite>:
 800fe9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea2:	461f      	mov	r7, r3
 800fea4:	898b      	ldrh	r3, [r1, #12]
 800fea6:	05db      	lsls	r3, r3, #23
 800fea8:	4605      	mov	r5, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	4616      	mov	r6, r2
 800feae:	d505      	bpl.n	800febc <__swrite+0x1e>
 800feb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb4:	2302      	movs	r3, #2
 800feb6:	2200      	movs	r2, #0
 800feb8:	f000 f9d0 	bl	801025c <_lseek_r>
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fec6:	81a3      	strh	r3, [r4, #12]
 800fec8:	4632      	mov	r2, r6
 800feca:	463b      	mov	r3, r7
 800fecc:	4628      	mov	r0, r5
 800fece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fed2:	f000 b869 	b.w	800ffa8 <_write_r>

0800fed6 <__sseek>:
 800fed6:	b510      	push	{r4, lr}
 800fed8:	460c      	mov	r4, r1
 800feda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fede:	f000 f9bd 	bl	801025c <_lseek_r>
 800fee2:	1c43      	adds	r3, r0, #1
 800fee4:	89a3      	ldrh	r3, [r4, #12]
 800fee6:	bf15      	itete	ne
 800fee8:	6560      	strne	r0, [r4, #84]	; 0x54
 800feea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800feee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fef2:	81a3      	strheq	r3, [r4, #12]
 800fef4:	bf18      	it	ne
 800fef6:	81a3      	strhne	r3, [r4, #12]
 800fef8:	bd10      	pop	{r4, pc}

0800fefa <__sclose>:
 800fefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefe:	f000 b8db 	b.w	80100b8 <_close_r>
	...

0800ff04 <__swbuf_r>:
 800ff04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff06:	460e      	mov	r6, r1
 800ff08:	4614      	mov	r4, r2
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	b118      	cbz	r0, 800ff16 <__swbuf_r+0x12>
 800ff0e:	6983      	ldr	r3, [r0, #24]
 800ff10:	b90b      	cbnz	r3, 800ff16 <__swbuf_r+0x12>
 800ff12:	f7ff f9bf 	bl	800f294 <__sinit>
 800ff16:	4b21      	ldr	r3, [pc, #132]	; (800ff9c <__swbuf_r+0x98>)
 800ff18:	429c      	cmp	r4, r3
 800ff1a:	d12b      	bne.n	800ff74 <__swbuf_r+0x70>
 800ff1c:	686c      	ldr	r4, [r5, #4]
 800ff1e:	69a3      	ldr	r3, [r4, #24]
 800ff20:	60a3      	str	r3, [r4, #8]
 800ff22:	89a3      	ldrh	r3, [r4, #12]
 800ff24:	071a      	lsls	r2, r3, #28
 800ff26:	d52f      	bpl.n	800ff88 <__swbuf_r+0x84>
 800ff28:	6923      	ldr	r3, [r4, #16]
 800ff2a:	b36b      	cbz	r3, 800ff88 <__swbuf_r+0x84>
 800ff2c:	6923      	ldr	r3, [r4, #16]
 800ff2e:	6820      	ldr	r0, [r4, #0]
 800ff30:	1ac0      	subs	r0, r0, r3
 800ff32:	6963      	ldr	r3, [r4, #20]
 800ff34:	b2f6      	uxtb	r6, r6
 800ff36:	4283      	cmp	r3, r0
 800ff38:	4637      	mov	r7, r6
 800ff3a:	dc04      	bgt.n	800ff46 <__swbuf_r+0x42>
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f000 f950 	bl	80101e4 <_fflush_r>
 800ff44:	bb30      	cbnz	r0, 800ff94 <__swbuf_r+0x90>
 800ff46:	68a3      	ldr	r3, [r4, #8]
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	60a3      	str	r3, [r4, #8]
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	6022      	str	r2, [r4, #0]
 800ff52:	701e      	strb	r6, [r3, #0]
 800ff54:	6963      	ldr	r3, [r4, #20]
 800ff56:	3001      	adds	r0, #1
 800ff58:	4283      	cmp	r3, r0
 800ff5a:	d004      	beq.n	800ff66 <__swbuf_r+0x62>
 800ff5c:	89a3      	ldrh	r3, [r4, #12]
 800ff5e:	07db      	lsls	r3, r3, #31
 800ff60:	d506      	bpl.n	800ff70 <__swbuf_r+0x6c>
 800ff62:	2e0a      	cmp	r6, #10
 800ff64:	d104      	bne.n	800ff70 <__swbuf_r+0x6c>
 800ff66:	4621      	mov	r1, r4
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f000 f93b 	bl	80101e4 <_fflush_r>
 800ff6e:	b988      	cbnz	r0, 800ff94 <__swbuf_r+0x90>
 800ff70:	4638      	mov	r0, r7
 800ff72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff74:	4b0a      	ldr	r3, [pc, #40]	; (800ffa0 <__swbuf_r+0x9c>)
 800ff76:	429c      	cmp	r4, r3
 800ff78:	d101      	bne.n	800ff7e <__swbuf_r+0x7a>
 800ff7a:	68ac      	ldr	r4, [r5, #8]
 800ff7c:	e7cf      	b.n	800ff1e <__swbuf_r+0x1a>
 800ff7e:	4b09      	ldr	r3, [pc, #36]	; (800ffa4 <__swbuf_r+0xa0>)
 800ff80:	429c      	cmp	r4, r3
 800ff82:	bf08      	it	eq
 800ff84:	68ec      	ldreq	r4, [r5, #12]
 800ff86:	e7ca      	b.n	800ff1e <__swbuf_r+0x1a>
 800ff88:	4621      	mov	r1, r4
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	f000 f81e 	bl	800ffcc <__swsetup_r>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0cb      	beq.n	800ff2c <__swbuf_r+0x28>
 800ff94:	f04f 37ff 	mov.w	r7, #4294967295
 800ff98:	e7ea      	b.n	800ff70 <__swbuf_r+0x6c>
 800ff9a:	bf00      	nop
 800ff9c:	080130b4 	.word	0x080130b4
 800ffa0:	080130d4 	.word	0x080130d4
 800ffa4:	08013094 	.word	0x08013094

0800ffa8 <_write_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4d07      	ldr	r5, [pc, #28]	; (800ffc8 <_write_r+0x20>)
 800ffac:	4604      	mov	r4, r0
 800ffae:	4608      	mov	r0, r1
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	602a      	str	r2, [r5, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f7f0 fdc3 	bl	8000b42 <_write>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_write_r+0x1e>
 800ffc0:	682b      	ldr	r3, [r5, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_write_r+0x1e>
 800ffc4:	6023      	str	r3, [r4, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	2000aac0 	.word	0x2000aac0

0800ffcc <__swsetup_r>:
 800ffcc:	4b32      	ldr	r3, [pc, #200]	; (8010098 <__swsetup_r+0xcc>)
 800ffce:	b570      	push	{r4, r5, r6, lr}
 800ffd0:	681d      	ldr	r5, [r3, #0]
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460c      	mov	r4, r1
 800ffd6:	b125      	cbz	r5, 800ffe2 <__swsetup_r+0x16>
 800ffd8:	69ab      	ldr	r3, [r5, #24]
 800ffda:	b913      	cbnz	r3, 800ffe2 <__swsetup_r+0x16>
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7ff f959 	bl	800f294 <__sinit>
 800ffe2:	4b2e      	ldr	r3, [pc, #184]	; (801009c <__swsetup_r+0xd0>)
 800ffe4:	429c      	cmp	r4, r3
 800ffe6:	d10f      	bne.n	8010008 <__swsetup_r+0x3c>
 800ffe8:	686c      	ldr	r4, [r5, #4]
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fff0:	0719      	lsls	r1, r3, #28
 800fff2:	d42c      	bmi.n	801004e <__swsetup_r+0x82>
 800fff4:	06dd      	lsls	r5, r3, #27
 800fff6:	d411      	bmi.n	801001c <__swsetup_r+0x50>
 800fff8:	2309      	movs	r3, #9
 800fffa:	6033      	str	r3, [r6, #0]
 800fffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010000:	81a3      	strh	r3, [r4, #12]
 8010002:	f04f 30ff 	mov.w	r0, #4294967295
 8010006:	e03e      	b.n	8010086 <__swsetup_r+0xba>
 8010008:	4b25      	ldr	r3, [pc, #148]	; (80100a0 <__swsetup_r+0xd4>)
 801000a:	429c      	cmp	r4, r3
 801000c:	d101      	bne.n	8010012 <__swsetup_r+0x46>
 801000e:	68ac      	ldr	r4, [r5, #8]
 8010010:	e7eb      	b.n	800ffea <__swsetup_r+0x1e>
 8010012:	4b24      	ldr	r3, [pc, #144]	; (80100a4 <__swsetup_r+0xd8>)
 8010014:	429c      	cmp	r4, r3
 8010016:	bf08      	it	eq
 8010018:	68ec      	ldreq	r4, [r5, #12]
 801001a:	e7e6      	b.n	800ffea <__swsetup_r+0x1e>
 801001c:	0758      	lsls	r0, r3, #29
 801001e:	d512      	bpl.n	8010046 <__swsetup_r+0x7a>
 8010020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010022:	b141      	cbz	r1, 8010036 <__swsetup_r+0x6a>
 8010024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010028:	4299      	cmp	r1, r3
 801002a:	d002      	beq.n	8010032 <__swsetup_r+0x66>
 801002c:	4630      	mov	r0, r6
 801002e:	f7ff f9eb 	bl	800f408 <_free_r>
 8010032:	2300      	movs	r3, #0
 8010034:	6363      	str	r3, [r4, #52]	; 0x34
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801003c:	81a3      	strh	r3, [r4, #12]
 801003e:	2300      	movs	r3, #0
 8010040:	6063      	str	r3, [r4, #4]
 8010042:	6923      	ldr	r3, [r4, #16]
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	89a3      	ldrh	r3, [r4, #12]
 8010048:	f043 0308 	orr.w	r3, r3, #8
 801004c:	81a3      	strh	r3, [r4, #12]
 801004e:	6923      	ldr	r3, [r4, #16]
 8010050:	b94b      	cbnz	r3, 8010066 <__swsetup_r+0x9a>
 8010052:	89a3      	ldrh	r3, [r4, #12]
 8010054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801005c:	d003      	beq.n	8010066 <__swsetup_r+0x9a>
 801005e:	4621      	mov	r1, r4
 8010060:	4630      	mov	r0, r6
 8010062:	f000 f933 	bl	80102cc <__smakebuf_r>
 8010066:	89a0      	ldrh	r0, [r4, #12]
 8010068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801006c:	f010 0301 	ands.w	r3, r0, #1
 8010070:	d00a      	beq.n	8010088 <__swsetup_r+0xbc>
 8010072:	2300      	movs	r3, #0
 8010074:	60a3      	str	r3, [r4, #8]
 8010076:	6963      	ldr	r3, [r4, #20]
 8010078:	425b      	negs	r3, r3
 801007a:	61a3      	str	r3, [r4, #24]
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	b943      	cbnz	r3, 8010092 <__swsetup_r+0xc6>
 8010080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010084:	d1ba      	bne.n	800fffc <__swsetup_r+0x30>
 8010086:	bd70      	pop	{r4, r5, r6, pc}
 8010088:	0781      	lsls	r1, r0, #30
 801008a:	bf58      	it	pl
 801008c:	6963      	ldrpl	r3, [r4, #20]
 801008e:	60a3      	str	r3, [r4, #8]
 8010090:	e7f4      	b.n	801007c <__swsetup_r+0xb0>
 8010092:	2000      	movs	r0, #0
 8010094:	e7f7      	b.n	8010086 <__swsetup_r+0xba>
 8010096:	bf00      	nop
 8010098:	2000002c 	.word	0x2000002c
 801009c:	080130b4 	.word	0x080130b4
 80100a0:	080130d4 	.word	0x080130d4
 80100a4:	08013094 	.word	0x08013094

080100a8 <abort>:
 80100a8:	b508      	push	{r3, lr}
 80100aa:	2006      	movs	r0, #6
 80100ac:	f000 f9c4 	bl	8010438 <raise>
 80100b0:	2001      	movs	r0, #1
 80100b2:	f7f0 fd1f 	bl	8000af4 <_exit>
	...

080100b8 <_close_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4d06      	ldr	r5, [pc, #24]	; (80100d4 <_close_r+0x1c>)
 80100bc:	2300      	movs	r3, #0
 80100be:	4604      	mov	r4, r0
 80100c0:	4608      	mov	r0, r1
 80100c2:	602b      	str	r3, [r5, #0]
 80100c4:	f7f0 fd59 	bl	8000b7a <_close>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_close_r+0x1a>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_close_r+0x1a>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	2000aac0 	.word	0x2000aac0

080100d8 <__sflush_r>:
 80100d8:	898a      	ldrh	r2, [r1, #12]
 80100da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100de:	4605      	mov	r5, r0
 80100e0:	0710      	lsls	r0, r2, #28
 80100e2:	460c      	mov	r4, r1
 80100e4:	d458      	bmi.n	8010198 <__sflush_r+0xc0>
 80100e6:	684b      	ldr	r3, [r1, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dc05      	bgt.n	80100f8 <__sflush_r+0x20>
 80100ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	dc02      	bgt.n	80100f8 <__sflush_r+0x20>
 80100f2:	2000      	movs	r0, #0
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100fa:	2e00      	cmp	r6, #0
 80100fc:	d0f9      	beq.n	80100f2 <__sflush_r+0x1a>
 80100fe:	2300      	movs	r3, #0
 8010100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010104:	682f      	ldr	r7, [r5, #0]
 8010106:	602b      	str	r3, [r5, #0]
 8010108:	d032      	beq.n	8010170 <__sflush_r+0x98>
 801010a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801010c:	89a3      	ldrh	r3, [r4, #12]
 801010e:	075a      	lsls	r2, r3, #29
 8010110:	d505      	bpl.n	801011e <__sflush_r+0x46>
 8010112:	6863      	ldr	r3, [r4, #4]
 8010114:	1ac0      	subs	r0, r0, r3
 8010116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010118:	b10b      	cbz	r3, 801011e <__sflush_r+0x46>
 801011a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801011c:	1ac0      	subs	r0, r0, r3
 801011e:	2300      	movs	r3, #0
 8010120:	4602      	mov	r2, r0
 8010122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010124:	6a21      	ldr	r1, [r4, #32]
 8010126:	4628      	mov	r0, r5
 8010128:	47b0      	blx	r6
 801012a:	1c43      	adds	r3, r0, #1
 801012c:	89a3      	ldrh	r3, [r4, #12]
 801012e:	d106      	bne.n	801013e <__sflush_r+0x66>
 8010130:	6829      	ldr	r1, [r5, #0]
 8010132:	291d      	cmp	r1, #29
 8010134:	d82c      	bhi.n	8010190 <__sflush_r+0xb8>
 8010136:	4a2a      	ldr	r2, [pc, #168]	; (80101e0 <__sflush_r+0x108>)
 8010138:	40ca      	lsrs	r2, r1
 801013a:	07d6      	lsls	r6, r2, #31
 801013c:	d528      	bpl.n	8010190 <__sflush_r+0xb8>
 801013e:	2200      	movs	r2, #0
 8010140:	6062      	str	r2, [r4, #4]
 8010142:	04d9      	lsls	r1, r3, #19
 8010144:	6922      	ldr	r2, [r4, #16]
 8010146:	6022      	str	r2, [r4, #0]
 8010148:	d504      	bpl.n	8010154 <__sflush_r+0x7c>
 801014a:	1c42      	adds	r2, r0, #1
 801014c:	d101      	bne.n	8010152 <__sflush_r+0x7a>
 801014e:	682b      	ldr	r3, [r5, #0]
 8010150:	b903      	cbnz	r3, 8010154 <__sflush_r+0x7c>
 8010152:	6560      	str	r0, [r4, #84]	; 0x54
 8010154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010156:	602f      	str	r7, [r5, #0]
 8010158:	2900      	cmp	r1, #0
 801015a:	d0ca      	beq.n	80100f2 <__sflush_r+0x1a>
 801015c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010160:	4299      	cmp	r1, r3
 8010162:	d002      	beq.n	801016a <__sflush_r+0x92>
 8010164:	4628      	mov	r0, r5
 8010166:	f7ff f94f 	bl	800f408 <_free_r>
 801016a:	2000      	movs	r0, #0
 801016c:	6360      	str	r0, [r4, #52]	; 0x34
 801016e:	e7c1      	b.n	80100f4 <__sflush_r+0x1c>
 8010170:	6a21      	ldr	r1, [r4, #32]
 8010172:	2301      	movs	r3, #1
 8010174:	4628      	mov	r0, r5
 8010176:	47b0      	blx	r6
 8010178:	1c41      	adds	r1, r0, #1
 801017a:	d1c7      	bne.n	801010c <__sflush_r+0x34>
 801017c:	682b      	ldr	r3, [r5, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d0c4      	beq.n	801010c <__sflush_r+0x34>
 8010182:	2b1d      	cmp	r3, #29
 8010184:	d001      	beq.n	801018a <__sflush_r+0xb2>
 8010186:	2b16      	cmp	r3, #22
 8010188:	d101      	bne.n	801018e <__sflush_r+0xb6>
 801018a:	602f      	str	r7, [r5, #0]
 801018c:	e7b1      	b.n	80100f2 <__sflush_r+0x1a>
 801018e:	89a3      	ldrh	r3, [r4, #12]
 8010190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010194:	81a3      	strh	r3, [r4, #12]
 8010196:	e7ad      	b.n	80100f4 <__sflush_r+0x1c>
 8010198:	690f      	ldr	r7, [r1, #16]
 801019a:	2f00      	cmp	r7, #0
 801019c:	d0a9      	beq.n	80100f2 <__sflush_r+0x1a>
 801019e:	0793      	lsls	r3, r2, #30
 80101a0:	680e      	ldr	r6, [r1, #0]
 80101a2:	bf08      	it	eq
 80101a4:	694b      	ldreq	r3, [r1, #20]
 80101a6:	600f      	str	r7, [r1, #0]
 80101a8:	bf18      	it	ne
 80101aa:	2300      	movne	r3, #0
 80101ac:	eba6 0807 	sub.w	r8, r6, r7
 80101b0:	608b      	str	r3, [r1, #8]
 80101b2:	f1b8 0f00 	cmp.w	r8, #0
 80101b6:	dd9c      	ble.n	80100f2 <__sflush_r+0x1a>
 80101b8:	6a21      	ldr	r1, [r4, #32]
 80101ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101bc:	4643      	mov	r3, r8
 80101be:	463a      	mov	r2, r7
 80101c0:	4628      	mov	r0, r5
 80101c2:	47b0      	blx	r6
 80101c4:	2800      	cmp	r0, #0
 80101c6:	dc06      	bgt.n	80101d6 <__sflush_r+0xfe>
 80101c8:	89a3      	ldrh	r3, [r4, #12]
 80101ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101ce:	81a3      	strh	r3, [r4, #12]
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	e78e      	b.n	80100f4 <__sflush_r+0x1c>
 80101d6:	4407      	add	r7, r0
 80101d8:	eba8 0800 	sub.w	r8, r8, r0
 80101dc:	e7e9      	b.n	80101b2 <__sflush_r+0xda>
 80101de:	bf00      	nop
 80101e0:	20400001 	.word	0x20400001

080101e4 <_fflush_r>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	690b      	ldr	r3, [r1, #16]
 80101e8:	4605      	mov	r5, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	b913      	cbnz	r3, 80101f4 <_fflush_r+0x10>
 80101ee:	2500      	movs	r5, #0
 80101f0:	4628      	mov	r0, r5
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	b118      	cbz	r0, 80101fe <_fflush_r+0x1a>
 80101f6:	6983      	ldr	r3, [r0, #24]
 80101f8:	b90b      	cbnz	r3, 80101fe <_fflush_r+0x1a>
 80101fa:	f7ff f84b 	bl	800f294 <__sinit>
 80101fe:	4b14      	ldr	r3, [pc, #80]	; (8010250 <_fflush_r+0x6c>)
 8010200:	429c      	cmp	r4, r3
 8010202:	d11b      	bne.n	801023c <_fflush_r+0x58>
 8010204:	686c      	ldr	r4, [r5, #4]
 8010206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d0ef      	beq.n	80101ee <_fflush_r+0xa>
 801020e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010210:	07d0      	lsls	r0, r2, #31
 8010212:	d404      	bmi.n	801021e <_fflush_r+0x3a>
 8010214:	0599      	lsls	r1, r3, #22
 8010216:	d402      	bmi.n	801021e <_fflush_r+0x3a>
 8010218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801021a:	f7ff f8eb 	bl	800f3f4 <__retarget_lock_acquire_recursive>
 801021e:	4628      	mov	r0, r5
 8010220:	4621      	mov	r1, r4
 8010222:	f7ff ff59 	bl	80100d8 <__sflush_r>
 8010226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010228:	07da      	lsls	r2, r3, #31
 801022a:	4605      	mov	r5, r0
 801022c:	d4e0      	bmi.n	80101f0 <_fflush_r+0xc>
 801022e:	89a3      	ldrh	r3, [r4, #12]
 8010230:	059b      	lsls	r3, r3, #22
 8010232:	d4dd      	bmi.n	80101f0 <_fflush_r+0xc>
 8010234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010236:	f7ff f8de 	bl	800f3f6 <__retarget_lock_release_recursive>
 801023a:	e7d9      	b.n	80101f0 <_fflush_r+0xc>
 801023c:	4b05      	ldr	r3, [pc, #20]	; (8010254 <_fflush_r+0x70>)
 801023e:	429c      	cmp	r4, r3
 8010240:	d101      	bne.n	8010246 <_fflush_r+0x62>
 8010242:	68ac      	ldr	r4, [r5, #8]
 8010244:	e7df      	b.n	8010206 <_fflush_r+0x22>
 8010246:	4b04      	ldr	r3, [pc, #16]	; (8010258 <_fflush_r+0x74>)
 8010248:	429c      	cmp	r4, r3
 801024a:	bf08      	it	eq
 801024c:	68ec      	ldreq	r4, [r5, #12]
 801024e:	e7da      	b.n	8010206 <_fflush_r+0x22>
 8010250:	080130b4 	.word	0x080130b4
 8010254:	080130d4 	.word	0x080130d4
 8010258:	08013094 	.word	0x08013094

0801025c <_lseek_r>:
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	4d07      	ldr	r5, [pc, #28]	; (801027c <_lseek_r+0x20>)
 8010260:	4604      	mov	r4, r0
 8010262:	4608      	mov	r0, r1
 8010264:	4611      	mov	r1, r2
 8010266:	2200      	movs	r2, #0
 8010268:	602a      	str	r2, [r5, #0]
 801026a:	461a      	mov	r2, r3
 801026c:	f7f0 fcac 	bl	8000bc8 <_lseek>
 8010270:	1c43      	adds	r3, r0, #1
 8010272:	d102      	bne.n	801027a <_lseek_r+0x1e>
 8010274:	682b      	ldr	r3, [r5, #0]
 8010276:	b103      	cbz	r3, 801027a <_lseek_r+0x1e>
 8010278:	6023      	str	r3, [r4, #0]
 801027a:	bd38      	pop	{r3, r4, r5, pc}
 801027c:	2000aac0 	.word	0x2000aac0

08010280 <__swhatbuf_r>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	460e      	mov	r6, r1
 8010284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010288:	2900      	cmp	r1, #0
 801028a:	b096      	sub	sp, #88	; 0x58
 801028c:	4614      	mov	r4, r2
 801028e:	461d      	mov	r5, r3
 8010290:	da08      	bge.n	80102a4 <__swhatbuf_r+0x24>
 8010292:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	602a      	str	r2, [r5, #0]
 801029a:	061a      	lsls	r2, r3, #24
 801029c:	d410      	bmi.n	80102c0 <__swhatbuf_r+0x40>
 801029e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102a2:	e00e      	b.n	80102c2 <__swhatbuf_r+0x42>
 80102a4:	466a      	mov	r2, sp
 80102a6:	f000 f8e3 	bl	8010470 <_fstat_r>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	dbf1      	blt.n	8010292 <__swhatbuf_r+0x12>
 80102ae:	9a01      	ldr	r2, [sp, #4]
 80102b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102b8:	425a      	negs	r2, r3
 80102ba:	415a      	adcs	r2, r3
 80102bc:	602a      	str	r2, [r5, #0]
 80102be:	e7ee      	b.n	801029e <__swhatbuf_r+0x1e>
 80102c0:	2340      	movs	r3, #64	; 0x40
 80102c2:	2000      	movs	r0, #0
 80102c4:	6023      	str	r3, [r4, #0]
 80102c6:	b016      	add	sp, #88	; 0x58
 80102c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080102cc <__smakebuf_r>:
 80102cc:	898b      	ldrh	r3, [r1, #12]
 80102ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102d0:	079d      	lsls	r5, r3, #30
 80102d2:	4606      	mov	r6, r0
 80102d4:	460c      	mov	r4, r1
 80102d6:	d507      	bpl.n	80102e8 <__smakebuf_r+0x1c>
 80102d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102dc:	6023      	str	r3, [r4, #0]
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	2301      	movs	r3, #1
 80102e2:	6163      	str	r3, [r4, #20]
 80102e4:	b002      	add	sp, #8
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
 80102e8:	ab01      	add	r3, sp, #4
 80102ea:	466a      	mov	r2, sp
 80102ec:	f7ff ffc8 	bl	8010280 <__swhatbuf_r>
 80102f0:	9900      	ldr	r1, [sp, #0]
 80102f2:	4605      	mov	r5, r0
 80102f4:	4630      	mov	r0, r6
 80102f6:	f7ff f8f3 	bl	800f4e0 <_malloc_r>
 80102fa:	b948      	cbnz	r0, 8010310 <__smakebuf_r+0x44>
 80102fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010300:	059a      	lsls	r2, r3, #22
 8010302:	d4ef      	bmi.n	80102e4 <__smakebuf_r+0x18>
 8010304:	f023 0303 	bic.w	r3, r3, #3
 8010308:	f043 0302 	orr.w	r3, r3, #2
 801030c:	81a3      	strh	r3, [r4, #12]
 801030e:	e7e3      	b.n	80102d8 <__smakebuf_r+0xc>
 8010310:	4b0d      	ldr	r3, [pc, #52]	; (8010348 <__smakebuf_r+0x7c>)
 8010312:	62b3      	str	r3, [r6, #40]	; 0x28
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	6020      	str	r0, [r4, #0]
 8010318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801031c:	81a3      	strh	r3, [r4, #12]
 801031e:	9b00      	ldr	r3, [sp, #0]
 8010320:	6163      	str	r3, [r4, #20]
 8010322:	9b01      	ldr	r3, [sp, #4]
 8010324:	6120      	str	r0, [r4, #16]
 8010326:	b15b      	cbz	r3, 8010340 <__smakebuf_r+0x74>
 8010328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801032c:	4630      	mov	r0, r6
 801032e:	f000 f8b1 	bl	8010494 <_isatty_r>
 8010332:	b128      	cbz	r0, 8010340 <__smakebuf_r+0x74>
 8010334:	89a3      	ldrh	r3, [r4, #12]
 8010336:	f023 0303 	bic.w	r3, r3, #3
 801033a:	f043 0301 	orr.w	r3, r3, #1
 801033e:	81a3      	strh	r3, [r4, #12]
 8010340:	89a0      	ldrh	r0, [r4, #12]
 8010342:	4305      	orrs	r5, r0
 8010344:	81a5      	strh	r5, [r4, #12]
 8010346:	e7cd      	b.n	80102e4 <__smakebuf_r+0x18>
 8010348:	0800f22d 	.word	0x0800f22d

0801034c <__malloc_lock>:
 801034c:	4801      	ldr	r0, [pc, #4]	; (8010354 <__malloc_lock+0x8>)
 801034e:	f7ff b851 	b.w	800f3f4 <__retarget_lock_acquire_recursive>
 8010352:	bf00      	nop
 8010354:	2000aac4 	.word	0x2000aac4

08010358 <__malloc_unlock>:
 8010358:	4801      	ldr	r0, [pc, #4]	; (8010360 <__malloc_unlock+0x8>)
 801035a:	f7ff b84c 	b.w	800f3f6 <__retarget_lock_release_recursive>
 801035e:	bf00      	nop
 8010360:	2000aac4 	.word	0x2000aac4

08010364 <_realloc_r>:
 8010364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010368:	4680      	mov	r8, r0
 801036a:	4614      	mov	r4, r2
 801036c:	460e      	mov	r6, r1
 801036e:	b921      	cbnz	r1, 801037a <_realloc_r+0x16>
 8010370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010374:	4611      	mov	r1, r2
 8010376:	f7ff b8b3 	b.w	800f4e0 <_malloc_r>
 801037a:	b92a      	cbnz	r2, 8010388 <_realloc_r+0x24>
 801037c:	f7ff f844 	bl	800f408 <_free_r>
 8010380:	4625      	mov	r5, r4
 8010382:	4628      	mov	r0, r5
 8010384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010388:	f000 f894 	bl	80104b4 <_malloc_usable_size_r>
 801038c:	4284      	cmp	r4, r0
 801038e:	4607      	mov	r7, r0
 8010390:	d802      	bhi.n	8010398 <_realloc_r+0x34>
 8010392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010396:	d812      	bhi.n	80103be <_realloc_r+0x5a>
 8010398:	4621      	mov	r1, r4
 801039a:	4640      	mov	r0, r8
 801039c:	f7ff f8a0 	bl	800f4e0 <_malloc_r>
 80103a0:	4605      	mov	r5, r0
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d0ed      	beq.n	8010382 <_realloc_r+0x1e>
 80103a6:	42bc      	cmp	r4, r7
 80103a8:	4622      	mov	r2, r4
 80103aa:	4631      	mov	r1, r6
 80103ac:	bf28      	it	cs
 80103ae:	463a      	movcs	r2, r7
 80103b0:	f7fe fe54 	bl	800f05c <memcpy>
 80103b4:	4631      	mov	r1, r6
 80103b6:	4640      	mov	r0, r8
 80103b8:	f7ff f826 	bl	800f408 <_free_r>
 80103bc:	e7e1      	b.n	8010382 <_realloc_r+0x1e>
 80103be:	4635      	mov	r5, r6
 80103c0:	e7df      	b.n	8010382 <_realloc_r+0x1e>
	...

080103c4 <_read_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d07      	ldr	r5, [pc, #28]	; (80103e4 <_read_r+0x20>)
 80103c8:	4604      	mov	r4, r0
 80103ca:	4608      	mov	r0, r1
 80103cc:	4611      	mov	r1, r2
 80103ce:	2200      	movs	r2, #0
 80103d0:	602a      	str	r2, [r5, #0]
 80103d2:	461a      	mov	r2, r3
 80103d4:	f7f0 fb98 	bl	8000b08 <_read>
 80103d8:	1c43      	adds	r3, r0, #1
 80103da:	d102      	bne.n	80103e2 <_read_r+0x1e>
 80103dc:	682b      	ldr	r3, [r5, #0]
 80103de:	b103      	cbz	r3, 80103e2 <_read_r+0x1e>
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	bd38      	pop	{r3, r4, r5, pc}
 80103e4:	2000aac0 	.word	0x2000aac0

080103e8 <_raise_r>:
 80103e8:	291f      	cmp	r1, #31
 80103ea:	b538      	push	{r3, r4, r5, lr}
 80103ec:	4604      	mov	r4, r0
 80103ee:	460d      	mov	r5, r1
 80103f0:	d904      	bls.n	80103fc <_raise_r+0x14>
 80103f2:	2316      	movs	r3, #22
 80103f4:	6003      	str	r3, [r0, #0]
 80103f6:	f04f 30ff 	mov.w	r0, #4294967295
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103fe:	b112      	cbz	r2, 8010406 <_raise_r+0x1e>
 8010400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010404:	b94b      	cbnz	r3, 801041a <_raise_r+0x32>
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f830 	bl	801046c <_getpid_r>
 801040c:	462a      	mov	r2, r5
 801040e:	4601      	mov	r1, r0
 8010410:	4620      	mov	r0, r4
 8010412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010416:	f000 b817 	b.w	8010448 <_kill_r>
 801041a:	2b01      	cmp	r3, #1
 801041c:	d00a      	beq.n	8010434 <_raise_r+0x4c>
 801041e:	1c59      	adds	r1, r3, #1
 8010420:	d103      	bne.n	801042a <_raise_r+0x42>
 8010422:	2316      	movs	r3, #22
 8010424:	6003      	str	r3, [r0, #0]
 8010426:	2001      	movs	r0, #1
 8010428:	e7e7      	b.n	80103fa <_raise_r+0x12>
 801042a:	2400      	movs	r4, #0
 801042c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010430:	4628      	mov	r0, r5
 8010432:	4798      	blx	r3
 8010434:	2000      	movs	r0, #0
 8010436:	e7e0      	b.n	80103fa <_raise_r+0x12>

08010438 <raise>:
 8010438:	4b02      	ldr	r3, [pc, #8]	; (8010444 <raise+0xc>)
 801043a:	4601      	mov	r1, r0
 801043c:	6818      	ldr	r0, [r3, #0]
 801043e:	f7ff bfd3 	b.w	80103e8 <_raise_r>
 8010442:	bf00      	nop
 8010444:	2000002c 	.word	0x2000002c

08010448 <_kill_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	; (8010468 <_kill_r+0x20>)
 801044c:	2300      	movs	r3, #0
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	4611      	mov	r1, r2
 8010454:	602b      	str	r3, [r5, #0]
 8010456:	f7f0 fb3b 	bl	8000ad0 <_kill>
 801045a:	1c43      	adds	r3, r0, #1
 801045c:	d102      	bne.n	8010464 <_kill_r+0x1c>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b103      	cbz	r3, 8010464 <_kill_r+0x1c>
 8010462:	6023      	str	r3, [r4, #0]
 8010464:	bd38      	pop	{r3, r4, r5, pc}
 8010466:	bf00      	nop
 8010468:	2000aac0 	.word	0x2000aac0

0801046c <_getpid_r>:
 801046c:	f7f0 bb28 	b.w	8000ac0 <_getpid>

08010470 <_fstat_r>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	4d07      	ldr	r5, [pc, #28]	; (8010490 <_fstat_r+0x20>)
 8010474:	2300      	movs	r3, #0
 8010476:	4604      	mov	r4, r0
 8010478:	4608      	mov	r0, r1
 801047a:	4611      	mov	r1, r2
 801047c:	602b      	str	r3, [r5, #0]
 801047e:	f7f0 fb88 	bl	8000b92 <_fstat>
 8010482:	1c43      	adds	r3, r0, #1
 8010484:	d102      	bne.n	801048c <_fstat_r+0x1c>
 8010486:	682b      	ldr	r3, [r5, #0]
 8010488:	b103      	cbz	r3, 801048c <_fstat_r+0x1c>
 801048a:	6023      	str	r3, [r4, #0]
 801048c:	bd38      	pop	{r3, r4, r5, pc}
 801048e:	bf00      	nop
 8010490:	2000aac0 	.word	0x2000aac0

08010494 <_isatty_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d06      	ldr	r5, [pc, #24]	; (80104b0 <_isatty_r+0x1c>)
 8010498:	2300      	movs	r3, #0
 801049a:	4604      	mov	r4, r0
 801049c:	4608      	mov	r0, r1
 801049e:	602b      	str	r3, [r5, #0]
 80104a0:	f7f0 fb87 	bl	8000bb2 <_isatty>
 80104a4:	1c43      	adds	r3, r0, #1
 80104a6:	d102      	bne.n	80104ae <_isatty_r+0x1a>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	b103      	cbz	r3, 80104ae <_isatty_r+0x1a>
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	2000aac0 	.word	0x2000aac0

080104b4 <_malloc_usable_size_r>:
 80104b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104b8:	1f18      	subs	r0, r3, #4
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	bfbc      	itt	lt
 80104be:	580b      	ldrlt	r3, [r1, r0]
 80104c0:	18c0      	addlt	r0, r0, r3
 80104c2:	4770      	bx	lr

080104c4 <_init>:
 80104c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c6:	bf00      	nop
 80104c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ca:	bc08      	pop	{r3}
 80104cc:	469e      	mov	lr, r3
 80104ce:	4770      	bx	lr

080104d0 <_fini>:
 80104d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d2:	bf00      	nop
 80104d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104d6:	bc08      	pop	{r3}
 80104d8:	469e      	mov	lr, r3
 80104da:	4770      	bx	lr
